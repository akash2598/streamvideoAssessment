{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Constants = require('../constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _MetricsConstants = require('../constants/MetricsConstants');\n\nvar _MetricsConstants2 = _interopRequireDefault(_MetricsConstants);\n\nvar _MetricsList = require('../vo/MetricsList');\n\nvar _MetricsList2 = _interopRequireDefault(_MetricsList);\n\nvar _HTTPRequest = require('../vo/metrics/HTTPRequest');\n\nvar _RepresentationSwitch = require('../vo/metrics/RepresentationSwitch');\n\nvar _RepresentationSwitch2 = _interopRequireDefault(_RepresentationSwitch);\n\nvar _BufferLevel = require('../vo/metrics/BufferLevel');\n\nvar _BufferLevel2 = _interopRequireDefault(_BufferLevel);\n\nvar _BufferState = require('../vo/metrics/BufferState');\n\nvar _BufferState2 = _interopRequireDefault(_BufferState);\n\nvar _DVRInfo = require('../vo/metrics/DVRInfo');\n\nvar _DVRInfo2 = _interopRequireDefault(_DVRInfo);\n\nvar _DroppedFrames = require('../vo/metrics/DroppedFrames');\n\nvar _DroppedFrames2 = _interopRequireDefault(_DroppedFrames);\n\nvar _ManifestUpdate = require('../vo/metrics/ManifestUpdate');\n\nvar _SchedulingInfo = require('../vo/metrics/SchedulingInfo');\n\nvar _SchedulingInfo2 = _interopRequireDefault(_SchedulingInfo);\n\nvar _EventBus = require('../../core/EventBus');\n\nvar _EventBus2 = _interopRequireDefault(_EventBus);\n\nvar _RequestsQueue = require('../vo/metrics/RequestsQueue');\n\nvar _RequestsQueue2 = _interopRequireDefault(_RequestsQueue);\n\nvar _Events = require('../../core/events/Events');\n\nvar _Events2 = _interopRequireDefault(_Events);\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction MetricsModel(config) {\n  config = config || {};\n  var settings = config.settings;\n  var context = this.context;\n  var eventBus = (0, _EventBus2.default)(context).getInstance();\n  var instance = void 0,\n      streamMetrics = void 0;\n\n  function setup() {\n    streamMetrics = {};\n  }\n\n  function metricsChanged() {\n    eventBus.trigger(_Events2.default.METRICS_CHANGED);\n  }\n\n  function metricChanged(mediaType) {\n    eventBus.trigger(_Events2.default.METRIC_CHANGED, {\n      mediaType: mediaType\n    });\n    metricsChanged();\n  }\n\n  function metricUpdated(mediaType, metricType, vo) {\n    eventBus.trigger(_Events2.default.METRIC_UPDATED, {\n      mediaType: mediaType,\n      metric: metricType,\n      value: vo\n    });\n    metricChanged(mediaType);\n  }\n\n  function metricAdded(mediaType, metricType, vo) {\n    eventBus.trigger(_Events2.default.METRIC_ADDED, {\n      mediaType: mediaType,\n      metric: metricType,\n      value: vo\n    });\n    metricChanged(mediaType);\n  }\n\n  function clearCurrentMetricsForType(type) {\n    delete streamMetrics[type];\n    metricChanged(type);\n  }\n\n  function clearAllCurrentMetrics() {\n    streamMetrics = {};\n    metricsChanged();\n  }\n\n  function getMetricsFor(type, readOnly) {\n    var metrics = null;\n\n    if (!type) {\n      return metrics;\n    }\n\n    if (streamMetrics.hasOwnProperty(type)) {\n      metrics = streamMetrics[type];\n    } else if (!readOnly) {\n      metrics = new _MetricsList2.default();\n      streamMetrics[type] = metrics;\n    }\n\n    return metrics;\n  }\n\n  function pushMetrics(type, list, value) {\n    var metrics = getMetricsFor(type);\n\n    if (metrics !== null) {\n      metrics[list].push(value);\n\n      if (metrics[list].length > settings.get().streaming.metricsMaxListDepth) {\n        metrics[list].shift();\n      }\n    }\n  }\n\n  function appendHttpTrace(httpRequest, s, d, b) {\n    var vo = new _HTTPRequest.HTTPRequestTrace();\n    vo.s = s;\n    vo.d = d;\n    vo.b = b;\n    httpRequest.trace.push(vo);\n\n    if (!httpRequest.interval) {\n      httpRequest.interval = 0;\n    }\n\n    httpRequest.interval += d;\n    return vo;\n  }\n\n  function addHttpRequest(mediaType, tcpid, type, url, quality, actualurl, serviceLocation, range, trequest, tresponse, tfinish, responsecode, mediaduration, responseHeaders, traces) {\n    var vo = new _HTTPRequest.HTTPRequest(); // ISO 23009-1 D.4.3 NOTE 2:\n    // All entries for a given object will have the same URL and range\n    // and so can easily be correlated. If there were redirects or\n    // failures there will be one entry for each redirect/failure.\n    // The redirect-to URL or alternative url (where multiple have been\n    // provided in the MPD) will appear as the actualurl of the next\n    // entry with the same url value.\n\n    if (actualurl && actualurl !== url) {\n      // given the above, add an entry for the original request\n      addHttpRequest(mediaType, null, type, url, quality, null, null, range, trequest, null, // unknown\n      null, // unknown\n      null, // unknown, probably a 302\n      mediaduration, null, null);\n      vo.actualurl = actualurl;\n    }\n\n    vo.tcpid = tcpid;\n    vo.type = type;\n    vo.url = url;\n    vo.range = range;\n    vo.trequest = trequest;\n    vo.tresponse = tresponse;\n    vo.responsecode = responsecode;\n    vo._tfinish = tfinish;\n    vo._stream = mediaType;\n    vo._mediaduration = mediaduration;\n    vo._quality = quality;\n    vo._responseHeaders = responseHeaders;\n    vo._serviceLocation = serviceLocation;\n\n    if (traces) {\n      traces.forEach(function (trace) {\n        appendHttpTrace(vo, trace.s, trace.d, trace.b);\n      });\n    } else {\n      // The interval and trace shall be absent for redirect and failure records.\n      delete vo.interval;\n      delete vo.trace;\n    }\n\n    pushAndNotify(mediaType, _MetricsConstants2.default.HTTP_REQUEST, vo);\n  }\n\n  function addRepresentationSwitch(mediaType, t, mt, to, lto) {\n    var vo = new _RepresentationSwitch2.default();\n    vo.t = t;\n    vo.mt = mt;\n    vo.to = to;\n\n    if (lto) {\n      vo.lto = lto;\n    } else {\n      delete vo.lto;\n    }\n\n    pushAndNotify(mediaType, _MetricsConstants2.default.TRACK_SWITCH, vo);\n  }\n\n  function pushAndNotify(mediaType, metricType, metricObject) {\n    pushMetrics(mediaType, metricType, metricObject);\n    metricAdded(mediaType, metricType, metricObject);\n  }\n\n  function addBufferLevel(mediaType, t, level) {\n    var vo = new _BufferLevel2.default();\n    vo.t = t;\n    vo.level = level;\n    pushAndNotify(mediaType, _MetricsConstants2.default.BUFFER_LEVEL, vo);\n  }\n\n  function addBufferState(mediaType, state, target) {\n    var vo = new _BufferState2.default();\n    vo.target = target;\n    vo.state = state;\n    pushAndNotify(mediaType, _MetricsConstants2.default.BUFFER_STATE, vo);\n  }\n\n  function addDVRInfo(mediaType, currentTime, mpd, range) {\n    var vo = new _DVRInfo2.default();\n    vo.time = currentTime;\n    vo.range = range;\n    vo.manifestInfo = mpd;\n    pushAndNotify(mediaType, _MetricsConstants2.default.DVR_INFO, vo);\n  }\n\n  function addDroppedFrames(mediaType, quality) {\n    var vo = new _DroppedFrames2.default();\n    var list = getMetricsFor(mediaType).DroppedFrames;\n\n    if (!quality) {\n      return;\n    }\n\n    vo.time = quality.creationTime;\n    vo.droppedFrames = quality.droppedVideoFrames;\n\n    if (list.length > 0 && list[list.length - 1] == vo) {\n      return;\n    }\n\n    pushAndNotify(mediaType, _MetricsConstants2.default.DROPPED_FRAMES, vo);\n  }\n\n  function addSchedulingInfo(mediaType, t, type, startTime, availabilityStartTime, duration, quality, range, state) {\n    var vo = new _SchedulingInfo2.default();\n    vo.mediaType = mediaType;\n    vo.t = t;\n    vo.type = type;\n    vo.startTime = startTime;\n    vo.availabilityStartTime = availabilityStartTime;\n    vo.duration = duration;\n    vo.quality = quality;\n    vo.range = range;\n    vo.state = state;\n    pushAndNotify(mediaType, _MetricsConstants2.default.SCHEDULING_INFO, vo);\n  }\n\n  function addRequestsQueue(mediaType, loadingRequests, executedRequests) {\n    var vo = new _RequestsQueue2.default();\n    vo.loadingRequests = loadingRequests;\n    vo.executedRequests = executedRequests;\n    getMetricsFor(mediaType).RequestsQueue = vo;\n    metricAdded(mediaType, _MetricsConstants2.default.REQUESTS_QUEUE, vo);\n  }\n\n  function addManifestUpdate(mediaType, type, requestTime, fetchTime, availabilityStartTime, presentationStartTime, clientTimeOffset, currentTime, buffered, latency) {\n    var vo = new _ManifestUpdate.ManifestUpdate();\n    vo.mediaType = mediaType;\n    vo.type = type;\n    vo.requestTime = requestTime; // when this manifest update was requested\n\n    vo.fetchTime = fetchTime; // when this manifest update was received\n\n    vo.availabilityStartTime = availabilityStartTime;\n    vo.presentationStartTime = presentationStartTime; // the seek point (liveEdge for dynamic, Stream[0].startTime for static)\n\n    vo.clientTimeOffset = clientTimeOffset; // the calculated difference between the server and client wall clock time\n\n    vo.currentTime = currentTime; // actual element.currentTime\n\n    vo.buffered = buffered; // actual element.ranges\n\n    vo.latency = latency; // (static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - currentTime)\n\n    pushMetrics(_Constants2.default.STREAM, _MetricsConstants2.default.MANIFEST_UPDATE, vo);\n    metricAdded(mediaType, _MetricsConstants2.default.MANIFEST_UPDATE, vo);\n  }\n\n  function updateManifestUpdateInfo(manifestUpdate, updatedFields) {\n    if (manifestUpdate) {\n      for (var field in updatedFields) {\n        manifestUpdate[field] = updatedFields[field];\n      }\n\n      metricUpdated(manifestUpdate.mediaType, _MetricsConstants2.default.MANIFEST_UPDATE, manifestUpdate);\n    }\n  }\n\n  function addManifestUpdateStreamInfo(manifestUpdate, id, index, start, duration) {\n    if (manifestUpdate) {\n      var vo = new _ManifestUpdate.ManifestUpdateStreamInfo();\n      vo.id = id;\n      vo.index = index;\n      vo.start = start;\n      vo.duration = duration;\n      manifestUpdate.streamInfo.push(vo);\n      metricUpdated(manifestUpdate.mediaType, _MetricsConstants2.default.MANIFEST_UPDATE_STREAM_INFO, manifestUpdate);\n    }\n  }\n\n  function addManifestUpdateRepresentationInfo(manifestUpdate, id, index, streamIndex, mediaType, presentationTimeOffset, startNumber, fragmentInfoType) {\n    if (manifestUpdate && manifestUpdate.representationInfo) {\n      var vo = new _ManifestUpdate.ManifestUpdateRepresentationInfo();\n      vo.id = id;\n      vo.index = index;\n      vo.streamIndex = streamIndex;\n      vo.mediaType = mediaType;\n      vo.startNumber = startNumber;\n      vo.fragmentInfoType = fragmentInfoType;\n      vo.presentationTimeOffset = presentationTimeOffset;\n      manifestUpdate.representationInfo.push(vo);\n      metricUpdated(manifestUpdate.mediaType, _MetricsConstants2.default.MANIFEST_UPDATE_TRACK_INFO, manifestUpdate);\n    }\n  }\n\n  function addPlayList(vo) {\n    if (vo.trace && Array.isArray(vo.trace)) {\n      vo.trace.forEach(function (trace) {\n        if (trace.hasOwnProperty('subreplevel') && !trace.subreplevel) {\n          delete trace.subreplevel;\n        }\n      });\n    } else {\n      delete vo.trace;\n    }\n\n    pushAndNotify(_Constants2.default.STREAM, _MetricsConstants2.default.PLAY_LIST, vo);\n  }\n\n  function addDVBErrors(vo) {\n    pushAndNotify(_Constants2.default.STREAM, _MetricsConstants2.default.DVB_ERRORS, vo);\n  }\n\n  instance = {\n    clearCurrentMetricsForType: clearCurrentMetricsForType,\n    clearAllCurrentMetrics: clearAllCurrentMetrics,\n    getMetricsFor: getMetricsFor,\n    addHttpRequest: addHttpRequest,\n    addRepresentationSwitch: addRepresentationSwitch,\n    addBufferLevel: addBufferLevel,\n    addBufferState: addBufferState,\n    addDVRInfo: addDVRInfo,\n    addDroppedFrames: addDroppedFrames,\n    addSchedulingInfo: addSchedulingInfo,\n    addRequestsQueue: addRequestsQueue,\n    addManifestUpdate: addManifestUpdate,\n    updateManifestUpdateInfo: updateManifestUpdateInfo,\n    addManifestUpdateStreamInfo: addManifestUpdateStreamInfo,\n    addManifestUpdateRepresentationInfo: addManifestUpdateRepresentationInfo,\n    addPlayList: addPlayList,\n    addDVBErrors: addDVBErrors\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nMetricsModel.__dashjs_factory_name = 'MetricsModel';\nexports.default = _FactoryMaker2.default.getSingletonFactory(MetricsModel);","map":{"version":3,"sources":["../../../../../src/streaming/models/MetricsModel.js"],"names":["config","settings","context","eventBus","instance","streamMetrics","Events","mediaType","metricsChanged","metric","value","metricChanged","metrics","MetricsList","getMetricsFor","vo","HTTPRequestTrace","httpRequest","HTTPRequest","actualurl","addHttpRequest","traces","appendHttpTrace","trace","pushAndNotify","MetricsConstants","TrackSwitch","pushMetrics","metricAdded","BufferLevel","BufferState","DVRInfo","DroppedFrames","list","quality","SchedulingInfo","RequestsQueue","ManifestUpdate","Constants","manifestUpdate","updatedFields","metricUpdated","ManifestUpdateStreamInfo","ManifestUpdateRepresentationInfo","Array","clearCurrentMetricsForType","clearAllCurrentMetrics","addRepresentationSwitch","addBufferLevel","addBufferState","addDVRInfo","addDroppedFrames","addSchedulingInfo","addRequestsQueue","addManifestUpdate","updateManifestUpdateInfo","addManifestUpdateStreamInfo","addManifestUpdateRepresentationInfo","addPlayList","addDVBErrors","setup","MetricsModel","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport MetricsConstants from '../constants/MetricsConstants';\nimport MetricsList from '../vo/MetricsList';\nimport { HTTPRequest, HTTPRequestTrace } from '../vo/metrics/HTTPRequest';\nimport TrackSwitch from '../vo/metrics/RepresentationSwitch';\nimport BufferLevel from '../vo/metrics/BufferLevel';\nimport BufferState from '../vo/metrics/BufferState';\nimport DVRInfo from '../vo/metrics/DVRInfo';\nimport DroppedFrames from '../vo/metrics/DroppedFrames';\nimport { ManifestUpdate, ManifestUpdateStreamInfo, ManifestUpdateRepresentationInfo } from '../vo/metrics/ManifestUpdate';\nimport SchedulingInfo from '../vo/metrics/SchedulingInfo';\nimport EventBus from '../../core/EventBus';\nimport RequestsQueue from '../vo/metrics/RequestsQueue';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\n\nfunction MetricsModel(config) {\n\n    config = config || {};\n\n    const settings = config.settings;\n\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n\n    let instance,\n        streamMetrics;\n\n    function setup() {\n        streamMetrics = {};\n    }\n\n    function metricsChanged() {\n        eventBus.trigger(Events.METRICS_CHANGED);\n    }\n\n    function metricChanged(mediaType) {\n        eventBus.trigger(Events.METRIC_CHANGED, { mediaType: mediaType });\n        metricsChanged();\n    }\n\n    function metricUpdated(mediaType, metricType, vo) {\n        eventBus.trigger(Events.METRIC_UPDATED, { mediaType: mediaType, metric: metricType, value: vo });\n        metricChanged(mediaType);\n    }\n\n    function metricAdded(mediaType, metricType, vo) {\n        eventBus.trigger(Events.METRIC_ADDED, { mediaType: mediaType, metric: metricType, value: vo });\n        metricChanged(mediaType);\n    }\n\n    function clearCurrentMetricsForType(type) {\n        delete streamMetrics[type];\n        metricChanged(type);\n    }\n\n    function clearAllCurrentMetrics() {\n        streamMetrics = {};\n        metricsChanged();\n    }\n\n    function getMetricsFor(type, readOnly) {\n        let metrics = null;\n\n        if (!type) {\n            return metrics;\n        }\n\n        if (streamMetrics.hasOwnProperty(type)) {\n            metrics = streamMetrics[type];\n        } else if (!readOnly) {\n            metrics = new MetricsList();\n            streamMetrics[type] = metrics;\n        }\n\n        return metrics;\n    }\n\n    function pushMetrics(type, list, value) {\n        let metrics = getMetricsFor(type);\n        if (metrics !== null) {\n            metrics[list].push(value);\n            if ( metrics[list].length > settings.get().streaming.metricsMaxListDepth ) {\n                metrics[list].shift();\n            }\n        }\n    }\n\n    function appendHttpTrace(httpRequest, s, d, b) {\n        let vo = new HTTPRequestTrace();\n\n        vo.s = s;\n        vo.d = d;\n        vo.b = b;\n\n        httpRequest.trace.push(vo);\n\n        if (!httpRequest.interval) {\n            httpRequest.interval = 0;\n        }\n\n        httpRequest.interval += d;\n\n        return vo;\n    }\n\n    function addHttpRequest(mediaType, tcpid, type, url, quality, actualurl, serviceLocation, range, trequest, tresponse, tfinish, responsecode, mediaduration, responseHeaders, traces) {\n        let vo = new HTTPRequest();\n\n        // ISO 23009-1 D.4.3 NOTE 2:\n        // All entries for a given object will have the same URL and range\n        // and so can easily be correlated. If there were redirects or\n        // failures there will be one entry for each redirect/failure.\n        // The redirect-to URL or alternative url (where multiple have been\n        // provided in the MPD) will appear as the actualurl of the next\n        // entry with the same url value.\n        if (actualurl && (actualurl !== url)) {\n\n            // given the above, add an entry for the original request\n            addHttpRequest(\n                mediaType,\n                null,\n                type,\n                url,\n                quality,\n                null,\n                null,\n                range,\n                trequest,\n                null, // unknown\n                null, // unknown\n                null, // unknown, probably a 302\n                mediaduration,\n                null,\n                null\n            );\n\n            vo.actualurl = actualurl;\n        }\n\n        vo.tcpid = tcpid;\n        vo.type = type;\n        vo.url = url;\n        vo.range = range;\n        vo.trequest = trequest;\n        vo.tresponse = tresponse;\n        vo.responsecode = responsecode;\n\n        vo._tfinish = tfinish;\n        vo._stream = mediaType;\n        vo._mediaduration = mediaduration;\n        vo._quality = quality;\n        vo._responseHeaders = responseHeaders;\n        vo._serviceLocation = serviceLocation;\n\n        if (traces) {\n            traces.forEach(trace => {\n                appendHttpTrace(vo, trace.s, trace.d, trace.b);\n            });\n        } else {\n            // The interval and trace shall be absent for redirect and failure records.\n            delete vo.interval;\n            delete vo.trace;\n        }\n\n        pushAndNotify(mediaType, MetricsConstants.HTTP_REQUEST, vo);\n    }\n\n    function addRepresentationSwitch(mediaType, t, mt, to, lto) {\n        let vo = new TrackSwitch();\n\n        vo.t = t;\n        vo.mt = mt;\n        vo.to = to;\n\n        if (lto) {\n            vo.lto = lto;\n        } else {\n            delete vo.lto;\n        }\n\n        pushAndNotify(mediaType, MetricsConstants.TRACK_SWITCH, vo);\n    }\n\n    function pushAndNotify(mediaType, metricType, metricObject) {\n        pushMetrics(mediaType, metricType, metricObject);\n        metricAdded(mediaType, metricType, metricObject);\n    }\n\n    function addBufferLevel(mediaType, t, level) {\n        let vo = new BufferLevel();\n        vo.t = t;\n        vo.level = level;\n\n        pushAndNotify(mediaType, MetricsConstants.BUFFER_LEVEL, vo);\n    }\n\n    function addBufferState(mediaType, state, target) {\n        let vo = new BufferState();\n        vo.target = target;\n        vo.state = state;\n\n        pushAndNotify(mediaType, MetricsConstants.BUFFER_STATE, vo);\n    }\n\n    function addDVRInfo(mediaType, currentTime, mpd, range) {\n        let vo = new DVRInfo();\n        vo.time = currentTime ;\n        vo.range = range;\n        vo.manifestInfo = mpd;\n\n        pushAndNotify(mediaType, MetricsConstants.DVR_INFO, vo);\n    }\n\n    function addDroppedFrames(mediaType, quality) {\n        let vo = new DroppedFrames();\n        let list = getMetricsFor(mediaType).DroppedFrames;\n\n        if (!quality) {\n            return;\n        }\n\n        vo.time = quality.creationTime;\n        vo.droppedFrames = quality.droppedVideoFrames;\n\n        if (list.length > 0 && list[list.length - 1] == vo) {\n            return;\n        }\n\n        pushAndNotify(mediaType, MetricsConstants.DROPPED_FRAMES, vo);\n    }\n\n    function addSchedulingInfo(mediaType, t, type, startTime, availabilityStartTime, duration, quality, range, state) {\n        let vo = new SchedulingInfo();\n\n        vo.mediaType = mediaType;\n        vo.t = t;\n\n        vo.type = type;\n        vo.startTime = startTime;\n        vo.availabilityStartTime = availabilityStartTime;\n        vo.duration = duration;\n        vo.quality = quality;\n        vo.range = range;\n\n        vo.state = state;\n\n        pushAndNotify(mediaType, MetricsConstants.SCHEDULING_INFO, vo);\n    }\n\n    function addRequestsQueue(mediaType, loadingRequests, executedRequests) {\n        let vo = new RequestsQueue();\n\n        vo.loadingRequests = loadingRequests;\n        vo.executedRequests = executedRequests;\n\n        getMetricsFor(mediaType).RequestsQueue = vo;\n        metricAdded(mediaType, MetricsConstants.REQUESTS_QUEUE, vo);\n    }\n\n    function addManifestUpdate(mediaType, type, requestTime, fetchTime, availabilityStartTime, presentationStartTime, clientTimeOffset, currentTime, buffered, latency) {\n        let vo = new ManifestUpdate();\n\n        vo.mediaType = mediaType;\n        vo.type = type;\n        vo.requestTime = requestTime; // when this manifest update was requested\n        vo.fetchTime = fetchTime; // when this manifest update was received\n        vo.availabilityStartTime = availabilityStartTime;\n        vo.presentationStartTime = presentationStartTime; // the seek point (liveEdge for dynamic, Stream[0].startTime for static)\n        vo.clientTimeOffset = clientTimeOffset; // the calculated difference between the server and client wall clock time\n        vo.currentTime = currentTime; // actual element.currentTime\n        vo.buffered = buffered; // actual element.ranges\n        vo.latency = latency; // (static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - currentTime)\n\n        pushMetrics(Constants.STREAM, MetricsConstants.MANIFEST_UPDATE, vo);\n        metricAdded(mediaType, MetricsConstants.MANIFEST_UPDATE, vo);\n    }\n\n    function updateManifestUpdateInfo(manifestUpdate, updatedFields) {\n        if (manifestUpdate) {\n            for (let field in updatedFields) {\n                manifestUpdate[field] = updatedFields[field];\n            }\n\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE, manifestUpdate);\n        }\n    }\n\n    function addManifestUpdateStreamInfo(manifestUpdate, id, index, start, duration) {\n        if (manifestUpdate) {\n            let vo = new ManifestUpdateStreamInfo();\n\n            vo.id = id;\n            vo.index = index;\n            vo.start = start;\n            vo.duration = duration;\n\n            manifestUpdate.streamInfo.push(vo);\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE_STREAM_INFO, manifestUpdate);\n        }\n    }\n\n    function addManifestUpdateRepresentationInfo(manifestUpdate, id, index, streamIndex, mediaType, presentationTimeOffset, startNumber, fragmentInfoType) {\n        if (manifestUpdate && manifestUpdate.representationInfo) {\n\n            const vo = new ManifestUpdateRepresentationInfo();\n            vo.id = id;\n            vo.index = index;\n            vo.streamIndex = streamIndex;\n            vo.mediaType = mediaType;\n            vo.startNumber = startNumber;\n            vo.fragmentInfoType = fragmentInfoType;\n            vo.presentationTimeOffset = presentationTimeOffset;\n\n            manifestUpdate.representationInfo.push(vo);\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE_TRACK_INFO, manifestUpdate);\n        }\n    }\n\n    function addPlayList(vo) {\n        if (vo.trace && Array.isArray(vo.trace)) {\n            vo.trace.forEach(trace => {\n                if (trace.hasOwnProperty('subreplevel') && !trace.subreplevel) {\n                    delete trace.subreplevel;\n                }\n            });\n        } else {\n            delete vo.trace;\n        }\n\n        pushAndNotify(Constants.STREAM, MetricsConstants.PLAY_LIST, vo);\n    }\n\n    function addDVBErrors(vo) {\n        pushAndNotify(Constants.STREAM, MetricsConstants.DVB_ERRORS, vo);\n    }\n\n    instance = {\n        clearCurrentMetricsForType: clearCurrentMetricsForType,\n        clearAllCurrentMetrics: clearAllCurrentMetrics,\n        getMetricsFor: getMetricsFor,\n        addHttpRequest: addHttpRequest,\n        addRepresentationSwitch: addRepresentationSwitch,\n        addBufferLevel: addBufferLevel,\n        addBufferState: addBufferState,\n        addDVRInfo: addDVRInfo,\n        addDroppedFrames: addDroppedFrames,\n        addSchedulingInfo: addSchedulingInfo,\n        addRequestsQueue: addRequestsQueue,\n        addManifestUpdate: addManifestUpdate,\n        updateManifestUpdateInfo: updateManifestUpdateInfo,\n        addManifestUpdateStreamInfo: addManifestUpdateStreamInfo,\n        addManifestUpdateRepresentationInfo: addManifestUpdateRepresentationInfo,\n        addPlayList: addPlayList,\n        addDVBErrors: addDVBErrors\n    };\n\n    setup();\n    return instance;\n}\n\nMetricsModel.__dashjs_factory_name = 'MetricsModel';\nexport default FactoryMaker.getSingletonFactory(MetricsModel);\n"]},"metadata":{},"sourceType":"script"}