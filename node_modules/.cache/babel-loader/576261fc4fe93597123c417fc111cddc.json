{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _objectiron = require('./objectiron');\n\nvar _objectiron2 = _interopRequireDefault(_objectiron);\n\nvar _xml2json = require('../../../externals/xml2json');\n\nvar _xml2json2 = _interopRequireDefault(_xml2json);\n\nvar _StringMatcher = require('./matchers/StringMatcher');\n\nvar _StringMatcher2 = _interopRequireDefault(_StringMatcher);\n\nvar _DurationMatcher = require('./matchers/DurationMatcher');\n\nvar _DurationMatcher2 = _interopRequireDefault(_DurationMatcher);\n\nvar _DateTimeMatcher = require('./matchers/DateTimeMatcher');\n\nvar _DateTimeMatcher2 = _interopRequireDefault(_DateTimeMatcher);\n\nvar _NumericMatcher = require('./matchers/NumericMatcher');\n\nvar _NumericMatcher2 = _interopRequireDefault(_NumericMatcher);\n\nvar _RepresentationBaseValuesMap = require('./maps/RepresentationBaseValuesMap');\n\nvar _RepresentationBaseValuesMap2 = _interopRequireDefault(_RepresentationBaseValuesMap);\n\nvar _SegmentValuesMap = require('./maps/SegmentValuesMap');\n\nvar _SegmentValuesMap2 = _interopRequireDefault(_SegmentValuesMap);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction DashParser(config) {\n  config = config || {};\n  var context = this.context;\n  var debug = config.debug;\n  var instance = void 0,\n      logger = void 0,\n      matchers = void 0,\n      converter = void 0,\n      objectIron = void 0;\n\n  function setup() {\n    logger = debug.getLogger(instance);\n    matchers = [new _DurationMatcher2.default(), new _DateTimeMatcher2.default(), new _NumericMatcher2.default(), new _StringMatcher2.default() // last in list to take precedence over NumericMatcher\n    ];\n    converter = new _xml2json2.default({\n      escapeMode: false,\n      attributePrefix: '',\n      arrayAccessForm: 'property',\n      emptyNodeForm: 'object',\n      stripWhitespaces: false,\n      enableToStringFunc: true,\n      ignoreRoot: false,\n      matchers: matchers\n    });\n    objectIron = (0, _objectiron2.default)(context).create({\n      adaptationset: new _RepresentationBaseValuesMap2.default(),\n      period: new _SegmentValuesMap2.default()\n    });\n  }\n\n  function getMatchers() {\n    return matchers;\n  }\n\n  function getIron() {\n    return objectIron;\n  }\n\n  function parse(data) {\n    var manifest = void 0;\n    var startTime = window.performance.now();\n    manifest = converter.xml_str2json(data);\n\n    if (!manifest) {\n      throw new Error('parsing the manifest failed');\n    }\n\n    var jsonTime = window.performance.now(); // handle full MPD and Patch ironing separately\n\n    if (manifest.Patch) {\n      manifest = manifest.Patch; // drop root reference\n      // apply iron to patch operations individually\n\n      if (manifest.add_asArray) {\n        manifest.add_asArray.forEach(function (operand) {\n          return objectIron.run(operand);\n        });\n      }\n\n      if (manifest.replace_asArray) {\n        manifest.replace_asArray.forEach(function (operand) {\n          return objectIron.run(operand);\n        });\n      } // note that we don't need to iron remove as they contain no children\n\n    } else {\n      manifest = manifest.MPD; // drop root reference\n\n      objectIron.run(manifest);\n    }\n\n    var ironedTime = window.performance.now();\n    logger.info('Parsing complete: ( xml2json: ' + (jsonTime - startTime).toPrecision(3) + 'ms, objectiron: ' + (ironedTime - jsonTime).toPrecision(3) + 'ms, total: ' + ((ironedTime - startTime) / 1000).toPrecision(3) + 's)');\n    manifest.protocol = 'DASH';\n    return manifest;\n  }\n\n  instance = {\n    parse: parse,\n    getMatchers: getMatchers,\n    getIron: getIron\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nDashParser.__dashjs_factory_name = 'DashParser';\nexports.default = _FactoryMaker2.default.getClassFactory(DashParser);","map":{"version":3,"sources":["../../../../../src/dash/parser/DashParser.js"],"names":["config","context","debug","instance","logger","matchers","converter","objectIron","DurationMatcher","DateTimeMatcher","NumericMatcher","StringMatcher","X2JS","escapeMode","attributePrefix","arrayAccessForm","emptyNodeForm","stripWhitespaces","enableToStringFunc","ignoreRoot","adaptationset","RepresentationBaseValuesMap","period","SegmentValuesMap","manifest","startTime","window","jsonTime","ironedTime","parse","getMatchers","getIron","setup","DashParser","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\nimport ObjectIron from './objectiron';\nimport X2JS from '../../../externals/xml2json';\nimport StringMatcher from './matchers/StringMatcher';\nimport DurationMatcher from './matchers/DurationMatcher';\nimport DateTimeMatcher from './matchers/DateTimeMatcher';\nimport NumericMatcher from './matchers/NumericMatcher';\nimport RepresentationBaseValuesMap from './maps/RepresentationBaseValuesMap';\nimport SegmentValuesMap from './maps/SegmentValuesMap';\n\nfunction DashParser(config) {\n\n    config = config || {};\n    const context = this.context;\n    const debug = config.debug;\n\n    let instance,\n        logger,\n        matchers,\n        converter,\n        objectIron;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        matchers = [\n            new DurationMatcher(),\n            new DateTimeMatcher(),\n            new NumericMatcher(),\n            new StringMatcher()   // last in list to take precedence over NumericMatcher\n        ];\n\n        converter = new X2JS({\n            escapeMode:         false,\n            attributePrefix:    '',\n            arrayAccessForm:    'property',\n            emptyNodeForm:      'object',\n            stripWhitespaces:   false,\n            enableToStringFunc: true,\n            ignoreRoot:         false,\n            matchers:           matchers\n        });\n\n        objectIron = ObjectIron(context).create({\n            adaptationset: new RepresentationBaseValuesMap(),\n            period: new SegmentValuesMap()\n        });\n    }\n\n    function getMatchers() {\n        return matchers;\n    }\n\n    function getIron() {\n        return objectIron;\n    }\n\n    function parse(data) {\n        let manifest;\n        const startTime = window.performance.now();\n\n        manifest = converter.xml_str2json(data);\n\n        if (!manifest) {\n            throw new Error('parsing the manifest failed');\n        }\n\n        const jsonTime = window.performance.now();\n\n        // handle full MPD and Patch ironing separately\n        if (manifest.Patch) {\n            manifest = manifest.Patch; // drop root reference\n            // apply iron to patch operations individually\n            if (manifest.add_asArray) {\n                manifest.add_asArray.forEach((operand) => objectIron.run(operand));\n            }\n            if (manifest.replace_asArray) {\n                manifest.replace_asArray.forEach((operand) => objectIron.run(operand));\n            }\n            // note that we don't need to iron remove as they contain no children\n        } else {\n            manifest = manifest.MPD; // drop root reference\n            objectIron.run(manifest);\n        }\n\n        const ironedTime = window.performance.now();\n        logger.info('Parsing complete: ( xml2json: ' + (jsonTime - startTime).toPrecision(3) + 'ms, objectiron: ' + (ironedTime - jsonTime).toPrecision(3) + 'ms, total: ' + ((ironedTime - startTime) / 1000).toPrecision(3) + 's)');\n\n        manifest.protocol = 'DASH';\n\n        return manifest;\n    }\n\n    instance = {\n        parse: parse,\n        getMatchers: getMatchers,\n        getIron: getIron\n    };\n\n    setup();\n\n    return instance;\n}\n\nDashParser.__dashjs_factory_name = 'DashParser';\nexport default FactoryMaker.getClassFactory(DashParser);\n"]},"metadata":{},"sourceType":"script"}