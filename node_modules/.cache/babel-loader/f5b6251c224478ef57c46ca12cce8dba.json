{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Constants = require('../../streaming/constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nfunction SegmentBaseGetter(config) {\n  config = config || {};\n  var timelineConverter = config.timelineConverter;\n  var instance = void 0;\n\n  function checkConfig() {\n    if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\n      throw new Error(_Constants2.default.MISSING_CONFIG_ERROR);\n    }\n  }\n\n  function getSegmentByIndex(representation, index) {\n    checkConfig();\n\n    if (!representation) {\n      return null;\n    }\n\n    var len = representation.segments ? representation.segments.length : -1;\n    var seg = void 0;\n\n    if (index < len) {\n      seg = representation.segments[index];\n\n      if (seg && seg.availabilityIdx === index) {\n        return seg;\n      }\n    }\n\n    for (var i = 0; i < len; i++) {\n      seg = representation.segments[i];\n\n      if (seg && seg.availabilityIdx === index) {\n        return seg;\n      }\n    }\n\n    return null;\n  }\n\n  function getSegmentByTime(representation, requestedTime) {\n    checkConfig();\n    var index = getIndexByTime(representation, requestedTime);\n    return getSegmentByIndex(representation, index);\n  }\n\n  function getIndexByTime(representation, time) {\n    if (!representation) {\n      return -1;\n    }\n\n    var segments = representation.segments;\n    var ln = segments ? segments.length : null;\n    var idx = -1;\n    var epsilon = void 0,\n        frag = void 0,\n        ft = void 0,\n        fd = void 0,\n        i = void 0;\n\n    if (segments && ln > 0) {\n      for (i = 0; i < ln; i++) {\n        frag = segments[i];\n        ft = frag.presentationStartTime;\n        fd = frag.duration;\n        epsilon = fd / 2;\n\n        if (time + epsilon >= ft && time - epsilon < ft + fd) {\n          idx = frag.availabilityIdx;\n          break;\n        }\n      }\n    }\n\n    return idx;\n  }\n\n  instance = {\n    getSegmentByIndex: getSegmentByIndex,\n    getSegmentByTime: getSegmentByTime\n  };\n  return instance;\n}\n\nSegmentBaseGetter.__dashjs_factory_name = 'SegmentBaseGetter';\n\nvar factory = _FactoryMaker2.default.getClassFactory(SegmentBaseGetter);\n\nexports.default = factory;","map":{"version":3,"sources":["../../../../../src/dash/utils/SegmentBaseGetter.js"],"names":["config","timelineConverter","instance","Constants","checkConfig","len","representation","seg","index","i","getIndexByTime","getSegmentByIndex","segments","ln","idx","epsilon","frag","ft","fd","time","getSegmentByTime","SegmentBaseGetter","factory","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Constants from '../../streaming/constants/Constants';\n\n\nfunction SegmentBaseGetter(config) {\n\n    config = config || {};\n    const timelineConverter = config.timelineConverter;\n\n    let instance;\n\n    function checkConfig() {\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    function getSegmentByIndex(representation, index) {\n        checkConfig();\n\n        if (!representation) {\n            return null;\n        }\n\n        const len = representation.segments ? representation.segments.length : -1;\n        let seg;\n        if (index < len) {\n            seg = representation.segments[index];\n            if (seg && seg.availabilityIdx === index) {\n                return seg;\n            }\n        }\n\n        for (let i = 0; i < len; i++) {\n            seg = representation.segments[i];\n\n            if (seg && seg.availabilityIdx === index) {\n                return seg;\n            }\n        }\n\n        return null;\n    }\n\n    function getSegmentByTime(representation, requestedTime) {\n        checkConfig();\n\n        const index = getIndexByTime(representation, requestedTime);\n\n        return getSegmentByIndex(representation, index);\n    }\n\n    function getIndexByTime(representation, time) {\n        if (!representation) {\n            return -1;\n        }\n\n        const segments = representation.segments;\n        const ln = segments ? segments.length : null;\n\n        let idx = -1;\n        let epsilon,\n            frag,\n            ft,\n            fd,\n            i;\n\n        if (segments && ln > 0) {\n            for (i = 0; i < ln; i++) {\n                frag = segments[i];\n                ft = frag.presentationStartTime;\n                fd = frag.duration;\n\n                epsilon = fd / 2;\n                if ((time + epsilon) >= ft &&\n                    (time - epsilon) < (ft + fd)) {\n                    idx = frag.availabilityIdx;\n                    break;\n                }\n            }\n        }\n\n        return idx;\n    }\n\n    instance = {\n        getSegmentByIndex: getSegmentByIndex,\n        getSegmentByTime: getSegmentByTime\n    };\n\n    return instance;\n}\n\nSegmentBaseGetter.__dashjs_factory_name = 'SegmentBaseGetter';\nconst factory = FactoryMaker.getClassFactory(SegmentBaseGetter);\nexport default factory;\n"]},"metadata":{},"sourceType":"script"}