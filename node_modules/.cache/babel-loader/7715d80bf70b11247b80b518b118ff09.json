{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _DashConstants = require('../constants/DashConstants');\n\nvar _DashConstants2 = _interopRequireDefault(_DashConstants);\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Debug = require('../../core/Debug');\n\nvar _Debug2 = _interopRequireDefault(_Debug);\n\nvar _SimpleXPath = require('../vo/SimpleXPath');\n\nvar _SimpleXPath2 = _interopRequireDefault(_SimpleXPath);\n\nvar _PatchOperation = require('../vo/PatchOperation');\n\nvar _PatchOperation2 = _interopRequireDefault(_PatchOperation);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction PatchManifestModel() {\n  var instance = void 0,\n      logger = void 0;\n  var context = this.context;\n\n  function setup() {\n    logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);\n  }\n\n  function getIsPatch(patch) {\n    return patch && patch.hasOwnProperty(_DashConstants2.default.ORIGINAL_MPD_ID) || false;\n  }\n\n  function getPublishTime(patch) {\n    return patch && patch.hasOwnProperty(_DashConstants2.default.PUBLISH_TIME) ? new Date(patch[_DashConstants2.default.PUBLISH_TIME]) : null;\n  }\n\n  function getOriginalPublishTime(patch) {\n    return patch && patch.hasOwnProperty(_DashConstants2.default.ORIGINAL_PUBLISH_TIME) ? new Date(patch[_DashConstants2.default.ORIGINAL_PUBLISH_TIME]) : null;\n  }\n\n  function getMpdId(patch) {\n    return patch && patch[_DashConstants2.default.ORIGINAL_MPD_ID] || null;\n  }\n\n  function getPatchOperations(patch) {\n    if (!patch) {\n      return [];\n    } // Go through the patch operations in order and parse their actions out for usage\n\n\n    return (patch.__children || []).map(function (nodeContainer) {\n      var action = Object.keys(nodeContainer)[0]; // we only look add add/remove/replace actions\n\n      if (action !== 'add' && action !== 'remove' && action !== 'replace') {\n        logger.warn('Ignoring node of invalid action: ' + action);\n        return null;\n      }\n\n      var node = nodeContainer[action];\n      var selector = node.sel; // add action can have special targeting via the 'type' attribute\n\n      if (action === 'add' && node.type) {\n        if (!node.type.startsWith('@')) {\n          logger.warn('Ignoring add action for prefixed namespace declaration: ' + node.type + '=' + node.__text);\n          return null;\n        } // for our purposes adding/replacing attribute are equivalent and we can normalize\n        // our processing logic by appending the attribute to the selector path\n\n\n        selector = selector + '/' + node.type;\n      }\n\n      var xpath = new _SimpleXPath2.default(selector);\n\n      if (!xpath.isValid()) {\n        logger.warn('Ignoring action with invalid selector: ' + action + ' - ' + selector);\n        return null;\n      }\n\n      var value = null;\n\n      if (xpath.findsAttribute()) {\n        value = node.__text || '';\n      } else if (action !== 'remove') {\n        value = node.__children.reduce(function (groups, child) {\n          // note that this is informed by xml2js parse structure for the __children array\n          // which will be something like this for each child:\n          // {\n          //     \"<node-name>\": { <xml2js-node-object> }\n          // }\n          var key = Object.keys(child)[0]; // we also ignore\n\n          if (key !== '#text') {\n            groups[key] = groups[key] || [];\n            groups[key].push(child[key]);\n          }\n\n          return groups;\n        }, {});\n      }\n\n      var operation = new _PatchOperation2.default(action, xpath, value);\n\n      if (action === 'add') {\n        operation.position = node.pos;\n      }\n\n      return operation;\n    }).filter(function (operation) {\n      return !!operation;\n    });\n  }\n\n  instance = {\n    getIsPatch: getIsPatch,\n    getPublishTime: getPublishTime,\n    getOriginalPublishTime: getOriginalPublishTime,\n    getMpdId: getMpdId,\n    getPatchOperations: getPatchOperations\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nPatchManifestModel.__dashjs_factory_name = 'PatchManifestModel';\nexports.default = _FactoryMaker2.default.getSingletonFactory(PatchManifestModel);","map":{"version":3,"sources":["../../../../../src/dash/models/PatchManifestModel.js"],"names":["instance","logger","context","patch","DashConstants","action","Object","node","nodeContainer","selector","xpath","SimpleXPath","value","key","groups","child","operation","PatchOperation","getIsPatch","getPublishTime","getOriginalPublishTime","getMpdId","getPatchOperations","setup","PatchManifestModel","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport DashConstants from '../constants/DashConstants';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport SimpleXPath from '../vo/SimpleXPath';\nimport PatchOperation from '../vo/PatchOperation';\n\nfunction PatchManifestModel() {\n    let instance,\n        logger;\n\n    const context = this.context;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n    }\n\n    function getIsPatch(patch) {\n        return patch && patch.hasOwnProperty(DashConstants.ORIGINAL_MPD_ID) || false;\n    }\n\n    function getPublishTime(patch) {\n        return patch && patch.hasOwnProperty(DashConstants.PUBLISH_TIME) ? new Date(patch[DashConstants.PUBLISH_TIME]) : null;\n    }\n\n    function getOriginalPublishTime(patch) {\n        return patch && patch.hasOwnProperty(DashConstants.ORIGINAL_PUBLISH_TIME) ? new Date(patch[DashConstants.ORIGINAL_PUBLISH_TIME]) : null;\n    }\n\n    function getMpdId(patch) {\n        return (patch && patch[DashConstants.ORIGINAL_MPD_ID]) || null;\n    }\n\n    function getPatchOperations(patch) {\n        if (!patch) {\n            return [];\n        }\n\n        // Go through the patch operations in order and parse their actions out for usage\n        return (patch.__children || []).map((nodeContainer) => {\n            let action = Object.keys(nodeContainer)[0];\n\n            // we only look add add/remove/replace actions\n            if (action !== 'add' && action !== 'remove' && action !== 'replace') {\n                logger.warn(`Ignoring node of invalid action: ${action}`);\n                return null;\n            }\n\n            let node = nodeContainer[action];\n            let selector = node.sel;\n\n            // add action can have special targeting via the 'type' attribute\n            if (action === 'add' && node.type) {\n                if (!node.type.startsWith('@')) {\n                    logger.warn(`Ignoring add action for prefixed namespace declaration: ${node.type}=${node.__text}`);\n                    return null;\n                }\n\n                // for our purposes adding/replacing attribute are equivalent and we can normalize\n                // our processing logic by appending the attribute to the selector path\n                selector = `${selector}/${node.type}`;\n            }\n\n            let xpath = new SimpleXPath(selector);\n            if (!xpath.isValid()) {\n                logger.warn(`Ignoring action with invalid selector: ${action} - ${selector}`);\n                return null;\n            }\n\n            let value = null;\n            if (xpath.findsAttribute()) {\n                value = node.__text || '';\n            } else if (action !== 'remove') {\n                value = node.__children.reduce((groups, child) => {\n                    // note that this is informed by xml2js parse structure for the __children array\n                    // which will be something like this for each child:\n                    // {\n                    //     \"<node-name>\": { <xml2js-node-object> }\n                    // }\n                    let key = Object.keys(child)[0];\n                    // we also ignore\n                    if (key !== '#text') {\n                        groups[key] = groups[key] || [];\n                        groups[key].push(child[key]);\n                    }\n                    return groups;\n                }, {});\n            }\n\n            let operation = new PatchOperation(action, xpath, value);\n\n            if (action === 'add') {\n                operation.position = node.pos;\n            }\n\n            return operation;\n        }).filter((operation) => !!operation);\n    }\n\n    instance = {\n        getIsPatch: getIsPatch,\n        getPublishTime: getPublishTime,\n        getOriginalPublishTime: getOriginalPublishTime,\n        getMpdId: getMpdId,\n        getPatchOperations: getPatchOperations\n    };\n\n    setup();\n\n    return instance;\n}\n\nPatchManifestModel.__dashjs_factory_name = 'PatchManifestModel';\nexport default FactoryMaker.getSingletonFactory(PatchManifestModel);\n"]},"metadata":{},"sourceType":"script"}