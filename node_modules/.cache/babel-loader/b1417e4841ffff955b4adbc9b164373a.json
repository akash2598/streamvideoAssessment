{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* @module XHRLoader\n* @ignore\n* @description Manages download of resources via HTTP.\n* @param {Object} cfg - dependencies from parent\n*/\n\n\nfunction XHRLoader(cfg) {\n  cfg = cfg || {};\n  var requestModifier = cfg.requestModifier;\n  var instance = void 0;\n\n  function load(httpRequest) {\n    // Variables will be used in the callback functions\n    var requestStartTime = new Date();\n    var request = httpRequest.request;\n    var xhr = new XMLHttpRequest();\n    xhr.open(httpRequest.method, httpRequest.url, true);\n\n    if (request.responseType) {\n      xhr.responseType = request.responseType;\n    }\n\n    if (request.range) {\n      xhr.setRequestHeader('Range', 'bytes=' + request.range);\n    }\n\n    if (!request.requestStartDate) {\n      request.requestStartDate = requestStartTime;\n    }\n\n    if (requestModifier) {\n      xhr = requestModifier.modifyRequestHeader(xhr);\n    }\n\n    if (httpRequest.headers) {\n      for (var header in httpRequest.headers) {\n        var value = httpRequest.headers[header];\n\n        if (value) {\n          xhr.setRequestHeader(header, value);\n        }\n      }\n    }\n\n    xhr.withCredentials = httpRequest.withCredentials;\n    xhr.onload = httpRequest.onload;\n    xhr.onloadend = httpRequest.onend;\n    xhr.onerror = httpRequest.onerror;\n    xhr.onprogress = httpRequest.progress;\n    xhr.onabort = httpRequest.onabort;\n    xhr.ontimeout = httpRequest.ontimeout;\n    xhr.timeout = httpRequest.timeout;\n    xhr.send();\n    httpRequest.response = xhr;\n  }\n\n  function abort(request) {\n    var x = request.response;\n    x.onloadend = x.onerror = x.onprogress = undefined; //Ignore events from aborted requests.\n\n    x.abort();\n  }\n\n  instance = {\n    load: load,\n    abort: abort\n  };\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nXHRLoader.__dashjs_factory_name = 'XHRLoader';\n\nvar factory = _FactoryMaker2.default.getClassFactory(XHRLoader);\n\nexports.default = factory;","map":{"version":3,"sources":["../../../../../src/streaming/net/XHRLoader.js"],"names":["cfg","requestModifier","instance","requestStartTime","request","httpRequest","xhr","value","x","load","abort","XHRLoader","factory","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\n\n/**\n * @module XHRLoader\n * @ignore\n * @description Manages download of resources via HTTP.\n * @param {Object} cfg - dependencies from parent\n */\nfunction XHRLoader(cfg) {\n\n    cfg = cfg || {};\n    const requestModifier = cfg.requestModifier;\n\n    let instance;\n\n    function load(httpRequest) {\n\n        // Variables will be used in the callback functions\n        const requestStartTime = new Date();\n        const request = httpRequest.request;\n\n        let xhr = new XMLHttpRequest();\n        xhr.open(httpRequest.method, httpRequest.url, true);\n\n        if (request.responseType) {\n            xhr.responseType = request.responseType;\n        }\n\n        if (request.range) {\n            xhr.setRequestHeader('Range', 'bytes=' + request.range);\n        }\n\n        if (!request.requestStartDate) {\n            request.requestStartDate = requestStartTime;\n        }\n\n        if (requestModifier) {\n            xhr = requestModifier.modifyRequestHeader(xhr);\n        }\n\n        if (httpRequest.headers) {\n            for (let header in httpRequest.headers) {\n                let value = httpRequest.headers[header];\n                if (value) {\n                    xhr.setRequestHeader(header, value);\n                }\n            }\n        }\n\n        xhr.withCredentials = httpRequest.withCredentials;\n\n        xhr.onload = httpRequest.onload;\n        xhr.onloadend = httpRequest.onend;\n        xhr.onerror = httpRequest.onerror;\n        xhr.onprogress = httpRequest.progress;\n        xhr.onabort = httpRequest.onabort;\n        xhr.ontimeout = httpRequest.ontimeout;\n        xhr.timeout = httpRequest.timeout;\n\n        xhr.send();\n\n        httpRequest.response = xhr;\n    }\n\n    function abort(request) {\n        const x = request.response;\n        x.onloadend = x.onerror = x.onprogress = undefined; //Ignore events from aborted requests.\n        x.abort();\n    }\n\n    instance = {\n        load: load,\n        abort: abort\n    };\n\n    return instance;\n}\n\nXHRLoader.__dashjs_factory_name = 'XHRLoader';\n\nconst factory = FactoryMaker.getClassFactory(XHRLoader);\nexport default factory;\n"]},"metadata":{},"sourceType":"script"}