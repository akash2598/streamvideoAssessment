{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _MetricsHandlerFactory = require('../metrics/MetricsHandlerFactory');\n\nvar _MetricsHandlerFactory2 = _interopRequireDefault(_MetricsHandlerFactory);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction MetricsHandlersController(config) {\n  config = config || {};\n  var handlers = [];\n  var instance = void 0;\n  var context = this.context;\n  var eventBus = config.eventBus;\n  var Events = config.events;\n  var metricsHandlerFactory = (0, _MetricsHandlerFactory2.default)(context).getInstance({\n    debug: config.debug,\n    eventBus: config.eventBus,\n    metricsConstants: config.metricsConstants\n  });\n\n  function handle(e) {\n    handlers.forEach(function (handler) {\n      handler.handleNewMetric(e.metric, e.value, e.mediaType);\n    });\n  }\n\n  function initialize(metrics, reportingController) {\n    metrics.split(',').forEach(function (m, midx, ms) {\n      var handler = void 0; // there is a bug in ISO23009-1 where the metrics attribute\n      // is a comma-separated list but HttpList key can contain a\n      // comma enclosed by ().\n\n      if (m.indexOf('(') !== -1 && m.indexOf(')') === -1) {\n        var nextm = ms[midx + 1];\n\n        if (nextm && nextm.indexOf('(') === -1 && nextm.indexOf(')') !== -1) {\n          m += ',' + nextm; // delete the next metric so forEach does not visit.\n\n          delete ms[midx + 1];\n        }\n      }\n\n      handler = metricsHandlerFactory.create(m, reportingController);\n\n      if (handler) {\n        handlers.push(handler);\n      }\n    });\n    eventBus.on(Events.METRIC_ADDED, handle, instance);\n    eventBus.on(Events.METRIC_UPDATED, handle, instance);\n  }\n\n  function reset() {\n    eventBus.off(Events.METRIC_ADDED, handle, instance);\n    eventBus.off(Events.METRIC_UPDATED, handle, instance);\n    handlers.forEach(function (handler) {\n      return handler.reset();\n    });\n    handlers = [];\n  }\n\n  instance = {\n    initialize: initialize,\n    reset: reset\n  };\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nMetricsHandlersController.__dashjs_factory_name = 'MetricsHandlersController';\nexports.default = dashjs.FactoryMaker.getClassFactory(MetricsHandlersController);\n/* jshint ignore:line */","map":{"version":3,"sources":["../../../../../../src/streaming/metrics/controllers/MetricsHandlersController.js"],"names":["config","handlers","instance","context","eventBus","Events","metricsHandlerFactory","debug","metricsConstants","handler","e","m","nextm","ms","midx","initialize","reset","MetricsHandlersController","dashjs"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsHandlerFactory from '../metrics/MetricsHandlerFactory';\n\nfunction MetricsHandlersController(config) {\n\n    config = config || {};\n    let handlers = [];\n\n    let instance;\n    const context = this.context;\n    const eventBus = config.eventBus;\n    const Events = config.events;\n\n    let metricsHandlerFactory = MetricsHandlerFactory(context).getInstance({\n        debug: config.debug,\n        eventBus: config.eventBus,\n        metricsConstants: config.metricsConstants\n    });\n\n    function handle(e) {\n        handlers.forEach(handler => {\n            handler.handleNewMetric(e.metric, e.value, e.mediaType);\n        });\n    }\n\n    function initialize(metrics, reportingController) {\n        metrics.split(',').forEach(\n            (m, midx, ms) => {\n                let handler;\n\n                // there is a bug in ISO23009-1 where the metrics attribute\n                // is a comma-separated list but HttpList key can contain a\n                // comma enclosed by ().\n                if ((m.indexOf('(') !== -1) && m.indexOf(')') === -1) {\n                    let nextm = ms[midx + 1];\n\n                    if (nextm &&\n                            (nextm.indexOf('(') === -1) &&\n                            (nextm.indexOf(')') !== -1)) {\n                        m += ',' + nextm;\n\n                        // delete the next metric so forEach does not visit.\n                        delete ms[midx + 1];\n                    }\n                }\n\n                handler = metricsHandlerFactory.create(\n                    m,\n                    reportingController\n                );\n\n                if (handler) {\n                    handlers.push(handler);\n                }\n            }\n        );\n\n        eventBus.on(\n            Events.METRIC_ADDED,\n            handle,\n            instance\n        );\n\n        eventBus.on(\n            Events.METRIC_UPDATED,\n            handle,\n            instance\n        );\n    }\n\n    function reset() {\n        eventBus.off(\n            Events.METRIC_ADDED,\n            handle,\n            instance\n        );\n\n        eventBus.off(\n            Events.METRIC_UPDATED,\n            handle,\n            instance\n        );\n\n        handlers.forEach(handler => handler.reset());\n\n        handlers = [];\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset\n    };\n\n    return instance;\n}\n\nMetricsHandlersController.__dashjs_factory_name = 'MetricsHandlersController';\nexport default dashjs.FactoryMaker.getClassFactory(MetricsHandlersController); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}