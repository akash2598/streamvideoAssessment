{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Constants = require('../streaming/constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _HTTPRequest = require('../streaming/vo/metrics/HTTPRequest');\n\nvar _FactoryMaker = require('../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _MetricsConstants = require('../streaming/constants/MetricsConstants');\n\nvar _MetricsConstants2 = _interopRequireDefault(_MetricsConstants);\n\nvar _Round = require('./utils/Round10');\n\nvar _Round2 = _interopRequireDefault(_Round);\n\nvar _MetricsModel = require('../streaming/models/MetricsModel');\n\nvar _MetricsModel2 = _interopRequireDefault(_MetricsModel);\n\nvar _Utils = require('../core/Utils');\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nvar _PlayList = require('../streaming/vo/metrics/PlayList');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* @module DashMetrics\n* @param {object} config\n*/\n\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nfunction DashMetrics(config) {\n  config = config || {};\n  var context = this.context;\n  var instance = void 0,\n      playListTraceMetricsClosed = void 0,\n      playListTraceMetrics = void 0,\n      playListMetrics = void 0;\n  var metricsModel = config.metricsModel;\n\n  function setup() {\n    metricsModel = metricsModel || (0, _MetricsModel2.default)(context).getInstance({\n      settings: config.settings\n    });\n    resetInitialSettings();\n  }\n\n  function resetInitialSettings() {\n    playListTraceMetricsClosed = true;\n    playListTraceMetrics = null;\n    playListMetrics = null;\n  }\n  /**\n  * @param {MediaType} mediaType\n  * @returns {*}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getCurrentRepresentationSwitch(mediaType) {\n    var metrics = metricsModel.getMetricsFor(mediaType, true);\n    return getCurrent(metrics, _MetricsConstants2.default.TRACK_SWITCH);\n  }\n  /**\n  * @param {MediaType} mediaType\n  * @param {Date} t time of the switch event\n  * @param {Date} mt media presentation time\n  * @param {string} to id of representation\n  * @param {string} lto if present, subrepresentation reference\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addRepresentationSwitch(mediaType, t, mt, to, lto) {\n    metricsModel.addRepresentationSwitch(mediaType, t, mt, to, lto);\n  }\n  /**\n  * @param {MediaType} type\n  * @returns {number}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getCurrentBufferState(type) {\n    var metrics = metricsModel.getMetricsFor(type, true);\n    return getCurrent(metrics, _MetricsConstants2.default.BUFFER_STATE);\n  }\n  /**\n  * @param {MediaType} type\n  * @returns {number}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getCurrentBufferLevel(type) {\n    var metrics = metricsModel.getMetricsFor(type, true);\n    var metric = getCurrent(metrics, _MetricsConstants2.default.BUFFER_LEVEL);\n\n    if (metric) {\n      return _Round2.default.round10(metric.level / 1000, -3);\n    }\n\n    return 0;\n  }\n  /**\n  * @param {MediaType} mediaType\n  * @param {number} t\n  * @param {number} level\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addBufferLevel(mediaType, t, level) {\n    metricsModel.addBufferLevel(mediaType, t, level);\n  }\n  /**\n  * @param {MediaType} mediaType\n  * @param {string} state\n  * @param {number} target\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addBufferState(mediaType, state, target) {\n    metricsModel.addBufferState(mediaType, state, target);\n  }\n  /**\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function clearAllCurrentMetrics() {\n    metricsModel.clearAllCurrentMetrics();\n  }\n  /**\n  * @param {MediaType} mediaType\n  * @returns {*}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getCurrentHttpRequest(mediaType) {\n    var metrics = metricsModel.getMetricsFor(mediaType, true);\n\n    if (!metrics) {\n      return null;\n    }\n\n    var httpList = metrics.HttpList;\n    var currentHttpList = null;\n    var httpListLastIndex = void 0;\n\n    if (!httpList || httpList.length <= 0) {\n      return null;\n    }\n\n    httpListLastIndex = httpList.length - 1;\n\n    while (httpListLastIndex >= 0) {\n      if (httpList[httpListLastIndex].responsecode) {\n        currentHttpList = httpList[httpListLastIndex];\n        break;\n      }\n\n      httpListLastIndex--;\n    }\n\n    return currentHttpList;\n  }\n  /**\n  * @param {MediaType} mediaType\n  * @returns {*}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getHttpRequests(mediaType) {\n    var metrics = metricsModel.getMetricsFor(mediaType, true);\n\n    if (!metrics) {\n      return [];\n    }\n\n    return !!metrics.HttpList ? metrics.HttpList : [];\n  }\n  /**\n  * @param {MediaType} mediaType\n  * @param {Array} loadingRequests\n  * @param {Array} executedRequests\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addRequestsQueue(mediaType, loadingRequests, executedRequests) {\n    metricsModel.addRequestsQueue(mediaType, loadingRequests, executedRequests);\n  }\n  /**\n  * @param {MetricsList} metrics\n  * @param {string} metricName\n  * @returns {*}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getCurrent(metrics, metricName) {\n    if (!metrics) {\n      return null;\n    }\n\n    var list = metrics[metricName];\n    return !list || list.length === 0 ? null : list[list.length - 1];\n  }\n  /**\n  * @returns {*}\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function getCurrentDroppedFrames() {\n    var metrics = metricsModel.getMetricsFor(_Constants2.default.VIDEO, true);\n    return getCurrent(metrics, _MetricsConstants2.default.DROPPED_FRAMES);\n  }\n  /**\n  * @param {number} quality\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addDroppedFrames(quality) {\n    metricsModel.addDroppedFrames(_Constants2.default.VIDEO, quality);\n  }\n  /**\n  * @param {MediaType} mediaType\n  * @returns {*}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getCurrentSchedulingInfo(mediaType) {\n    var metrics = metricsModel.getMetricsFor(mediaType, true);\n    return getCurrent(metrics, _MetricsConstants2.default.SCHEDULING_INFO);\n  }\n  /**\n  * @param {object} request\n  * @param {string} state\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addSchedulingInfo(request, state) {\n    metricsModel.addSchedulingInfo(request.mediaType, new Date(), request.type, request.startTime, request.availabilityStartTime, request.duration, request.quality, request.range, state);\n  }\n  /**\n  * @returns {*}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getCurrentManifestUpdate() {\n    var streamMetrics = metricsModel.getMetricsFor(_Constants2.default.STREAM);\n    return getCurrent(streamMetrics, _MetricsConstants2.default.MANIFEST_UPDATE);\n  }\n  /**\n  * @param {object} updatedFields fields to be updated\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function updateManifestUpdateInfo(updatedFields) {\n    var manifestUpdate = this.getCurrentManifestUpdate();\n    metricsModel.updateManifestUpdateInfo(manifestUpdate, updatedFields);\n  }\n  /**\n  * @param {object} streamInfo\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addManifestUpdateStreamInfo(streamInfo) {\n    if (streamInfo) {\n      var manifestUpdate = this.getCurrentManifestUpdate();\n      metricsModel.addManifestUpdateStreamInfo(manifestUpdate, streamInfo.id, streamInfo.index, streamInfo.start, streamInfo.duration);\n    }\n  }\n  /**\n  * @param {object} request\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addManifestUpdate(request) {\n    metricsModel.addManifestUpdate(_Constants2.default.STREAM, request.type, request.requestStartDate, request.requestEndDate);\n  }\n  /**\n  * @param {object} request\n  * @param {string} responseURL\n  * @param {number} responseStatus\n  * @param {object} responseHeaders\n  * @param {object} traces\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addHttpRequest(request, responseURL, responseStatus, responseHeaders, traces) {\n    metricsModel.addHttpRequest(request.mediaType, null, request.type, request.url, request.quality, responseURL, request.serviceLocation || null, request.range || null, request.requestStartDate, request.firstByteDate, request.requestEndDate, responseStatus, request.duration, responseHeaders, traces);\n  }\n  /**\n  * @param {object} representation\n  * @param {MediaType} mediaType\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addManifestUpdateRepresentationInfo(representation, mediaType) {\n    if (representation) {\n      var manifestUpdateInfo = this.getCurrentManifestUpdate();\n      metricsModel.addManifestUpdateRepresentationInfo(manifestUpdateInfo, representation.id, representation.index, representation.streamIndex, mediaType, representation.presentationTimeOffset, representation.startNumber, representation.fragmentInfoType);\n    }\n  }\n  /**\n  * @param {MediaType} mediaType\n  * @returns {*}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getCurrentDVRInfo(mediaType) {\n    var metrics = mediaType ? metricsModel.getMetricsFor(mediaType, true) : metricsModel.getMetricsFor(_Constants2.default.VIDEO, true) || metricsModel.getMetricsFor(_Constants2.default.AUDIO, true);\n    return getCurrent(metrics, _MetricsConstants2.default.DVR_INFO);\n  }\n  /**\n  * @param {MediaType} mediaType\n  * @param {Date} currentTime time of the switch event\n  * @param {object} mpd mpd reference\n  * @param {object} range range of the dvr info\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addDVRInfo(mediaType, currentTime, mpd, range) {\n    metricsModel.addDVRInfo(mediaType, currentTime, mpd, range);\n  }\n  /**\n  * @param {string} id\n  * @returns {*}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getLatestMPDRequestHeaderValueByID(id) {\n    var headers = {};\n    var httpRequestList = void 0,\n        httpRequest = void 0,\n        i = void 0;\n    httpRequestList = getHttpRequests(_Constants2.default.STREAM);\n\n    for (i = httpRequestList.length - 1; i >= 0; i--) {\n      httpRequest = httpRequestList[i];\n\n      if (httpRequest.type === _HTTPRequest.HTTPRequest.MPD_TYPE) {\n        headers = _Utils2.default.parseHttpHeaders(httpRequest._responseHeaders);\n        break;\n      }\n    }\n\n    return headers[id] === undefined ? null : headers[id];\n  }\n  /**\n  * @param {string} type\n  * @param {string} id\n  * @returns {*}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getLatestFragmentRequestHeaderValueByID(type, id) {\n    var headers = {};\n    var httpRequest = getCurrentHttpRequest(type, true);\n\n    if (httpRequest) {\n      headers = _Utils2.default.parseHttpHeaders(httpRequest._responseHeaders);\n    }\n\n    return headers[id] === undefined ? null : headers[id];\n  }\n  /**\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addPlayList() {\n    if (playListMetrics) {\n      metricsModel.addPlayList(playListMetrics);\n      playListMetrics = null;\n    }\n  }\n\n  function createPlaylistMetrics(mediaStartTime, startReason) {\n    playListMetrics = new _PlayList.PlayList();\n    playListMetrics.start = new Date();\n    playListMetrics.mstart = mediaStartTime;\n    playListMetrics.starttype = startReason;\n  }\n\n  function createPlaylistTraceMetrics(representationId, mediaStartTime, speed) {\n    if (playListTraceMetricsClosed === true) {\n      playListTraceMetricsClosed = false;\n      playListTraceMetrics = new _PlayList.PlayListTrace();\n      playListTraceMetrics.representationid = representationId;\n      playListTraceMetrics.start = new Date();\n      playListTraceMetrics.mstart = mediaStartTime;\n      playListTraceMetrics.playbackspeed = speed !== null ? speed.toString() : null;\n    }\n  }\n\n  function updatePlayListTraceMetrics(traceToUpdate) {\n    if (playListTraceMetrics) {\n      for (var field in playListTraceMetrics) {\n        playListTraceMetrics[field] = traceToUpdate[field];\n      }\n    }\n  }\n\n  function pushPlayListTraceMetrics(endTime, reason) {\n    if (playListTraceMetricsClosed === false && playListMetrics && playListTraceMetrics && playListTraceMetrics.start) {\n      var startTime = playListTraceMetrics.start;\n      var duration = endTime.getTime() - startTime.getTime();\n      playListTraceMetrics.duration = duration;\n      playListTraceMetrics.stopreason = reason;\n      playListMetrics.trace.push(playListTraceMetrics);\n      playListTraceMetricsClosed = true;\n    }\n  }\n  /**\n  * @param {object} errors\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addDVBErrors(errors) {\n    metricsModel.addDVBErrors(errors);\n  }\n\n  instance = {\n    getCurrentRepresentationSwitch: getCurrentRepresentationSwitch,\n    getCurrentBufferState: getCurrentBufferState,\n    getCurrentBufferLevel: getCurrentBufferLevel,\n    getCurrentHttpRequest: getCurrentHttpRequest,\n    getHttpRequests: getHttpRequests,\n    getCurrentDroppedFrames: getCurrentDroppedFrames,\n    getCurrentSchedulingInfo: getCurrentSchedulingInfo,\n    getCurrentDVRInfo: getCurrentDVRInfo,\n    getCurrentManifestUpdate: getCurrentManifestUpdate,\n    getLatestFragmentRequestHeaderValueByID: getLatestFragmentRequestHeaderValueByID,\n    getLatestMPDRequestHeaderValueByID: getLatestMPDRequestHeaderValueByID,\n    addRepresentationSwitch: addRepresentationSwitch,\n    addDVRInfo: addDVRInfo,\n    updateManifestUpdateInfo: updateManifestUpdateInfo,\n    addManifestUpdateStreamInfo: addManifestUpdateStreamInfo,\n    addManifestUpdateRepresentationInfo: addManifestUpdateRepresentationInfo,\n    addManifestUpdate: addManifestUpdate,\n    addHttpRequest: addHttpRequest,\n    addSchedulingInfo: addSchedulingInfo,\n    addRequestsQueue: addRequestsQueue,\n    addBufferLevel: addBufferLevel,\n    addBufferState: addBufferState,\n    addDroppedFrames: addDroppedFrames,\n    addPlayList: addPlayList,\n    addDVBErrors: addDVBErrors,\n    createPlaylistMetrics: createPlaylistMetrics,\n    createPlaylistTraceMetrics: createPlaylistTraceMetrics,\n    updatePlayListTraceMetrics: updatePlayListTraceMetrics,\n    pushPlayListTraceMetrics: pushPlayListTraceMetrics,\n    clearAllCurrentMetrics: clearAllCurrentMetrics\n  };\n  setup();\n  return instance;\n}\n\nDashMetrics.__dashjs_factory_name = 'DashMetrics';\nexports.default = _FactoryMaker2.default.getSingletonFactory(DashMetrics);","map":{"version":3,"sources":["../../../../src/dash/DashMetrics.js"],"names":["config","context","instance","playListTraceMetricsClosed","playListTraceMetrics","playListMetrics","metricsModel","settings","resetInitialSettings","metrics","getCurrent","MetricsConstants","metric","Round10","httpList","currentHttpList","httpListLastIndex","list","Constants","request","streamMetrics","manifestUpdate","streamInfo","manifestUpdateInfo","representation","mediaType","headers","httpRequestList","httpRequest","i","getHttpRequests","HTTPRequest","Utils","getCurrentHttpRequest","PlayList","PlayListTrace","speed","traceToUpdate","startTime","duration","endTime","getCurrentRepresentationSwitch","getCurrentBufferState","getCurrentBufferLevel","getCurrentDroppedFrames","getCurrentSchedulingInfo","getCurrentDVRInfo","getCurrentManifestUpdate","getLatestFragmentRequestHeaderValueByID","getLatestMPDRequestHeaderValueByID","addRepresentationSwitch","addDVRInfo","updateManifestUpdateInfo","addManifestUpdateStreamInfo","addManifestUpdateRepresentationInfo","addManifestUpdate","addHttpRequest","addSchedulingInfo","addRequestsQueue","addBufferLevel","addBufferState","addDroppedFrames","addPlayList","addDVBErrors","createPlaylistMetrics","createPlaylistTraceMetrics","updatePlayListTraceMetrics","pushPlayListTraceMetrics","clearAllCurrentMetrics","setup","DashMetrics","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../streaming/constants/Constants';\nimport { HTTPRequest } from '../streaming/vo/metrics/HTTPRequest';\nimport FactoryMaker from '../core/FactoryMaker';\nimport MetricsConstants from '../streaming/constants/MetricsConstants';\nimport Round10 from './utils/Round10';\nimport MetricsModel from '../streaming/models/MetricsModel';\nimport Utils from '../core/Utils';\nimport {\n    PlayList,\n    PlayListTrace\n} from '../streaming/vo/metrics/PlayList';\n\n/**\n * @module DashMetrics\n * @param {object} config\n */\n\nfunction DashMetrics(config) {\n\n    config = config || {};\n\n    const context = this.context;\n    let instance,\n        playListTraceMetricsClosed,\n        playListTraceMetrics,\n        playListMetrics;\n\n    let metricsModel = config.metricsModel;\n\n    function setup() {\n        metricsModel = metricsModel || MetricsModel(context).getInstance({settings: config.settings});\n        resetInitialSettings();\n    }\n\n    function resetInitialSettings() {\n        playListTraceMetricsClosed = true;\n        playListTraceMetrics = null;\n        playListMetrics = null;\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentRepresentationSwitch(mediaType) {\n        const metrics = metricsModel.getMetricsFor(mediaType, true);\n        return getCurrent(metrics, MetricsConstants.TRACK_SWITCH);\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @param {Date} t time of the switch event\n     * @param {Date} mt media presentation time\n     * @param {string} to id of representation\n     * @param {string} lto if present, subrepresentation reference\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addRepresentationSwitch(mediaType, t, mt, to, lto) {\n        metricsModel.addRepresentationSwitch(mediaType, t, mt, to, lto);\n    }\n\n    /**\n     * @param {MediaType} type\n     * @returns {number}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentBufferState(type) {\n        const metrics = metricsModel.getMetricsFor(type, true);\n        return getCurrent(metrics, MetricsConstants.BUFFER_STATE);\n    }\n\n    /**\n     * @param {MediaType} type\n     * @returns {number}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentBufferLevel(type) {\n        const metrics = metricsModel.getMetricsFor(type, true);\n        const metric = getCurrent(metrics, MetricsConstants.BUFFER_LEVEL);\n\n        if (metric) {\n            return Round10.round10(metric.level / 1000, -3);\n        }\n\n        return 0;\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @param {number} t\n     * @param {number} level\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addBufferLevel(mediaType, t, level) {\n        metricsModel.addBufferLevel(mediaType, t, level);\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @param {string} state\n     * @param {number} target\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addBufferState(mediaType, state, target) {\n        metricsModel.addBufferState(mediaType, state, target);\n    }\n\n    /**\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function clearAllCurrentMetrics () {\n        metricsModel.clearAllCurrentMetrics();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentHttpRequest(mediaType) {\n        const metrics = metricsModel.getMetricsFor(mediaType, true);\n\n        if (!metrics) {\n            return null;\n        }\n\n        const httpList = metrics.HttpList;\n        let currentHttpList = null;\n\n        let httpListLastIndex;\n\n        if (!httpList || httpList.length <= 0) {\n            return null;\n        }\n\n        httpListLastIndex = httpList.length - 1;\n\n        while (httpListLastIndex >= 0) {\n            if (httpList[httpListLastIndex].responsecode) {\n                currentHttpList = httpList[httpListLastIndex];\n                break;\n            }\n            httpListLastIndex--;\n        }\n        return currentHttpList;\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getHttpRequests(mediaType) {\n        const metrics = metricsModel.getMetricsFor(mediaType, true);\n        if (!metrics) {\n            return [];\n        }\n\n        return !!metrics.HttpList ? metrics.HttpList : [];\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @param {Array} loadingRequests\n     * @param {Array} executedRequests\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addRequestsQueue(mediaType, loadingRequests, executedRequests) {\n        metricsModel.addRequestsQueue(mediaType, loadingRequests, executedRequests);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @param {string} metricName\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrent(metrics, metricName) {\n        if (!metrics) {\n            return null;\n        }\n        const list = metrics[metricName];\n        return (!list || list.length === 0) ? null : list[list.length - 1];\n    }\n\n    /**\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function getCurrentDroppedFrames() {\n        const metrics = metricsModel.getMetricsFor(Constants.VIDEO, true);\n        return getCurrent(metrics, MetricsConstants.DROPPED_FRAMES);\n    }\n\n    /**\n     * @param {number} quality\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addDroppedFrames(quality) {\n        metricsModel.addDroppedFrames(Constants.VIDEO, quality);\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentSchedulingInfo(mediaType) {\n        const metrics = metricsModel.getMetricsFor(mediaType, true);\n        return getCurrent(metrics, MetricsConstants.SCHEDULING_INFO);\n    }\n\n    /**\n     * @param {object} request\n     * @param {string} state\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addSchedulingInfo(request, state) {\n        metricsModel.addSchedulingInfo(\n            request.mediaType,\n            new Date(),\n            request.type,\n            request.startTime,\n            request.availabilityStartTime,\n            request.duration,\n            request.quality,\n            request.range,\n            state);\n    }\n\n    /**\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentManifestUpdate() {\n        const streamMetrics = metricsModel.getMetricsFor(Constants.STREAM);\n        return getCurrent(streamMetrics, MetricsConstants.MANIFEST_UPDATE);\n    }\n\n    /**\n     * @param {object} updatedFields fields to be updated\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function updateManifestUpdateInfo(updatedFields) {\n        const manifestUpdate = this.getCurrentManifestUpdate();\n        metricsModel.updateManifestUpdateInfo(manifestUpdate, updatedFields);\n    }\n\n    /**\n     * @param {object} streamInfo\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addManifestUpdateStreamInfo(streamInfo) {\n        if (streamInfo) {\n            const manifestUpdate = this.getCurrentManifestUpdate();\n            metricsModel.addManifestUpdateStreamInfo(manifestUpdate, streamInfo.id, streamInfo.index, streamInfo.start, streamInfo.duration);\n        }\n    }\n\n    /**\n     * @param {object} request\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addManifestUpdate(request) {\n        metricsModel.addManifestUpdate(Constants.STREAM, request.type, request.requestStartDate, request.requestEndDate);\n    }\n\n    /**\n     * @param {object} request\n     * @param {string} responseURL\n     * @param {number} responseStatus\n     * @param {object} responseHeaders\n     * @param {object} traces\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addHttpRequest(request, responseURL, responseStatus, responseHeaders, traces) {\n        metricsModel.addHttpRequest(request.mediaType,\n            null,\n            request.type,\n            request.url,\n            request.quality,\n            responseURL,\n            request.serviceLocation || null,\n            request.range || null,\n            request.requestStartDate,\n            request.firstByteDate,\n            request.requestEndDate,\n            responseStatus,\n            request.duration,\n            responseHeaders,\n            traces);\n    }\n\n    /**\n     * @param {object} representation\n     * @param {MediaType} mediaType\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addManifestUpdateRepresentationInfo(representation, mediaType) {\n        if (representation) {\n            const manifestUpdateInfo = this.getCurrentManifestUpdate();\n            metricsModel.addManifestUpdateRepresentationInfo(manifestUpdateInfo, representation.id, representation.index, representation.streamIndex, mediaType, representation.presentationTimeOffset, representation.startNumber, representation.fragmentInfoType);\n        }\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentDVRInfo(mediaType) {\n        const metrics = mediaType ? metricsModel.getMetricsFor(mediaType, true) :\n            metricsModel.getMetricsFor(Constants.VIDEO, true) || metricsModel.getMetricsFor(Constants.AUDIO, true);\n        return getCurrent(metrics, MetricsConstants.DVR_INFO);\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @param {Date} currentTime time of the switch event\n     * @param {object} mpd mpd reference\n     * @param {object} range range of the dvr info\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addDVRInfo(mediaType, currentTime, mpd, range) {\n        metricsModel.addDVRInfo(mediaType, currentTime, mpd, range);\n    }\n\n    /**\n     * @param {string} id\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getLatestMPDRequestHeaderValueByID(id) {\n        let headers = {};\n        let httpRequestList,\n            httpRequest,\n            i;\n\n        httpRequestList = getHttpRequests(Constants.STREAM);\n\n        for (i = httpRequestList.length - 1; i >= 0; i--) {\n            httpRequest = httpRequestList[i];\n\n            if (httpRequest.type === HTTPRequest.MPD_TYPE) {\n                headers = Utils.parseHttpHeaders(httpRequest._responseHeaders);\n                break;\n            }\n        }\n\n        return headers[id] === undefined ? null :  headers[id];\n    }\n\n    /**\n     * @param {string} type\n     * @param {string} id\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getLatestFragmentRequestHeaderValueByID(type, id) {\n        let headers = {};\n        let httpRequest = getCurrentHttpRequest(type, true);\n        if (httpRequest) {\n            headers = Utils.parseHttpHeaders(httpRequest._responseHeaders);\n        }\n        return headers[id] === undefined ? null :  headers[id];\n    }\n\n    /**\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addPlayList() {\n        if (playListMetrics) {\n            metricsModel.addPlayList(playListMetrics);\n            playListMetrics = null;\n        }\n    }\n\n    function createPlaylistMetrics(mediaStartTime, startReason) {\n        playListMetrics = new PlayList();\n\n        playListMetrics.start = new Date();\n        playListMetrics.mstart = mediaStartTime;\n        playListMetrics.starttype = startReason;\n    }\n\n    function createPlaylistTraceMetrics(representationId, mediaStartTime, speed) {\n        if (playListTraceMetricsClosed === true ) {\n            playListTraceMetricsClosed = false;\n            playListTraceMetrics = new PlayListTrace();\n\n            playListTraceMetrics.representationid = representationId;\n            playListTraceMetrics.start = new Date();\n            playListTraceMetrics.mstart = mediaStartTime;\n            playListTraceMetrics.playbackspeed = speed !== null ? speed.toString() : null;\n        }\n    }\n\n    function updatePlayListTraceMetrics(traceToUpdate) {\n        if (playListTraceMetrics) {\n            for (let field in playListTraceMetrics) {\n                playListTraceMetrics[field] = traceToUpdate[field];\n            }\n        }\n    }\n\n    function pushPlayListTraceMetrics(endTime, reason) {\n        if (playListTraceMetricsClosed === false && playListMetrics && playListTraceMetrics && playListTraceMetrics.start) {\n            const startTime = playListTraceMetrics.start;\n            const duration = endTime.getTime() - startTime.getTime();\n            playListTraceMetrics.duration = duration;\n            playListTraceMetrics.stopreason = reason;\n            playListMetrics.trace.push(playListTraceMetrics);\n            playListTraceMetricsClosed = true;\n        }\n    }\n\n    /**\n     * @param {object} errors\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addDVBErrors(errors) {\n        metricsModel.addDVBErrors(errors);\n    }\n\n    instance = {\n        getCurrentRepresentationSwitch: getCurrentRepresentationSwitch,\n        getCurrentBufferState: getCurrentBufferState,\n        getCurrentBufferLevel: getCurrentBufferLevel,\n        getCurrentHttpRequest: getCurrentHttpRequest,\n        getHttpRequests: getHttpRequests,\n        getCurrentDroppedFrames: getCurrentDroppedFrames,\n        getCurrentSchedulingInfo: getCurrentSchedulingInfo,\n        getCurrentDVRInfo: getCurrentDVRInfo,\n        getCurrentManifestUpdate: getCurrentManifestUpdate,\n        getLatestFragmentRequestHeaderValueByID: getLatestFragmentRequestHeaderValueByID,\n        getLatestMPDRequestHeaderValueByID: getLatestMPDRequestHeaderValueByID,\n        addRepresentationSwitch: addRepresentationSwitch,\n        addDVRInfo: addDVRInfo,\n        updateManifestUpdateInfo: updateManifestUpdateInfo,\n        addManifestUpdateStreamInfo: addManifestUpdateStreamInfo,\n        addManifestUpdateRepresentationInfo: addManifestUpdateRepresentationInfo,\n        addManifestUpdate: addManifestUpdate,\n        addHttpRequest: addHttpRequest,\n        addSchedulingInfo: addSchedulingInfo,\n        addRequestsQueue: addRequestsQueue,\n        addBufferLevel: addBufferLevel,\n        addBufferState: addBufferState,\n        addDroppedFrames: addDroppedFrames,\n        addPlayList: addPlayList,\n        addDVBErrors: addDVBErrors,\n        createPlaylistMetrics: createPlaylistMetrics,\n        createPlaylistTraceMetrics: createPlaylistTraceMetrics,\n        updatePlayListTraceMetrics: updatePlayListTraceMetrics,\n        pushPlayListTraceMetrics: pushPlayListTraceMetrics,\n        clearAllCurrentMetrics: clearAllCurrentMetrics\n    };\n\n    setup();\n\n    return instance;\n}\n\nDashMetrics.__dashjs_factory_name = 'DashMetrics';\nexport default FactoryMaker.getSingletonFactory(DashMetrics);\n"]},"metadata":{},"sourceType":"script"}