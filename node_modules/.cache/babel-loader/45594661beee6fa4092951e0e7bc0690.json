{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Constants = require('../../constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _FactoryMaker = require('../../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _MetricsConstants = require('../../constants/MetricsConstants');\n\nvar _MetricsConstants2 = _interopRequireDefault(_MetricsConstants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction BufferLevelRule(config) {\n  config = config || {};\n  var dashMetrics = config.dashMetrics;\n  var mediaPlayerModel = config.mediaPlayerModel;\n  var textController = config.textController;\n  var abrController = config.abrController;\n  var settings = config.settings;\n\n  function setup() {}\n\n  function execute(type, representationInfo, hasVideoTrack) {\n    if (!type || !representationInfo) {\n      return true;\n    }\n\n    var bufferLevel = dashMetrics.getCurrentBufferLevel(type);\n    return bufferLevel < getBufferTarget(type, representationInfo, hasVideoTrack);\n  }\n\n  function getBufferTarget(type, representationInfo, hasVideoTrack) {\n    var bufferTarget = NaN;\n\n    if (!type || !representationInfo) {\n      return bufferTarget;\n    }\n\n    if (type === _Constants2.default.FRAGMENTED_TEXT) {\n      if (textController.isTextEnabled()) {\n        if (isNaN(representationInfo.fragmentDuration)) {\n          //fragmentDuration of representationInfo is not defined,\n          // call metrics function to have data in the latest scheduling info...\n          // if no metric, returns 0. In this case, rule will return false.\n          var schedulingInfo = dashMetrics.getCurrentSchedulingInfo(_MetricsConstants2.default.SCHEDULING_INFO);\n          bufferTarget = schedulingInfo ? schedulingInfo.duration : 0;\n        } else {\n          bufferTarget = representationInfo.fragmentDuration;\n        }\n      } else {\n        // text is disabled, rule will return false\n        bufferTarget = 0;\n      }\n    } else if (type === _Constants2.default.AUDIO && hasVideoTrack) {\n      var videoBufferLevel = dashMetrics.getCurrentBufferLevel(_Constants2.default.VIDEO);\n\n      if (isNaN(representationInfo.fragmentDuration)) {\n        bufferTarget = videoBufferLevel;\n      } else {\n        bufferTarget = Math.max(videoBufferLevel, representationInfo.fragmentDuration);\n      }\n    } else {\n      var streamInfo = representationInfo.mediaInfo.streamInfo;\n\n      if (abrController.isPlayingAtTopQuality(streamInfo)) {\n        var isLongFormContent = streamInfo.manifestInfo.duration >= settings.get().streaming.longFormContentDurationThreshold;\n        bufferTarget = isLongFormContent ? settings.get().streaming.bufferTimeAtTopQualityLongForm : settings.get().streaming.bufferTimeAtTopQuality;\n      } else {\n        bufferTarget = mediaPlayerModel.getStableBufferTime();\n      }\n    }\n\n    return bufferTarget;\n  }\n\n  var instance = {\n    execute: execute,\n    getBufferTarget: getBufferTarget\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nBufferLevelRule.__dashjs_factory_name = 'BufferLevelRule';\nexports.default = _FactoryMaker2.default.getClassFactory(BufferLevelRule);","map":{"version":3,"sources":["../../../../../../src/streaming/rules/scheduling/BufferLevelRule.js"],"names":["config","dashMetrics","mediaPlayerModel","textController","abrController","settings","bufferLevel","getBufferTarget","bufferTarget","type","Constants","isNaN","representationInfo","schedulingInfo","MetricsConstants","videoBufferLevel","Math","streamInfo","isLongFormContent","instance","execute","setup","BufferLevelRule","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../../constants/Constants';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport MetricsConstants from '../../constants/MetricsConstants';\n\nfunction BufferLevelRule(config) {\n\n    config = config || {};\n    const dashMetrics = config.dashMetrics;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const textController = config.textController;\n    const abrController = config.abrController;\n    const settings = config.settings;\n\n    function setup() {\n    }\n\n    function execute(type, representationInfo, hasVideoTrack) {\n        if (!type || !representationInfo) {\n            return true;\n        }\n        const bufferLevel = dashMetrics.getCurrentBufferLevel(type);\n        return bufferLevel < getBufferTarget(type, representationInfo, hasVideoTrack);\n    }\n\n    function getBufferTarget(type, representationInfo, hasVideoTrack) {\n        let bufferTarget = NaN;\n\n        if (!type || !representationInfo) {\n            return bufferTarget;\n        }\n\n        if (type === Constants.FRAGMENTED_TEXT) {\n            if (textController.isTextEnabled()) {\n                if (isNaN(representationInfo.fragmentDuration)) { //fragmentDuration of representationInfo is not defined,\n                    // call metrics function to have data in the latest scheduling info...\n                    // if no metric, returns 0. In this case, rule will return false.\n                    const schedulingInfo = dashMetrics.getCurrentSchedulingInfo(MetricsConstants.SCHEDULING_INFO);\n                    bufferTarget = schedulingInfo ? schedulingInfo.duration : 0;\n                } else {\n                    bufferTarget = representationInfo.fragmentDuration;\n                }\n            } else { // text is disabled, rule will return false\n                bufferTarget = 0;\n            }\n        }  else if (type === Constants.AUDIO && hasVideoTrack) {\n            const videoBufferLevel = dashMetrics.getCurrentBufferLevel(Constants.VIDEO);\n            if (isNaN(representationInfo.fragmentDuration)) {\n                bufferTarget = videoBufferLevel;\n            } else {\n                bufferTarget = Math.max(videoBufferLevel, representationInfo.fragmentDuration);\n            }\n        } else {\n            const streamInfo = representationInfo.mediaInfo.streamInfo;\n            if (abrController.isPlayingAtTopQuality(streamInfo)) {\n                const isLongFormContent = streamInfo.manifestInfo.duration >= settings.get().streaming.longFormContentDurationThreshold;\n                bufferTarget = isLongFormContent ? settings.get().streaming.bufferTimeAtTopQualityLongForm : settings.get().streaming.bufferTimeAtTopQuality;\n            } else {\n                bufferTarget = mediaPlayerModel.getStableBufferTime();\n            }\n        }\n        return bufferTarget;\n    }\n\n    const instance = {\n        execute: execute,\n        getBufferTarget: getBufferTarget\n    };\n\n    setup();\n    return instance;\n}\n\nBufferLevelRule.__dashjs_factory_name = 'BufferLevelRule';\nexport default FactoryMaker.getClassFactory(BufferLevelRule);\n"]},"metadata":{},"sourceType":"script"}