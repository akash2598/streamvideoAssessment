{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ProtectionConstants = require('../../constants/ProtectionConstants');\n\nvar _ProtectionConstants2 = _interopRequireDefault(_ProtectionConstants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction DRMToday(config) {\n  config = config || {};\n  var BASE64 = config.BASE64;\n  var keySystems = {};\n  keySystems[_ProtectionConstants2.default.WIDEVINE_KEYSTEM_STRING] = {\n    responseType: 'json',\n    getLicenseMessage: function getLicenseMessage(response) {\n      return BASE64.decodeArray(response.license);\n    },\n    getErrorResponse: function getErrorResponse(response) {\n      return response;\n    }\n  };\n  keySystems[_ProtectionConstants2.default.PLAYREADY_KEYSTEM_STRING] = {\n    responseType: 'arraybuffer',\n    getLicenseMessage: function getLicenseMessage(response) {\n      return response;\n    },\n    getErrorResponse: function getErrorResponse(response) {\n      return String.fromCharCode.apply(null, new Uint8Array(response));\n    }\n  };\n  var instance = void 0;\n\n  function checkConfig() {\n    if (!BASE64 || !BASE64.hasOwnProperty('decodeArray')) {\n      throw new Error('Missing config parameter(s)');\n    }\n  }\n\n  function getServerURLFromMessage(url\n  /*, message, messageType*/\n  ) {\n    return url;\n  }\n\n  function getHTTPMethod()\n  /*messageType*/\n  {\n    return 'POST';\n  }\n\n  function getResponseType(keySystemStr\n  /*, messageType*/\n  ) {\n    return keySystems[keySystemStr].responseType;\n  }\n\n  function getLicenseMessage(serverResponse, keySystemStr\n  /*, messageType*/\n  ) {\n    checkConfig();\n    return keySystems[keySystemStr].getLicenseMessage(serverResponse);\n  }\n\n  function getErrorResponse(serverResponse, keySystemStr\n  /*, messageType*/\n  ) {\n    return keySystems[keySystemStr].getErrorResponse(serverResponse);\n  }\n\n  instance = {\n    getServerURLFromMessage: getServerURLFromMessage,\n    getHTTPMethod: getHTTPMethod,\n    getResponseType: getResponseType,\n    getLicenseMessage: getLicenseMessage,\n    getErrorResponse: getErrorResponse\n  };\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n* CastLabs DRMToday License Server implementation\n*\n* @implements LicenseServer\n* @class\n*/\n\n\nDRMToday.__dashjs_factory_name = 'DRMToday';\nexports.default = dashjs.FactoryMaker.getSingletonFactory(DRMToday);\n/* jshint ignore:line */","map":{"version":3,"sources":["../../../../../../src/streaming/protection/servers/DRMToday.js"],"names":["config","BASE64","keySystems","ProtectionConstants","responseType","getLicenseMessage","response","getErrorResponse","String","instance","url","keySystemStr","checkConfig","getServerURLFromMessage","getHTTPMethod","getResponseType","DRMToday","dashjs"],"mappings":";;;;;;AAsCA,IAAA,oBAAA,GAAA,OAAA,CAAA,qCAAA,CAAA;;;;;;;;AAEA;;AAAA,SAAA,QAAA,CAAA,MAAA,EAA0B;AAEtBA,EAAAA,MAAAA,GAASA,MAAAA,IAATA,EAAAA;AACA,MAAMC,MAAAA,GAASD,MAAAA,CAAf,MAAA;AAEA,MAAME,UAAAA,GAAN,EAAA;AACAA,EAAAA,UAAAA,CAAWC,qBAAAA,CAAAA,OAAAA,CAAXD,uBAAAA,CAAAA,GAA0D;AACtDE,IAAAA,YAAAA,EADsD,MAAA;AAEtDC,IAAAA,iBAAAA,EAAmB,SAAA,iBAAA,CAAA,QAAA,EAAoB;AACnC,aAAOJ,MAAAA,CAAAA,WAAAA,CAAmBK,QAAAA,CAA1B,OAAOL,CAAP;AAHkD,KAAA;AAKtDM,IAAAA,gBAAAA,EAAkB,SAAA,gBAAA,CAAA,QAAA,EAAoB;AAClC,aAAA,QAAA;AANRL;AAA0D,GAA1DA;AASAA,EAAAA,UAAAA,CAAWC,qBAAAA,CAAAA,OAAAA,CAAXD,wBAAAA,CAAAA,GAA2D;AACvDE,IAAAA,YAAAA,EADuD,aAAA;AAEvDC,IAAAA,iBAAAA,EAAmB,SAAA,iBAAA,CAAA,QAAA,EAAoB;AACnC,aAAA,QAAA;AAHmD,KAAA;AAKvDE,IAAAA,gBAAAA,EAAkB,SAAA,gBAAA,CAAA,QAAA,EAAoB;AAClC,aAAOC,MAAAA,CAAAA,YAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAgC,IAAA,UAAA,CAAvC,QAAuC,CAAhCA,CAAP;AANRN;AAA2D,GAA3DA;AAUA,MAAIO,QAAAA,GAAAA,KAAJ,CAAA;;AAEA,WAAA,WAAA,GAAuB;AACnB,QAAI,CAAA,MAAA,IAAW,CAACR,MAAAA,CAAAA,cAAAA,CAAhB,aAAgBA,CAAhB,EAAsD;AAClD,YAAM,IAAA,KAAA,CAAN,6BAAM,CAAN;AAEP;AAED;;AAAA,WAAA,uBAAA,CAAiCS;AAAjC;AAAA,IAAiE;AAC7D,WAAA,GAAA;AAGJ;;AAAA,WAAA,aAAA;AAAuB;AAAiB;AACpC,WAAA,MAAA;AAGJ;;AAAA,WAAA,eAAA,CAAyBC;AAAzB;AAAA,IAAwD;AACpD,WAAOT,UAAAA,CAAAA,YAAAA,CAAAA,CAAP,YAAA;AAGJ;;AAAA,WAAA,iBAAA,CAAA,cAAA,EAA2CS;AAA3C;AAAA,IAA0E;AACtEC,IAAAA,WAAAA;AACA,WAAOV,UAAAA,CAAAA,YAAAA,CAAAA,CAAAA,iBAAAA,CAAP,cAAOA,CAAP;AAGJ;;AAAA,WAAA,gBAAA,CAAA,cAAA,EAA0CS;AAA1C;AAAA,IAAyE;AACrE,WAAOT,UAAAA,CAAAA,YAAAA,CAAAA,CAAAA,gBAAAA,CAAP,cAAOA,CAAP;AAGJO;;AAAAA,EAAAA,QAAAA,GAAW;AACPI,IAAAA,uBAAAA,EADO,uBAAA;AAEPC,IAAAA,aAAAA,EAFO,aAAA;AAGPC,IAAAA,eAAAA,EAHO,eAAA;AAIPV,IAAAA,iBAAAA,EAJO,iBAAA;AAKPE,IAAAA,gBAAAA,EALJE;AAAW,GAAXA;AAQA,SAAA,QAAA;AAtGJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;;;;AA0EAO,QAAAA,CAAAA,qBAAAA,GAAAA,UAAAA;kBACeC,MAAAA,CAAAA,YAAAA,CAAAA,mBAAAA,CAAAA,QAAAA,C;AAAmD","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CastLabs DRMToday License Server implementation\n *\n * @implements LicenseServer\n * @class\n */\n\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nfunction DRMToday(config) {\n\n    config = config || {};\n    const BASE64 = config.BASE64;\n\n    const keySystems = {};\n    keySystems[ProtectionConstants.WIDEVINE_KEYSTEM_STRING] = {\n        responseType: 'json',\n        getLicenseMessage: function (response) {\n            return BASE64.decodeArray(response.license);\n        },\n        getErrorResponse: function (response) {\n            return response;\n        }\n    };\n    keySystems[ProtectionConstants.PLAYREADY_KEYSTEM_STRING] = {\n        responseType: 'arraybuffer',\n        getLicenseMessage: function (response) {\n            return response;\n        },\n        getErrorResponse: function (response) {\n            return String.fromCharCode.apply(null, new Uint8Array(response));\n        }\n    };\n\n    let instance;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].responseType;\n    }\n\n    function getLicenseMessage(serverResponse, keySystemStr/*, messageType*/) {\n        checkConfig();\n        return keySystems[keySystemStr].getLicenseMessage(serverResponse);\n    }\n\n    function getErrorResponse(serverResponse, keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].getErrorResponse(serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nDRMToday.__dashjs_factory_name = 'DRMToday';\nexport default dashjs.FactoryMaker.getSingletonFactory(DRMToday); /* jshint ignore:line */"]},"metadata":{},"sourceType":"script"}