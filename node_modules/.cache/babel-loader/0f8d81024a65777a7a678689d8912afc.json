{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _CommonEncryption = require('../CommonEncryption');\n\nvar _CommonEncryption2 = _interopRequireDefault(_CommonEncryption);\n\nvar _ProtectionConstants = require('../../constants/ProtectionConstants');\n\nvar _ProtectionConstants2 = _interopRequireDefault(_ProtectionConstants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n* Microsoft PlayReady DRM\n*\n* @class\n* @implements KeySystem\n*/\n\n\nvar uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\nvar systemString = _ProtectionConstants2.default.PLAYREADY_KEYSTEM_STRING;\nvar schemeIdURI = 'urn:uuid:' + uuid;\nvar PRCDMData = '<PlayReadyCDMData type=\"LicenseAcquisition\"><LicenseAcquisition version=\"1.0\" Proactive=\"false\"><CustomData encoding=\"base64encoded\">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';\nvar protData = void 0;\n\nfunction KeySystemPlayReady(config) {\n  config = config || {};\n  var instance = void 0;\n  var messageFormat = 'utf-16';\n  var BASE64 = config.BASE64;\n\n  function checkConfig() {\n    if (!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray')) {\n      throw new Error('Missing config parameter(s)');\n    }\n  }\n\n  function getRequestHeadersFromMessage(message) {\n    var msg = void 0,\n        xmlDoc = void 0;\n    var headers = {};\n    var parser = new DOMParser();\n    var dataview = messageFormat === 'utf-16' ? new Uint16Array(message) : new Uint8Array(message);\n    msg = String.fromCharCode.apply(null, dataview);\n    xmlDoc = parser.parseFromString(msg, 'application/xml');\n    var headerNameList = xmlDoc.getElementsByTagName('name');\n    var headerValueList = xmlDoc.getElementsByTagName('value');\n\n    for (var i = 0; i < headerNameList.length; i++) {\n      headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\n    } // Some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\n    // this is NOT w3c conform and license servers may reject the request!\n    // -> rename it to proper w3c definition!\n\n\n    if (headers.hasOwnProperty('Content')) {\n      headers['Content-Type'] = headers.Content;\n      delete headers.Content;\n    } // Set Content-Type header by default if not provided in the the CDM message (<PlayReadyKeyMessage/>)\n    // or if the message contains directly the challenge itself (Ex: LG SmartTVs)\n\n\n    if (!headers.hasOwnProperty('Content-Type')) {\n      headers['Content-Type'] = 'text/xml; charset=utf-8';\n    }\n\n    return headers;\n  }\n\n  function getLicenseRequestFromMessage(message) {\n    var licenseRequest = null;\n    var parser = new DOMParser();\n    var dataview = messageFormat === 'utf-16' ? new Uint16Array(message) : new Uint8Array(message);\n    checkConfig();\n    var msg = String.fromCharCode.apply(null, dataview);\n    var xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n    if (xmlDoc.getElementsByTagName('PlayReadyKeyMessage')[0]) {\n      var Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\n\n      if (Challenge) {\n        licenseRequest = BASE64.decode(Challenge);\n      }\n    } else {\n      // The message from CDM is not a wrapped message as on IE11 and Edge,\n      // thus it contains direclty the challenge itself\n      // (note that the xmlDoc at this point may be unreadable since it may have been interpreted as UTF-16)\n      return message;\n    }\n\n    return licenseRequest;\n  }\n\n  function getLicenseServerURLFromInitData(initData) {\n    if (initData) {\n      var data = new DataView(initData);\n      var numRecords = data.getUint16(4, true);\n      var offset = 6;\n      var parser = new DOMParser();\n\n      for (var i = 0; i < numRecords; i++) {\n        // Parse the PlayReady Record header\n        var recordType = data.getUint16(offset, true);\n        offset += 2;\n        var recordLength = data.getUint16(offset, true);\n        offset += 2;\n\n        if (recordType !== 0x0001) {\n          offset += recordLength;\n          continue;\n        }\n\n        var recordData = initData.slice(offset, offset + recordLength);\n        var record = String.fromCharCode.apply(null, new Uint16Array(recordData));\n        var xmlDoc = parser.parseFromString(record, 'application/xml'); // First try <LA_URL>\n\n        if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\n          var laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\n\n          if (laurl) {\n            return laurl;\n          }\n        } // Optionally, try <LUI_URL>\n\n\n        if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\n          var luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\n\n          if (luiurl) {\n            return luiurl;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  function getInitData(cpData) {\n    // * desc@ getInitData\n    // *   generate PSSH data from PROHeader defined in MPD file\n    // *   PSSH format:\n    // *   size (4)\n    // *   box type(PSSH) (8)\n    // *   Protection SystemID (16)\n    // *   protection system data size (4) - length of decoded PROHeader\n    // *   decoded PROHeader data from MPD file\n    var PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\n\n    var playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\n    var byteCursor = 0;\n    var uint8arraydecodedPROHeader = null;\n    var PROSize = void 0,\n        PSSHSize = void 0,\n        PSSHBoxBuffer = void 0,\n        PSSHBox = void 0,\n        PSSHData = void 0;\n    checkConfig();\n\n    if (!cpData) {\n      return null;\n    } // Handle common encryption PSSH\n\n\n    if ('pssh' in cpData) {\n      return _CommonEncryption2.default.parseInitDataFromContentProtection(cpData, BASE64);\n    } // Handle native MS PlayReady ContentProtection elements\n\n\n    if ('pro' in cpData) {\n      uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\n    } else if ('prheader' in cpData) {\n      uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\n    } else {\n      return null;\n    }\n\n    PROSize = uint8arraydecodedPROHeader.length;\n    PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\n    PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\n    PSSHBox = new Uint8Array(PSSHBoxBuffer);\n    PSSHData = new DataView(PSSHBoxBuffer);\n    PSSHData.setUint32(byteCursor, PSSHSize);\n    byteCursor += 0x4;\n    PSSHBox.set(PSSHBoxType, byteCursor);\n    byteCursor += PSSHBoxType.length;\n    PSSHBox.set(playreadySystemID, byteCursor);\n    byteCursor += playreadySystemID.length;\n    PSSHData.setUint32(byteCursor, PROSize);\n    byteCursor += 0x4;\n    PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\n    byteCursor += PROSize;\n    return PSSHBox.buffer;\n  }\n  /**\n  * It seems that some PlayReady implementations return their XML-based CDM\n  * messages using UTF16, while others return them as UTF8.  Use this function\n  * to modify the message format to expect when parsing CDM messages.\n  *\n  * @param {string} format the expected message format.  Either \"utf-8\" or \"utf-16\".\n  * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\n  */\n\n\n  function setPlayReadyMessageFormat(format) {\n    if (format !== 'utf-8' && format !== 'utf-16') {\n      throw new Error('Specified message format is not one of \"utf-8\" or \"utf-16\"');\n    }\n\n    messageFormat = format;\n  }\n  /**\n  * Initialize the Key system with protection data\n  * @param {Object} protectionData the protection data\n  */\n\n\n  function init(protectionData) {\n    if (protectionData) {\n      protData = protectionData;\n    }\n  }\n  /**\n  * Get Playready Custom data\n  */\n\n\n  function getCDMData() {\n    var customData = void 0,\n        cdmData = void 0,\n        cdmDataBytes = void 0,\n        i = void 0;\n    checkConfig();\n\n    if (protData && protData.cdmData) {\n      // Convert custom data into multibyte string\n      customData = [];\n\n      for (i = 0; i < protData.cdmData.length; ++i) {\n        customData.push(protData.cdmData.charCodeAt(i));\n        customData.push(0);\n      }\n\n      customData = String.fromCharCode.apply(null, customData); // Encode in Base 64 the custom data string\n\n      customData = BASE64.encode(customData); // Initialize CDM data with Base 64 encoded custom data\n      // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)\n\n      cdmData = PRCDMData.replace('%CUSTOMDATA%', customData); // Convert CDM data into multibyte characters\n\n      cdmDataBytes = [];\n\n      for (i = 0; i < cdmData.length; ++i) {\n        cdmDataBytes.push(cdmData.charCodeAt(i));\n        cdmDataBytes.push(0);\n      }\n\n      return new Uint8Array(cdmDataBytes).buffer;\n    }\n\n    return null;\n  }\n\n  function getSessionId(cp) {\n    // Get sessionId from protectionData or from manifest\n    if (protData && protData.sessionId) {\n      return protData.sessionId;\n    } else if (cp && cp.sessionId) {\n      return cp.sessionId;\n    }\n\n    return null;\n  }\n\n  instance = {\n    uuid: uuid,\n    schemeIdURI: schemeIdURI,\n    systemString: systemString,\n    getInitData: getInitData,\n    getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n    getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n    getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n    getCDMData: getCDMData,\n    getSessionId: getSessionId,\n    setPlayReadyMessageFormat: setPlayReadyMessageFormat,\n    init: init\n  };\n  return instance;\n}\n\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\nexports.default = dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady);\n/* jshint ignore:line */","map":{"version":3,"sources":["../../../../../../src/streaming/protection/drm/KeySystemPlayReady.js"],"names":["uuid","systemString","ProtectionConstants","schemeIdURI","PRCDMData","protData","config","instance","messageFormat","BASE64","msg","xmlDoc","headers","parser","dataview","String","headerNameList","headerValueList","i","licenseRequest","checkConfig","Challenge","data","numRecords","offset","recordType","recordLength","recordData","initData","record","laurl","luiurl","PSSHBoxType","playreadySystemID","byteCursor","uint8arraydecodedPROHeader","PROSize","PSSHSize","PSSHBoxBuffer","PSSHBox","PSSHData","CommonEncryption","cpData","format","customData","cdmData","cdmDataBytes","cp","getInitData","getRequestHeadersFromMessage","getLicenseRequestFromMessage","getLicenseServerURLFromInitData","getCDMData","getSessionId","setPlayReadyMessageFormat","init","KeySystemPlayReady","dashjs"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Microsoft PlayReady DRM\n *\n * @class\n * @implements KeySystem\n */\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\nconst systemString = ProtectionConstants.PLAYREADY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\nconst PRCDMData = '<PlayReadyCDMData type=\"LicenseAcquisition\"><LicenseAcquisition version=\"1.0\" Proactive=\"false\"><CustomData encoding=\"base64encoded\">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';\nlet protData;\n\nfunction KeySystemPlayReady(config) {\n\n    config = config || {};\n    let instance;\n    let messageFormat = 'utf-16';\n    const BASE64 = config.BASE64;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray') ) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getRequestHeadersFromMessage(message) {\n        let msg,\n            xmlDoc;\n        const headers = {};\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        msg = String.fromCharCode.apply(null, dataview);\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        const headerNameList = xmlDoc.getElementsByTagName('name');\n        const headerValueList = xmlDoc.getElementsByTagName('value');\n        for (let i = 0; i < headerNameList.length; i++) {\n            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\n        }\n        // Some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\n        // this is NOT w3c conform and license servers may reject the request!\n        // -> rename it to proper w3c definition!\n        if (headers.hasOwnProperty('Content')) {\n            headers['Content-Type'] = headers.Content;\n            delete headers.Content;\n        }\n        // Set Content-Type header by default if not provided in the the CDM message (<PlayReadyKeyMessage/>)\n        // or if the message contains directly the challenge itself (Ex: LG SmartTVs)\n        if (!headers.hasOwnProperty('Content-Type')) {\n            headers['Content-Type'] = 'text/xml; charset=utf-8';\n        }\n        return headers;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        let licenseRequest = null;\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        checkConfig();\n        const msg = String.fromCharCode.apply(null, dataview);\n        const xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        if (xmlDoc.getElementsByTagName('PlayReadyKeyMessage')[0]) {\n            const Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\n            if (Challenge) {\n                licenseRequest = BASE64.decode(Challenge);\n            }\n        } else {\n            // The message from CDM is not a wrapped message as on IE11 and Edge,\n            // thus it contains direclty the challenge itself\n            // (note that the xmlDoc at this point may be unreadable since it may have been interpreted as UTF-16)\n            return message;\n        }\n\n        return licenseRequest;\n    }\n\n    function getLicenseServerURLFromInitData(initData) {\n        if (initData) {\n            const data = new DataView(initData);\n            const numRecords = data.getUint16(4, true);\n            let offset = 6;\n            const parser = new DOMParser();\n\n            for (let i = 0; i < numRecords; i++) {\n                // Parse the PlayReady Record header\n                const recordType = data.getUint16(offset, true);\n                offset += 2;\n                const recordLength = data.getUint16(offset, true);\n                offset += 2;\n                if (recordType !== 0x0001) {\n                    offset += recordLength;\n                    continue;\n                }\n\n                const recordData = initData.slice(offset, offset + recordLength);\n                const record = String.fromCharCode.apply(null, new Uint16Array(recordData));\n                const xmlDoc = parser.parseFromString(record, 'application/xml');\n\n                // First try <LA_URL>\n                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\n                    const laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\n                    if (laurl) {\n                        return laurl;\n                    }\n                }\n\n                // Optionally, try <LUI_URL>\n                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\n                    const luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\n                    if (luiurl) {\n                        return luiurl;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    function getInitData(cpData) {\n        // * desc@ getInitData\n        // *   generate PSSH data from PROHeader defined in MPD file\n        // *   PSSH format:\n        // *   size (4)\n        // *   box type(PSSH) (8)\n        // *   Protection SystemID (16)\n        // *   protection system data size (4) - length of decoded PROHeader\n        // *   decoded PROHeader data from MPD file\n        const PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\n        const playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\n\n        let byteCursor = 0;\n        let uint8arraydecodedPROHeader = null;\n\n        let PROSize,\n            PSSHSize,\n            PSSHBoxBuffer,\n            PSSHBox,\n            PSSHData;\n\n        checkConfig();\n        if (!cpData) {\n            return null;\n        }\n        // Handle common encryption PSSH\n        if ('pssh' in cpData) {\n            return CommonEncryption.parseInitDataFromContentProtection(cpData, BASE64);\n        }\n        // Handle native MS PlayReady ContentProtection elements\n        if ('pro' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\n        }\n        else if ('prheader' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\n        }\n        else {\n            return null;\n        }\n\n        PROSize = uint8arraydecodedPROHeader.length;\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\n\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\n\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\n        PSSHData = new DataView(PSSHBoxBuffer);\n\n        PSSHData.setUint32(byteCursor, PSSHSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(PSSHBoxType, byteCursor);\n        byteCursor += PSSHBoxType.length;\n\n        PSSHBox.set(playreadySystemID, byteCursor);\n        byteCursor += playreadySystemID.length;\n\n        PSSHData.setUint32(byteCursor, PROSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\n        byteCursor += PROSize;\n\n        return PSSHBox.buffer;\n    }\n\n    /**\n     * It seems that some PlayReady implementations return their XML-based CDM\n     * messages using UTF16, while others return them as UTF8.  Use this function\n     * to modify the message format to expect when parsing CDM messages.\n     *\n     * @param {string} format the expected message format.  Either \"utf-8\" or \"utf-16\".\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\n     */\n    function setPlayReadyMessageFormat(format) {\n        if (format !== 'utf-8' && format !== 'utf-16') {\n            throw new Error('Specified message format is not one of \"utf-8\" or \"utf-16\"');\n        }\n        messageFormat = format;\n    }\n\n    /**\n     * Initialize the Key system with protection data\n     * @param {Object} protectionData the protection data\n     */\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n\n    /**\n     * Get Playready Custom data\n     */\n    function getCDMData() {\n        let customData,\n            cdmData,\n            cdmDataBytes,\n            i;\n\n        checkConfig();\n        if (protData && protData.cdmData) {\n            // Convert custom data into multibyte string\n            customData = [];\n            for (i = 0; i < protData.cdmData.length; ++i) {\n                customData.push(protData.cdmData.charCodeAt(i));\n                customData.push(0);\n            }\n            customData = String.fromCharCode.apply(null, customData);\n\n            // Encode in Base 64 the custom data string\n            customData = BASE64.encode(customData);\n\n            // Initialize CDM data with Base 64 encoded custom data\n            // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)\n            cdmData = PRCDMData.replace('%CUSTOMDATA%', customData);\n\n            // Convert CDM data into multibyte characters\n            cdmDataBytes = [];\n            for (i = 0; i < cdmData.length; ++i) {\n                cdmDataBytes.push(cdmData.charCodeAt(i));\n                cdmDataBytes.push(0);\n            }\n\n            return new Uint8Array(cdmDataBytes).buffer;\n        }\n\n        return null;\n    }\n\n    function getSessionId(cp) {\n        // Get sessionId from protectionData or from manifest\n        if (protData && protData.sessionId) {\n            return protData.sessionId;\n        } else if (cp && cp.sessionId) {\n            return cp.sessionId;\n        }\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        setPlayReadyMessageFormat: setPlayReadyMessageFormat,\n        init: init\n    };\n\n    return instance;\n}\n\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}