{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n* @module FactoryMaker\n* @ignore\n*/\n\nvar FactoryMaker = function () {\n  var instance = void 0;\n  var singletonContexts = [];\n  var singletonFactories = {};\n  var classFactories = {};\n\n  function extend(name, childInstance, override, context) {\n    if (!context[name] && childInstance) {\n      context[name] = {\n        instance: childInstance,\n        override: override\n      };\n    }\n  }\n  /**\n  * Use this method from your extended object.  this.factory is injected into your object.\n  * this.factory.getSingletonInstance(this.context, 'VideoModel')\n  * will return the video model for use in the extended object.\n  *\n  * @param {Object} context - injected into extended object as this.context\n  * @param {string} className - string name found in all dash.js objects\n  * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\n  * @returns {*} Context aware instance of specified singleton name.\n  * @memberof module:FactoryMaker\n  * @instance\n  */\n\n\n  function getSingletonInstance(context, className) {\n    for (var i in singletonContexts) {\n      var obj = singletonContexts[i];\n\n      if (obj.context === context && obj.name === className) {\n        return obj.instance;\n      }\n    }\n\n    return null;\n  }\n  /**\n  * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\n  *\n  * @param {Object} context\n  * @param {string} className\n  * @param {Object} instance\n  * @memberof module:FactoryMaker\n  * @instance\n  */\n\n\n  function setSingletonInstance(context, className, instance) {\n    for (var i in singletonContexts) {\n      var obj = singletonContexts[i];\n\n      if (obj.context === context && obj.name === className) {\n        singletonContexts[i].instance = instance;\n        return;\n      }\n    }\n\n    singletonContexts.push({\n      name: className,\n      context: context,\n      instance: instance\n    });\n  }\n  /**\n  * Use this method to remove all singleton instances associated with a particular context.\n  *\n  * @param {Object} context\n  * @memberof module:FactoryMaker\n  * @instance\n  */\n\n\n  function deleteSingletonInstances(context) {\n    singletonContexts = singletonContexts.filter(function (x) {\n      return x.context !== context;\n    });\n  }\n  /*------------------------------------------------------------------------------------------*/\n  // Factories storage Management\n\n  /*------------------------------------------------------------------------------------------*/\n\n\n  function getFactoryByName(name, factoriesArray) {\n    return factoriesArray[name];\n  }\n\n  function updateFactory(name, factory, factoriesArray) {\n    if (name in factoriesArray) {\n      factoriesArray[name] = factory;\n    }\n  }\n  /*------------------------------------------------------------------------------------------*/\n  // Class Factories Management\n\n  /*------------------------------------------------------------------------------------------*/\n\n\n  function updateClassFactory(name, factory) {\n    updateFactory(name, factory, classFactories);\n  }\n\n  function getClassFactoryByName(name) {\n    return getFactoryByName(name, classFactories);\n  }\n\n  function getClassFactory(classConstructor) {\n    var factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);\n\n    if (!factory) {\n      factory = function factory(context) {\n        if (context === undefined) {\n          context = {};\n        }\n\n        return {\n          create: function create() {\n            return merge(classConstructor, context, arguments);\n          }\n        };\n      };\n\n      classFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\n    }\n\n    return factory;\n  }\n  /*------------------------------------------------------------------------------------------*/\n  // Singleton Factory MAangement\n\n  /*------------------------------------------------------------------------------------------*/\n\n\n  function updateSingletonFactory(name, factory) {\n    updateFactory(name, factory, singletonFactories);\n  }\n\n  function getSingletonFactoryByName(name) {\n    return getFactoryByName(name, singletonFactories);\n  }\n\n  function getSingletonFactory(classConstructor) {\n    var factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);\n\n    if (!factory) {\n      factory = function factory(context) {\n        var instance = void 0;\n\n        if (context === undefined) {\n          context = {};\n        }\n\n        return {\n          getInstance: function getInstance() {\n            // If we don't have an instance yet check for one on the context\n            if (!instance) {\n              instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\n            } // If there's no instance on the context then create one\n\n\n            if (!instance) {\n              instance = merge(classConstructor, context, arguments);\n              singletonContexts.push({\n                name: classConstructor.__dashjs_factory_name,\n                context: context,\n                instance: instance\n              });\n            }\n\n            return instance;\n          }\n        };\n      };\n\n      singletonFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\n    }\n\n    return factory;\n  }\n\n  function merge(classConstructor, context, args) {\n    var classInstance = void 0;\n    var className = classConstructor.__dashjs_factory_name;\n    var extensionObject = context[className];\n\n    if (extensionObject) {\n      var extension = extensionObject.instance;\n\n      if (extensionObject.override) {\n        //Override public methods in parent but keep parent.\n        classInstance = classConstructor.apply({\n          context: context\n        }, args);\n        extension = extension.apply({\n          context: context,\n          factory: instance,\n          parent: classInstance\n        }, args);\n\n        for (var prop in extension) {\n          if (classInstance.hasOwnProperty(prop)) {\n            classInstance[prop] = extension[prop];\n          }\n        }\n      } else {\n        //replace parent object completely with new object. Same as dijon.\n        return extension.apply({\n          context: context,\n          factory: instance\n        }, args);\n      }\n    } else {\n      // Create new instance of the class\n      classInstance = classConstructor.apply({\n        context: context\n      }, args);\n    } // Add getClassName function to class instance prototype (used by Debug)\n\n\n    classInstance.getClassName = function () {\n      return className;\n    };\n\n    return classInstance;\n  }\n\n  instance = {\n    extend: extend,\n    getSingletonInstance: getSingletonInstance,\n    setSingletonInstance: setSingletonInstance,\n    deleteSingletonInstances: deleteSingletonInstances,\n    getSingletonFactory: getSingletonFactory,\n    getSingletonFactoryByName: getSingletonFactoryByName,\n    updateSingletonFactory: updateSingletonFactory,\n    getClassFactory: getClassFactory,\n    getClassFactoryByName: getClassFactoryByName,\n    updateClassFactory: updateClassFactory\n  };\n  return instance;\n}();\n\nexports.default = FactoryMaker;","map":{"version":3,"sources":["../../../../src/core/FactoryMaker.js"],"names":["FactoryMaker","instance","singletonContexts","singletonFactories","classFactories","context","override","obj","name","x","factoriesArray","updateFactory","getFactoryByName","factory","classConstructor","create","merge","getInstance","getSingletonInstance","classInstance","className","extensionObject","extension","parent","extend","setSingletonInstance","deleteSingletonInstances","getSingletonFactory","getSingletonFactoryByName","updateSingletonFactory","getClassFactory","getClassFactoryByName","updateClassFactory"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @module FactoryMaker\n * @ignore\n */\nconst FactoryMaker = (function () {\n\n    let instance;\n    let singletonContexts = [];\n    const singletonFactories = {};\n    const classFactories = {};\n\n    function extend(name, childInstance, override, context) {\n        if (!context[name] && childInstance) {\n            context[name] = {\n                instance: childInstance,\n                override: override\n            };\n        }\n    }\n\n    /**\n     * Use this method from your extended object.  this.factory is injected into your object.\n     * this.factory.getSingletonInstance(this.context, 'VideoModel')\n     * will return the video model for use in the extended object.\n     *\n     * @param {Object} context - injected into extended object as this.context\n     * @param {string} className - string name found in all dash.js objects\n     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\n     * @returns {*} Context aware instance of specified singleton name.\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function getSingletonInstance(context, className) {\n        for (const i in singletonContexts) {\n            const obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                return obj.instance;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\n     *\n     * @param {Object} context\n     * @param {string} className\n     * @param {Object} instance\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function setSingletonInstance(context, className, instance) {\n        for (const i in singletonContexts) {\n            const obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                singletonContexts[i].instance = instance;\n                return;\n            }\n        }\n        singletonContexts.push({\n            name: className,\n            context: context,\n            instance: instance\n        });\n    }\n\n    /**\n     * Use this method to remove all singleton instances associated with a particular context.\n     *\n     * @param {Object} context\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function deleteSingletonInstances(context) {\n        singletonContexts = singletonContexts.filter(x => x.context !== context);\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Factories storage Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function getFactoryByName(name, factoriesArray) {\n        return factoriesArray[name];\n    }\n\n    function updateFactory(name, factory, factoriesArray) {\n        if (name in factoriesArray) {\n            factoriesArray[name] = factory;\n        }\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Class Factories Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateClassFactory(name, factory) {\n        updateFactory(name, factory, classFactories);\n    }\n\n    function getClassFactoryByName(name) {\n        return getFactoryByName(name, classFactories);\n    }\n\n    function getClassFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);\n\n        if (!factory) {\n            factory = function (context) {\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    create: function () {\n                        return merge(classConstructor, context, arguments);\n                    }\n                };\n            };\n\n            classFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\n        }\n        return factory;\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Singleton Factory MAangement\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateSingletonFactory(name, factory) {\n        updateFactory(name, factory, singletonFactories);\n    }\n\n    function getSingletonFactoryByName(name) {\n        return getFactoryByName(name, singletonFactories);\n    }\n\n    function getSingletonFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);\n        if (!factory) {\n            factory = function (context) {\n                let instance;\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    getInstance: function () {\n                        // If we don't have an instance yet check for one on the context\n                        if (!instance) {\n                            instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\n                        }\n                        // If there's no instance on the context then create one\n                        if (!instance) {\n                            instance = merge(classConstructor, context, arguments);\n                            singletonContexts.push({\n                                name: classConstructor.__dashjs_factory_name,\n                                context: context,\n                                instance: instance\n                            });\n                        }\n                        return instance;\n                    }\n                };\n            };\n            singletonFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\n        }\n\n        return factory;\n    }\n\n    function merge(classConstructor, context, args) {\n\n        let classInstance;\n        const className = classConstructor.__dashjs_factory_name;\n        const extensionObject = context[className];\n\n        if (extensionObject) {\n\n            let extension = extensionObject.instance;\n\n            if (extensionObject.override) { //Override public methods in parent but keep parent.\n\n                classInstance = classConstructor.apply({context}, args);\n                extension = extension.apply({\n                    context,\n                    factory: instance,\n                    parent: classInstance\n                }, args);\n\n                for (const prop in extension) {\n                    if (classInstance.hasOwnProperty(prop)) {\n                        classInstance[prop] = extension[prop];\n                    }\n                }\n\n            } else { //replace parent object completely with new object. Same as dijon.\n\n                return extension.apply({\n                    context,\n                    factory: instance\n                }, args);\n\n            }\n        } else {\n            // Create new instance of the class\n            classInstance = classConstructor.apply({context}, args);\n        }\n\n        // Add getClassName function to class instance prototype (used by Debug)\n        classInstance.getClassName = function () {return className;};\n\n        return classInstance;\n    }\n\n    instance = {\n        extend: extend,\n        getSingletonInstance: getSingletonInstance,\n        setSingletonInstance: setSingletonInstance,\n        deleteSingletonInstances: deleteSingletonInstances,\n        getSingletonFactory: getSingletonFactory,\n        getSingletonFactoryByName: getSingletonFactoryByName,\n        updateSingletonFactory: updateSingletonFactory,\n        getClassFactory: getClassFactory,\n        getClassFactoryByName: getClassFactoryByName,\n        updateClassFactory: updateClassFactory\n    };\n\n    return instance;\n\n}());\n\nexport default FactoryMaker;\n"]},"metadata":{},"sourceType":"script"}