{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _CustomTimeRanges = require('../../utils/CustomTimeRanges');\n\nvar _CustomTimeRanges2 = _interopRequireDefault(_CustomTimeRanges);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction RangeController(config) {\n  config = config || {};\n  var useWallClockTime = false;\n  var context = this.context;\n  var instance = void 0,\n      ranges = void 0;\n  var mediaElement = config.mediaElement;\n\n  function initialize(rs) {\n    if (rs && rs.length) {\n      rs.forEach(function (r) {\n        var start = r.starttime;\n        var end = start + r.duration;\n        ranges.add(start, end);\n      });\n      useWallClockTime = !!rs[0]._useWallClockTime;\n    }\n  }\n\n  function reset() {\n    ranges.clear();\n  }\n\n  function setup() {\n    ranges = (0, _CustomTimeRanges2.default)(context).create();\n  }\n\n  function isEnabled() {\n    var numRanges = ranges.length;\n    var time = void 0;\n\n    if (!numRanges) {\n      return true;\n    } // When not present, DASH Metrics reporting is requested\n    // for the whole duration of the content.\n\n\n    time = useWallClockTime ? new Date().getTime() / 1000 : mediaElement.currentTime;\n\n    for (var i = 0; i < numRanges; i += 1) {\n      var start = ranges.start(i);\n      var end = ranges.end(i);\n\n      if (start <= time && time < end) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  instance = {\n    initialize: initialize,\n    reset: reset,\n    isEnabled: isEnabled\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nRangeController.__dashjs_factory_name = 'RangeController';\nexports.default = dashjs.FactoryMaker.getClassFactory(RangeController);\n/* jshint ignore:line */","map":{"version":3,"sources":["../../../../../../src/streaming/metrics/controllers/RangeController.js"],"names":["config","useWallClockTime","context","instance","ranges","mediaElement","rs","start","r","end","numRanges","time","i","initialize","reset","isEnabled","setup","RangeController","dashjs"],"mappings":";;;;;;AA+BA,IAAA,iBAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;;;;;;;AAEA;;AAAA,SAAA,eAAA,CAAA,MAAA,EAAiC;AAE7BA,EAAAA,MAAAA,GAASA,MAAAA,IAATA,EAAAA;AACA,MAAIC,gBAAAA,GAAJ,KAAA;AACA,MAAIC,OAAAA,GAAU,KAAd,OAAA;AACA,MAAIC,QAAAA,GAAAA,KAAJ,CAAA;AAAA,MACIC,MAAAA,GAAAA,KADJ,CAAA;AAGA,MAAIC,YAAAA,GAAeL,MAAAA,CAAnB,YAAA;;AAEA,WAAA,UAAA,CAAA,EAAA,EAAwB;AACpB,QAAIM,EAAAA,IAAMA,EAAAA,CAAV,MAAA,EAAqB;AACjBA,MAAAA,EAAAA,CAAAA,OAAAA,CAAW,UAAA,CAAA,EAAK;AACZ,YAAIC,KAAAA,GAAQC,CAAAA,CAAZ,SAAA;AACA,YAAIC,GAAAA,GAAMF,KAAAA,GAAQC,CAAAA,CAAlB,QAAA;AAEAJ,QAAAA,MAAAA,CAAAA,GAAAA,CAAAA,KAAAA,EAAAA,GAAAA;AAJJE,OAAAA;AAOAL,MAAAA,gBAAAA,GAAmB,CAAC,CAACK,EAAAA,CAAAA,CAAAA,CAAAA,CAArBL,iBAAAA;AAEP;AAED;;AAAA,WAAA,KAAA,GAAiB;AACbG,IAAAA,MAAAA,CAAAA,KAAAA;AAGJ;;AAAA,WAAA,KAAA,GAAiB;AACbA,IAAAA,MAAAA,GAAS,CAAA,GAAA,kBAAA,CAAA,OAAA,EAAA,OAAA,EAATA,MAAS,EAATA;AAGJ;;AAAA,WAAA,SAAA,GAAqB;AACjB,QAAIM,SAAAA,GAAYN,MAAAA,CAAhB,MAAA;AACA,QAAIO,IAAAA,GAAAA,KAAJ,CAAA;;AAEA,QAAI,CAAJ,SAAA,EAAgB;AACZ,aAAA,IAAA;AAGJ,KARiB,CAQjB;AACA;;;AACAA,IAAAA,IAAAA,GAAOV,gBAAAA,GACE,IAAA,IAAA,GAAA,OAAA,KADFA,IAAAA,GAECI,YAAAA,CAFRM,WAAAA;;AAIA,SAAK,IAAIC,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,SAAA,EAA+BA,CAAAA,IAA/B,CAAA,EAAuC;AACnC,UAAIL,KAAAA,GAAQH,MAAAA,CAAAA,KAAAA,CAAZ,CAAYA,CAAZ;AACA,UAAIK,GAAAA,GAAML,MAAAA,CAAAA,GAAAA,CAAV,CAAUA,CAAV;;AAEA,UAAKG,KAAAA,IAAD,IAACA,IAAmBI,IAAAA,GAAxB,GAAA,EAAqC;AACjC,eAAA,IAAA;AAEP;AAED;;AAAA,WAAA,KAAA;AAGJR;;AAAAA,EAAAA,QAAAA,GAAW;AACPU,IAAAA,UAAAA,EADO,UAAA;AAEPC,IAAAA,KAAAA,EAFO,KAAA;AAGPC,IAAAA,SAAAA,EAHJZ;AAAW,GAAXA;AAMAa,EAAAA,KAAAA;AAEA,SAAA,QAAA;AAlGJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqGAC,eAAAA,CAAAA,qBAAAA,GAAAA,iBAAAA;kBACeC,MAAAA,CAAAA,YAAAA,CAAAA,eAAAA,CAAAA,eAAAA,C;AAAsD","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport CustomTimeRanges from '../../utils/CustomTimeRanges';\n\nfunction RangeController(config) {\n\n    config = config || {};\n    let useWallClockTime = false;\n    let context = this.context;\n    let instance,\n        ranges;\n\n    let mediaElement = config.mediaElement;\n\n    function initialize(rs) {\n        if (rs && rs.length) {\n            rs.forEach(r => {\n                let start = r.starttime;\n                let end = start + r.duration;\n\n                ranges.add(start, end);\n            });\n\n            useWallClockTime = !!rs[0]._useWallClockTime;\n        }\n    }\n\n    function reset() {\n        ranges.clear();\n    }\n\n    function setup() {\n        ranges = CustomTimeRanges(context).create();\n    }\n\n    function isEnabled() {\n        let numRanges = ranges.length;\n        let time;\n\n        if (!numRanges) {\n            return true;\n        }\n\n        // When not present, DASH Metrics reporting is requested\n        // for the whole duration of the content.\n        time = useWallClockTime ?\n                (new Date().getTime() / 1000) :\n                mediaElement.currentTime;\n\n        for (let i = 0; i < numRanges; i += 1) {\n            let start = ranges.start(i);\n            let end = ranges.end(i);\n\n            if ((start <= time) && (time < end)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset,\n        isEnabled:  isEnabled\n    };\n\n    setup();\n\n    return instance;\n}\n\nRangeController.__dashjs_factory_name = 'RangeController';\nexport default dashjs.FactoryMaker.getClassFactory(RangeController); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}