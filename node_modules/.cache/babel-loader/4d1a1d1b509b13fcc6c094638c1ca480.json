{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _SwitchRequest = require('../SwitchRequest');\n\nvar _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);\n\nvar _FactoryMaker = require('../../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Debug = require('../../../core/Debug');\n\nvar _Debug2 = _interopRequireDefault(_Debug);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction AbandonRequestsRule(config) {\n  config = config || {};\n  var ABANDON_MULTIPLIER = 1.8;\n  var GRACE_TIME_THRESHOLD = 500;\n  var MIN_LENGTH_TO_AVERAGE = 5;\n  var context = this.context;\n  var mediaPlayerModel = config.mediaPlayerModel;\n  var dashMetrics = config.dashMetrics;\n  var settings = config.settings;\n  var instance = void 0,\n      logger = void 0,\n      fragmentDict = void 0,\n      abandonDict = void 0,\n      throughputArray = void 0;\n\n  function setup() {\n    logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);\n    reset();\n  }\n\n  function setFragmentRequestDict(type, id) {\n    fragmentDict[type] = fragmentDict[type] || {};\n    fragmentDict[type][id] = fragmentDict[type][id] || {};\n  }\n\n  function storeLastRequestThroughputByType(type, throughput) {\n    throughputArray[type] = throughputArray[type] || [];\n    throughputArray[type].push(throughput);\n  }\n\n  function shouldAbandon(rulesContext) {\n    var switchRequest = (0, _SwitchRequest2.default)(context).create(_SwitchRequest2.default.NO_CHANGE, {\n      name: AbandonRequestsRule.__dashjs_factory_name\n    });\n\n    if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('getCurrentRequest') || !rulesContext.hasOwnProperty('getRepresentationInfo') || !rulesContext.hasOwnProperty('getAbrController')) {\n      return switchRequest;\n    }\n\n    var mediaInfo = rulesContext.getMediaInfo();\n    var mediaType = rulesContext.getMediaType();\n    var req = rulesContext.getCurrentRequest();\n\n    if (!isNaN(req.index)) {\n      setFragmentRequestDict(mediaType, req.index);\n      var stableBufferTime = mediaPlayerModel.getStableBufferTime();\n      var bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\n\n      if (bufferLevel > stableBufferTime) {\n        return switchRequest;\n      }\n\n      var fragmentInfo = fragmentDict[mediaType][req.index];\n\n      if (fragmentInfo === null || req.firstByteDate === null || abandonDict.hasOwnProperty(fragmentInfo.id)) {\n        return switchRequest;\n      } //setup some init info based on first progress event\n\n\n      if (fragmentInfo.firstByteTime === undefined) {\n        throughputArray[mediaType] = [];\n        fragmentInfo.firstByteTime = req.firstByteDate.getTime();\n        fragmentInfo.segmentDuration = req.duration;\n        fragmentInfo.bytesTotal = req.bytesTotal;\n        fragmentInfo.id = req.index;\n      }\n\n      fragmentInfo.bytesLoaded = req.bytesLoaded;\n      fragmentInfo.elapsedTime = new Date().getTime() - fragmentInfo.firstByteTime;\n\n      if (fragmentInfo.bytesLoaded > 0 && fragmentInfo.elapsedTime > 0) {\n        storeLastRequestThroughputByType(mediaType, Math.round(fragmentInfo.bytesLoaded * 8 / fragmentInfo.elapsedTime));\n      }\n\n      if (throughputArray[mediaType].length >= MIN_LENGTH_TO_AVERAGE && fragmentInfo.elapsedTime > GRACE_TIME_THRESHOLD && fragmentInfo.bytesLoaded < fragmentInfo.bytesTotal) {\n        var totalSampledValue = throughputArray[mediaType].reduce(function (a, b) {\n          return a + b;\n        }, 0);\n        fragmentInfo.measuredBandwidthInKbps = Math.round(totalSampledValue / throughputArray[mediaType].length);\n        fragmentInfo.estimatedTimeOfDownload = +(fragmentInfo.bytesTotal * 8 / fragmentInfo.measuredBandwidthInKbps / 1000).toFixed(2);\n\n        if (fragmentInfo.estimatedTimeOfDownload < fragmentInfo.segmentDuration * ABANDON_MULTIPLIER || rulesContext.getRepresentationInfo().quality === 0) {\n          return switchRequest;\n        } else if (!abandonDict.hasOwnProperty(fragmentInfo.id)) {\n          var abrController = rulesContext.getAbrController();\n          var bytesRemaining = fragmentInfo.bytesTotal - fragmentInfo.bytesLoaded;\n          var bitrateList = abrController.getBitrateList(mediaInfo);\n          var quality = abrController.getQualityForBitrate(mediaInfo, fragmentInfo.measuredBandwidthInKbps * settings.get().streaming.abr.bandwidthSafetyFactor);\n          var minQuality = abrController.getMinAllowedIndexFor(mediaType);\n          var newQuality = minQuality !== undefined ? Math.max(minQuality, quality) : quality;\n          var estimateOtherBytesTotal = fragmentInfo.bytesTotal * bitrateList[newQuality].bitrate / bitrateList[abrController.getQualityFor(mediaType)].bitrate;\n\n          if (bytesRemaining > estimateOtherBytesTotal) {\n            switchRequest.quality = newQuality;\n            switchRequest.reason.throughput = fragmentInfo.measuredBandwidthInKbps;\n            switchRequest.reason.fragmentID = fragmentInfo.id;\n            abandonDict[fragmentInfo.id] = fragmentInfo;\n            logger.debug('[' + mediaType + '] frag id', fragmentInfo.id, ' is asking to abandon and switch to quality to ', newQuality, ' measured bandwidth was', fragmentInfo.measuredBandwidthInKbps);\n            delete fragmentDict[mediaType][fragmentInfo.id];\n          }\n        }\n      } else if (fragmentInfo.bytesLoaded === fragmentInfo.bytesTotal) {\n        delete fragmentDict[mediaType][fragmentInfo.id];\n      }\n    }\n\n    return switchRequest;\n  }\n\n  function reset() {\n    fragmentDict = {};\n    abandonDict = {};\n    throughputArray = [];\n  }\n\n  instance = {\n    shouldAbandon: shouldAbandon,\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nAbandonRequestsRule.__dashjs_factory_name = 'AbandonRequestsRule';\nexports.default = _FactoryMaker2.default.getClassFactory(AbandonRequestsRule);","map":{"version":3,"sources":["../../../../../../src/streaming/rules/abr/AbandonRequestsRule.js"],"names":["config","ABANDON_MULTIPLIER","GRACE_TIME_THRESHOLD","MIN_LENGTH_TO_AVERAGE","context","mediaPlayerModel","dashMetrics","settings","instance","logger","fragmentDict","abandonDict","throughputArray","reset","switchRequest","SwitchRequest","name","AbandonRequestsRule","rulesContext","mediaInfo","mediaType","req","isNaN","setFragmentRequestDict","stableBufferTime","bufferLevel","fragmentInfo","storeLastRequestThroughputByType","Math","totalSampledValue","a","abrController","bytesRemaining","bitrateList","quality","minQuality","newQuality","estimateOtherBytesTotal","shouldAbandon","setup","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport SwitchRequest from '../SwitchRequest';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport Debug from '../../../core/Debug';\n\nfunction AbandonRequestsRule(config) {\n\n    config = config || {};\n    const ABANDON_MULTIPLIER = 1.8;\n    const GRACE_TIME_THRESHOLD = 500;\n    const MIN_LENGTH_TO_AVERAGE = 5;\n\n    const context = this.context;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const dashMetrics = config.dashMetrics;\n    const settings = config.settings;\n\n    let instance,\n        logger,\n        fragmentDict,\n        abandonDict,\n        throughputArray;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        reset();\n    }\n\n    function setFragmentRequestDict(type, id) {\n        fragmentDict[type] = fragmentDict[type] || {};\n        fragmentDict[type][id] = fragmentDict[type][id] || {};\n    }\n\n    function storeLastRequestThroughputByType(type, throughput) {\n        throughputArray[type] = throughputArray[type] || [];\n        throughputArray[type].push(throughput);\n    }\n\n    function shouldAbandon(rulesContext) {\n        const switchRequest = SwitchRequest(context).create(SwitchRequest.NO_CHANGE, {name: AbandonRequestsRule.__dashjs_factory_name});\n\n        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('getCurrentRequest') ||\n            !rulesContext.hasOwnProperty('getRepresentationInfo') || !rulesContext.hasOwnProperty('getAbrController')) {\n            return switchRequest;\n        }\n\n        const mediaInfo = rulesContext.getMediaInfo();\n        const mediaType = rulesContext.getMediaType();\n        const req = rulesContext.getCurrentRequest();\n\n        if (!isNaN(req.index)) {\n            setFragmentRequestDict(mediaType, req.index);\n\n            const stableBufferTime = mediaPlayerModel.getStableBufferTime();\n            const bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\n            if ( bufferLevel > stableBufferTime ) {\n                return switchRequest;\n            }\n\n            const fragmentInfo = fragmentDict[mediaType][req.index];\n            if (fragmentInfo === null || req.firstByteDate === null || abandonDict.hasOwnProperty(fragmentInfo.id)) {\n                return switchRequest;\n            }\n\n            //setup some init info based on first progress event\n            if (fragmentInfo.firstByteTime === undefined) {\n                throughputArray[mediaType] = [];\n                fragmentInfo.firstByteTime = req.firstByteDate.getTime();\n                fragmentInfo.segmentDuration = req.duration;\n                fragmentInfo.bytesTotal = req.bytesTotal;\n                fragmentInfo.id = req.index;\n            }\n            fragmentInfo.bytesLoaded = req.bytesLoaded;\n            fragmentInfo.elapsedTime = new Date().getTime() - fragmentInfo.firstByteTime;\n\n            if (fragmentInfo.bytesLoaded > 0 && fragmentInfo.elapsedTime > 0) {\n                storeLastRequestThroughputByType(mediaType, Math.round(fragmentInfo.bytesLoaded * 8 / fragmentInfo.elapsedTime));\n            }\n\n            if (throughputArray[mediaType].length >= MIN_LENGTH_TO_AVERAGE &&\n                fragmentInfo.elapsedTime > GRACE_TIME_THRESHOLD &&\n                fragmentInfo.bytesLoaded < fragmentInfo.bytesTotal) {\n\n                const totalSampledValue = throughputArray[mediaType].reduce((a, b) => a + b, 0);\n                fragmentInfo.measuredBandwidthInKbps = Math.round(totalSampledValue / throughputArray[mediaType].length);\n                fragmentInfo.estimatedTimeOfDownload = +((fragmentInfo.bytesTotal * 8 / fragmentInfo.measuredBandwidthInKbps) / 1000).toFixed(2);\n\n                if (fragmentInfo.estimatedTimeOfDownload < fragmentInfo.segmentDuration * ABANDON_MULTIPLIER || rulesContext.getRepresentationInfo().quality === 0 ) {\n                    return switchRequest;\n                } else if (!abandonDict.hasOwnProperty(fragmentInfo.id)) {\n\n                    const abrController = rulesContext.getAbrController();\n                    const bytesRemaining = fragmentInfo.bytesTotal - fragmentInfo.bytesLoaded;\n                    const bitrateList = abrController.getBitrateList(mediaInfo);\n                    const quality = abrController.getQualityForBitrate(mediaInfo, fragmentInfo.measuredBandwidthInKbps * settings.get().streaming.abr.bandwidthSafetyFactor);\n                    const minQuality = abrController.getMinAllowedIndexFor(mediaType);\n                    const newQuality = (minQuality !== undefined) ? Math.max(minQuality, quality) : quality;\n                    const estimateOtherBytesTotal = fragmentInfo.bytesTotal * bitrateList[newQuality].bitrate / bitrateList[abrController.getQualityFor(mediaType)].bitrate;\n\n                    if (bytesRemaining > estimateOtherBytesTotal) {\n                        switchRequest.quality = newQuality;\n                        switchRequest.reason.throughput = fragmentInfo.measuredBandwidthInKbps;\n                        switchRequest.reason.fragmentID = fragmentInfo.id;\n                        abandonDict[fragmentInfo.id] = fragmentInfo;\n                        logger.debug('[' + mediaType + '] frag id',fragmentInfo.id,' is asking to abandon and switch to quality to ', newQuality, ' measured bandwidth was', fragmentInfo.measuredBandwidthInKbps);\n                        delete fragmentDict[mediaType][fragmentInfo.id];\n                    }\n                }\n            } else if (fragmentInfo.bytesLoaded === fragmentInfo.bytesTotal) {\n                delete fragmentDict[mediaType][fragmentInfo.id];\n            }\n        }\n\n        return switchRequest;\n    }\n\n    function reset() {\n        fragmentDict = {};\n        abandonDict = {};\n        throughputArray = [];\n    }\n\n    instance = {\n        shouldAbandon: shouldAbandon,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nAbandonRequestsRule.__dashjs_factory_name = 'AbandonRequestsRule';\nexport default FactoryMaker.getClassFactory(AbandonRequestsRule);\n"]},"metadata":{},"sourceType":"script"}