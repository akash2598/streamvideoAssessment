{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Constants = require('../constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _Thumbnail = require('../vo/Thumbnail');\n\nvar _Thumbnail2 = _interopRequireDefault(_Thumbnail);\n\nvar _ThumbnailTracks = require('./ThumbnailTracks');\n\nvar _ThumbnailTracks2 = _interopRequireDefault(_ThumbnailTracks);\n\nvar _BitrateInfo = require('../vo/BitrateInfo');\n\nvar _BitrateInfo2 = _interopRequireDefault(_BitrateInfo);\n\nvar _SegmentsUtils = require('../../dash/utils/SegmentsUtils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nfunction ThumbnailController(config) {\n  var context = this.context;\n  var streamInfo = config.streamInfo;\n  var instance = void 0,\n      thumbnailTracks = void 0;\n\n  function setup() {\n    reset();\n    thumbnailTracks = (0, _ThumbnailTracks2.default)(context).create({\n      streamInfo: streamInfo,\n      adapter: config.adapter,\n      baseURLController: config.baseURLController,\n      timelineConverter: config.timelineConverter,\n      debug: config.debug,\n      eventBus: config.eventBus,\n      events: config.events,\n      dashConstants: config.dashConstants\n    });\n  }\n\n  function getStreamId() {\n    return streamInfo.id;\n  }\n\n  function provideThumbnail(time, callback) {\n    if (typeof callback !== 'function') {\n      return;\n    }\n\n    var track = thumbnailTracks.getCurrentTrack();\n    var offset = void 0,\n        request = void 0;\n\n    if (!track || track.segmentDuration <= 0 || time === undefined || time === null) {\n      callback(null);\n      return;\n    } // Calculate index of the sprite given a time\n\n\n    if (isNaN(track.segmentDuration)) {\n      request = thumbnailTracks.getThumbnailRequestForTime(time);\n\n      if (request) {\n        track.segmentDuration = request.duration;\n      }\n    }\n\n    offset = time % track.segmentDuration;\n    var thumbIndex = Math.floor(offset * track.tilesHor * track.tilesVert / track.segmentDuration); // Create and return the thumbnail\n\n    var thumbnail = new _Thumbnail2.default();\n    thumbnail.width = Math.floor(track.widthPerTile);\n    thumbnail.height = Math.floor(track.heightPerTile);\n    thumbnail.x = Math.floor(thumbIndex % track.tilesHor) * track.widthPerTile;\n    thumbnail.y = Math.floor(thumbIndex / track.tilesHor) * track.heightPerTile;\n\n    if ('readThumbnail' in track) {\n      return track.readThumbnail(time, function (url) {\n        thumbnail.url = url;\n        callback(thumbnail);\n      });\n    } else {\n      if (!request) {\n        var seq = Math.floor(time / track.segmentDuration);\n        thumbnail.url = buildUrlFromTemplate(track, seq);\n      } else {\n        thumbnail.url = request.url;\n        track.segmentDuration = NaN;\n      }\n\n      callback(thumbnail);\n    }\n  }\n\n  function buildUrlFromTemplate(track, seq) {\n    var seqIdx = seq + track.startNumber;\n    var url = (0, _SegmentsUtils.replaceTokenForTemplate)(track.templateUrl, 'Number', seqIdx);\n    url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, 'Time', (seqIdx - 1) * track.segmentDuration * track.timescale);\n    url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, 'Bandwidth', track.bandwidth);\n    return (0, _SegmentsUtils.unescapeDollarsInTemplate)(url);\n  }\n\n  function setTrackByIndex(index) {\n    thumbnailTracks.setTrackByIndex(index);\n  }\n\n  function getCurrentTrackIndex() {\n    return thumbnailTracks.getCurrentTrackIndex();\n  }\n\n  function getBitrateList() {\n    var tracks = thumbnailTracks.getTracks();\n    var i = 0;\n    return tracks.map(function (t) {\n      var bitrateInfo = new _BitrateInfo2.default();\n      bitrateInfo.mediaType = _Constants2.default.IMAGE;\n      bitrateInfo.qualityIndex = i++;\n      bitrateInfo.bitrate = t.bitrate;\n      bitrateInfo.width = t.width;\n      bitrateInfo.height = t.height;\n      return bitrateInfo;\n    });\n  }\n\n  function reset() {\n    if (thumbnailTracks) {\n      thumbnailTracks.reset();\n    }\n  }\n\n  instance = {\n    getStreamId: getStreamId,\n    provide: provideThumbnail,\n    setTrackByIndex: setTrackByIndex,\n    getCurrentTrackIndex: getCurrentTrackIndex,\n    getBitrateList: getBitrateList,\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n\nThumbnailController.__dashjs_factory_name = 'ThumbnailController';\nexports.default = _FactoryMaker2.default.getClassFactory(ThumbnailController);","map":{"version":3,"sources":["../../../../../src/streaming/thumbnail/ThumbnailController.js"],"names":["context","streamInfo","config","instance","thumbnailTracks","reset","adapter","baseURLController","timelineConverter","debug","eventBus","events","dashConstants","track","offset","request","time","callback","isNaN","thumbIndex","Math","thumbnail","Thumbnail","seq","buildUrlFromTemplate","seqIdx","url","tracks","i","bitrateInfo","BitrateInfo","Constants","t","getStreamId","provide","setTrackByIndex","getCurrentTrackIndex","getBitrateList","setup","ThumbnailController","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Constants from '../constants/Constants';\nimport Thumbnail from '../vo/Thumbnail';\nimport ThumbnailTracks from './ThumbnailTracks';\nimport BitrateInfo from '../vo/BitrateInfo';\nimport { replaceTokenForTemplate, unescapeDollarsInTemplate } from '../../dash/utils/SegmentsUtils';\n\nfunction ThumbnailController(config) {\n\n    const context = this.context;\n    const streamInfo = config.streamInfo;\n\n    let instance,\n        thumbnailTracks;\n\n    function setup() {\n        reset();\n        thumbnailTracks = ThumbnailTracks(context).create({\n            streamInfo: streamInfo,\n            adapter: config.adapter,\n            baseURLController: config.baseURLController,\n            timelineConverter: config.timelineConverter,\n            debug: config.debug,\n            eventBus: config.eventBus,\n            events: config.events,\n            dashConstants: config.dashConstants\n        });\n    }\n\n    function getStreamId() {\n        return streamInfo.id;\n    }\n\n    function provideThumbnail(time, callback) {\n\n        if (typeof callback !== 'function') {\n            return;\n        }\n        const track = thumbnailTracks.getCurrentTrack();\n        let offset,\n            request;\n        if (!track || track.segmentDuration <= 0 || time === undefined || time === null) {\n            callback(null);\n            return;\n        }\n\n        // Calculate index of the sprite given a time\n        if (isNaN(track.segmentDuration)) {\n            request = thumbnailTracks.getThumbnailRequestForTime(time);\n            if (request) {\n                track.segmentDuration = request.duration;\n            }\n        }\n\n        offset = time % track.segmentDuration;\n\n        const thumbIndex = Math.floor((offset * track.tilesHor * track.tilesVert) / track.segmentDuration);\n        // Create and return the thumbnail\n        const thumbnail = new Thumbnail();\n\n        thumbnail.width = Math.floor(track.widthPerTile);\n        thumbnail.height = Math.floor(track.heightPerTile);\n        thumbnail.x = Math.floor(thumbIndex % track.tilesHor) * track.widthPerTile;\n        thumbnail.y = Math.floor(thumbIndex / track.tilesHor) * track.heightPerTile;\n\n        if ('readThumbnail' in track) {\n            return track.readThumbnail(time, (url) => {\n                thumbnail.url = url;\n                callback(thumbnail);\n            });\n        } else {\n            if (!request) {\n                const seq = Math.floor(time / track.segmentDuration);\n                thumbnail.url = buildUrlFromTemplate(track, seq);\n            } else {\n                thumbnail.url = request.url;\n                track.segmentDuration = NaN;\n            }\n            callback(thumbnail);\n        }\n    }\n\n    function buildUrlFromTemplate(track, seq) {\n        const seqIdx = seq + track.startNumber;\n        let url = replaceTokenForTemplate(track.templateUrl, 'Number', seqIdx);\n        url = replaceTokenForTemplate(url, 'Time', (seqIdx - 1) * track.segmentDuration * track.timescale);\n        url = replaceTokenForTemplate(url, 'Bandwidth', track.bandwidth);\n        return unescapeDollarsInTemplate(url);\n    }\n\n    function setTrackByIndex(index) {\n        thumbnailTracks.setTrackByIndex(index);\n    }\n\n    function getCurrentTrackIndex() {\n        return thumbnailTracks.getCurrentTrackIndex();\n    }\n\n    function getBitrateList() {\n        const tracks = thumbnailTracks.getTracks();\n        let i = 0;\n\n        return tracks.map((t) => {\n            const bitrateInfo = new BitrateInfo();\n            bitrateInfo.mediaType = Constants.IMAGE;\n            bitrateInfo.qualityIndex = i++;\n            bitrateInfo.bitrate = t.bitrate;\n            bitrateInfo.width = t.width;\n            bitrateInfo.height = t.height;\n            return bitrateInfo;\n        });\n    }\n\n    function reset() {\n        if (thumbnailTracks) {\n            thumbnailTracks.reset();\n        }\n    }\n\n    instance = {\n        getStreamId: getStreamId,\n        provide: provideThumbnail,\n        setTrackByIndex: setTrackByIndex,\n        getCurrentTrackIndex: getCurrentTrackIndex,\n        getBitrateList: getBitrateList,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nThumbnailController.__dashjs_factory_name = 'ThumbnailController';\nexport default FactoryMaker.getClassFactory(ThumbnailController);\n"]},"metadata":{},"sourceType":"script"}