{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _SegmentBaseLoader = require('../SegmentBaseLoader');\n\nvar _SegmentBaseLoader2 = _interopRequireDefault(_SegmentBaseLoader);\n\nvar _WebmSegmentBaseLoader = require('../WebmSegmentBaseLoader');\n\nvar _WebmSegmentBaseLoader2 = _interopRequireDefault(_WebmSegmentBaseLoader);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction SegmentBaseController(config) {\n  config = config || {};\n  var context = this.context;\n  var eventBus = config.eventBus;\n  var events = config.events;\n  var dashMetrics = config.dashMetrics;\n  var mediaPlayerModel = config.mediaPlayerModel;\n  var errHandler = config.errHandler;\n  var baseURLController = config.baseURLController;\n  var debug = config.debug;\n  var boxParser = config.boxParser;\n  var requestModifier = config.requestModifier;\n  var errors = config.errors;\n  var instance = void 0,\n      segmentBaseLoader = void 0,\n      webmSegmentBaseLoader = void 0;\n\n  function setup() {\n    segmentBaseLoader = (0, _SegmentBaseLoader2.default)(context).getInstance();\n    webmSegmentBaseLoader = (0, _WebmSegmentBaseLoader2.default)(context).getInstance();\n    segmentBaseLoader.setConfig({\n      baseURLController: baseURLController,\n      dashMetrics: dashMetrics,\n      mediaPlayerModel: mediaPlayerModel,\n      errHandler: errHandler,\n      eventBus: eventBus,\n      events: events,\n      errors: errors,\n      debug: debug,\n      boxParser: boxParser,\n      requestModifier: requestModifier\n    });\n    webmSegmentBaseLoader.setConfig({\n      baseURLController: baseURLController,\n      dashMetrics: dashMetrics,\n      mediaPlayerModel: mediaPlayerModel,\n      errHandler: errHandler,\n      eventBus: eventBus,\n      events: events,\n      errors: errors,\n      debug: debug,\n      requestModifier: requestModifier\n    });\n  }\n\n  function isWebM(mimeType) {\n    var type = mimeType ? mimeType.split('/')[1] : '';\n    return 'webm' === type.toLowerCase();\n  }\n\n  function initialize() {\n    eventBus.on(events.SEGMENTBASE_INIT_REQUEST_NEEDED, onInitSegmentBaseNeeded, instance);\n    eventBus.on(events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, onSegmentsListSegmentBaseNeeded, instance);\n    segmentBaseLoader.initialize();\n    webmSegmentBaseLoader.initialize();\n  }\n\n  function onInitSegmentBaseNeeded(e) {\n    if (isWebM(e.mimeType)) {\n      webmSegmentBaseLoader.loadInitialization(e.streamId, e.mediaType, e.representation);\n    } else {\n      segmentBaseLoader.loadInitialization(e.streamId, e.mediaType, e.representation);\n    }\n  }\n\n  function onSegmentsListSegmentBaseNeeded(e) {\n    if (isWebM(e.mimeType)) {\n      webmSegmentBaseLoader.loadSegments(e.streamId, e.mediaType, e.representation, e.representation ? e.representation.indexRange : null, e.callback);\n    } else {\n      segmentBaseLoader.loadSegments(e.streamId, e.mediaType, e.representation, e.representation ? e.representation.indexRange : null, e.callback);\n    }\n  }\n\n  function reset() {\n    eventBus.off(events.SEGMENTBASE_INIT_REQUEST_NEEDED, onInitSegmentBaseNeeded, instance);\n    eventBus.off(events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, onSegmentsListSegmentBaseNeeded, instance);\n  }\n\n  instance = {\n    initialize: initialize,\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nSegmentBaseController.__dashjs_factory_name = 'SegmentBaseController';\n\nvar factory = _FactoryMaker2.default.getSingletonFactory(SegmentBaseController);\n\nexports.default = factory;","map":{"version":3,"sources":["../../../../../src/dash/controllers/SegmentBaseController.js"],"names":["config","context","eventBus","events","dashMetrics","mediaPlayerModel","errHandler","baseURLController","debug","boxParser","requestModifier","errors","instance","segmentBaseLoader","webmSegmentBaseLoader","type","mimeType","isWebM","e","initialize","reset","setup","SegmentBaseController","factory","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\n\nimport SegmentBaseLoader from '../SegmentBaseLoader';\nimport WebmSegmentBaseLoader from '../WebmSegmentBaseLoader';\n\nfunction SegmentBaseController(config) {\n    config = config || {};\n\n    const context = this.context;\n    const eventBus = config.eventBus;\n    const events = config.events;\n    const dashMetrics = config.dashMetrics;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const errHandler = config.errHandler;\n    const baseURLController = config.baseURLController;\n    const debug = config.debug;\n    const boxParser = config.boxParser;\n    const requestModifier = config.requestModifier;\n    const errors = config.errors;\n\n    let instance,\n        segmentBaseLoader,\n        webmSegmentBaseLoader;\n\n    function setup() {\n        segmentBaseLoader = SegmentBaseLoader(context).getInstance();\n        webmSegmentBaseLoader = WebmSegmentBaseLoader(context).getInstance();\n\n        segmentBaseLoader.setConfig({\n            baseURLController: baseURLController,\n            dashMetrics: dashMetrics,\n            mediaPlayerModel: mediaPlayerModel,\n            errHandler: errHandler,\n            eventBus: eventBus,\n            events: events,\n            errors: errors,\n            debug: debug,\n            boxParser: boxParser,\n            requestModifier: requestModifier\n        });\n\n        webmSegmentBaseLoader.setConfig({\n            baseURLController: baseURLController,\n            dashMetrics: dashMetrics,\n            mediaPlayerModel: mediaPlayerModel,\n            errHandler: errHandler,\n            eventBus: eventBus,\n            events: events,\n            errors: errors,\n            debug: debug,\n            requestModifier: requestModifier\n        });\n    }\n\n    function isWebM(mimeType) {\n        const type = mimeType ? mimeType.split('/')[1] : '';\n        return 'webm' === type.toLowerCase();\n    }\n\n    function initialize() {\n        eventBus.on(events.SEGMENTBASE_INIT_REQUEST_NEEDED, onInitSegmentBaseNeeded, instance);\n        eventBus.on(events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, onSegmentsListSegmentBaseNeeded, instance);\n\n        segmentBaseLoader.initialize();\n        webmSegmentBaseLoader.initialize();\n    }\n\n    function onInitSegmentBaseNeeded(e) {\n        if (isWebM(e.mimeType)) {\n            webmSegmentBaseLoader.loadInitialization(e.streamId, e.mediaType, e.representation);\n        } else {\n            segmentBaseLoader.loadInitialization(e.streamId, e.mediaType, e.representation);\n        }\n    }\n\n    function onSegmentsListSegmentBaseNeeded(e) {\n        if (isWebM(e.mimeType)) {\n            webmSegmentBaseLoader.loadSegments(e.streamId, e.mediaType, e.representation, e.representation ? e.representation.indexRange : null, e.callback);\n        } else {\n            segmentBaseLoader.loadSegments(e.streamId, e.mediaType, e.representation, e.representation ? e.representation.indexRange : null, e.callback);\n        }\n    }\n\n    function reset() {\n        eventBus.off(events.SEGMENTBASE_INIT_REQUEST_NEEDED, onInitSegmentBaseNeeded, instance);\n        eventBus.off(events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, onSegmentsListSegmentBaseNeeded, instance);\n    }\n\n    instance = {\n        initialize: initialize,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nSegmentBaseController.__dashjs_factory_name = 'SegmentBaseController';\nconst factory = FactoryMaker.getSingletonFactory(SegmentBaseController);\nexport default factory;\n"]},"metadata":{},"sourceType":"script"}