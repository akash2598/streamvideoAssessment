{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _EventBus = require('./EventBus');\n\nvar _EventBus2 = _interopRequireDefault(_EventBus);\n\nvar _Events = require('./events/Events');\n\nvar _Events2 = _interopRequireDefault(_Events);\n\nvar _FactoryMaker = require('./FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar LOG_LEVEL_NONE = 0;\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\nvar LOG_LEVEL_FATAL = 1;\nvar LOG_LEVEL_ERROR = 2;\nvar LOG_LEVEL_WARNING = 3;\nvar LOG_LEVEL_INFO = 4;\nvar LOG_LEVEL_DEBUG = 5;\n/**\n* @module Debug\n* @param {object} config\n* @ignore\n*/\n\nfunction Debug(config) {\n  config = config || {};\n  var context = this.context;\n  var eventBus = (0, _EventBus2.default)(context).getInstance();\n  var settings = config.settings;\n  var logFn = [];\n  var instance = void 0,\n      showLogTimestamp = void 0,\n      showCalleeName = void 0,\n      startTime = void 0;\n\n  function setup() {\n    showLogTimestamp = true;\n    showCalleeName = true;\n    startTime = new Date().getTime();\n\n    if (typeof window !== 'undefined' && window.console) {\n      logFn[LOG_LEVEL_FATAL] = getLogFn(window.console.error);\n      logFn[LOG_LEVEL_ERROR] = getLogFn(window.console.error);\n      logFn[LOG_LEVEL_WARNING] = getLogFn(window.console.warn);\n      logFn[LOG_LEVEL_INFO] = getLogFn(window.console.info);\n      logFn[LOG_LEVEL_DEBUG] = getLogFn(window.console.debug);\n    }\n  }\n\n  function getLogFn(fn) {\n    if (fn && fn.bind) {\n      return fn.bind(window.console);\n    } // if not define, return the default function for reporting logs\n\n\n    return window.console.log.bind(window.console);\n  }\n  /**\n  * Retrieves a logger which can be used to write logging information in browser console.\n  * @param {object} instance Object for which the logger is created. It is used\n  * to include calle object information in log messages.\n  * @memberof module:Debug\n  * @returns {Logger}\n  * @instance\n  */\n\n\n  function getLogger(instance) {\n    return {\n      fatal: fatal.bind(instance),\n      error: error.bind(instance),\n      warn: warn.bind(instance),\n      info: info.bind(instance),\n      debug: debug.bind(instance)\n    };\n  }\n  /**\n  * Prepends a timestamp in milliseconds to each log message.\n  * @param {boolean} value Set to true if you want to see a timestamp in each log message.\n  * @default LOG_LEVEL_WARNING\n  * @memberof module:Debug\n  * @instance\n  */\n\n\n  function setLogTimestampVisible(value) {\n    showLogTimestamp = value;\n  }\n  /**\n  * Prepends the callee object name, and media type if available, to each log message.\n  * @param {boolean} value Set to true if you want to see the callee object name and media type in each log message.\n  * @default true\n  * @memberof module:Debug\n  * @instance\n  */\n\n\n  function setCalleeNameVisible(value) {\n    showCalleeName = value;\n  }\n\n  function fatal() {\n    for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {\n      params[_key] = arguments[_key];\n    }\n\n    doLog.apply(undefined, [LOG_LEVEL_FATAL, this].concat(params));\n  }\n\n  function error() {\n    for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      params[_key2] = arguments[_key2];\n    }\n\n    doLog.apply(undefined, [LOG_LEVEL_ERROR, this].concat(params));\n  }\n\n  function warn() {\n    for (var _len3 = arguments.length, params = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      params[_key3] = arguments[_key3];\n    }\n\n    doLog.apply(undefined, [LOG_LEVEL_WARNING, this].concat(params));\n  }\n\n  function info() {\n    for (var _len4 = arguments.length, params = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      params[_key4] = arguments[_key4];\n    }\n\n    doLog.apply(undefined, [LOG_LEVEL_INFO, this].concat(params));\n  }\n\n  function debug() {\n    for (var _len5 = arguments.length, params = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      params[_key5] = arguments[_key5];\n    }\n\n    doLog.apply(undefined, [LOG_LEVEL_DEBUG, this].concat(params));\n  }\n\n  function doLog(level, _this) {\n    var message = '';\n    var logTime = null;\n\n    if (showLogTimestamp) {\n      logTime = new Date().getTime();\n      message += '[' + (logTime - startTime) + ']';\n    }\n\n    if (showCalleeName && _this && _this.getClassName) {\n      message += '[' + _this.getClassName() + ']';\n\n      if (_this.getType) {\n        message += '[' + _this.getType() + ']';\n      }\n    }\n\n    if (message.length > 0) {\n      message += ' ';\n    }\n\n    for (var _len6 = arguments.length, params = Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {\n      params[_key6 - 2] = arguments[_key6];\n    }\n\n    Array.apply(null, params).forEach(function (item) {\n      message += item + ' ';\n    }); // log to console if the log level is high enough\n\n    if (logFn[level] && settings.get().debug.logLevel >= level) {\n      logFn[level](message);\n    } // send log event regardless of log level\n\n\n    if (settings && settings.get().debug.dispatchEvent) {\n      eventBus.trigger(_Events2.default.LOG, {\n        message: message,\n        level: level\n      });\n    }\n  }\n\n  instance = {\n    getLogger: getLogger,\n    setLogTimestampVisible: setLogTimestampVisible,\n    setCalleeNameVisible: setCalleeNameVisible\n  };\n  setup();\n  return instance;\n}\n\nDebug.__dashjs_factory_name = 'Debug';\n\nvar factory = _FactoryMaker2.default.getSingletonFactory(Debug);\n\nfactory.LOG_LEVEL_NONE = LOG_LEVEL_NONE;\nfactory.LOG_LEVEL_FATAL = LOG_LEVEL_FATAL;\nfactory.LOG_LEVEL_ERROR = LOG_LEVEL_ERROR;\nfactory.LOG_LEVEL_WARNING = LOG_LEVEL_WARNING;\nfactory.LOG_LEVEL_INFO = LOG_LEVEL_INFO;\nfactory.LOG_LEVEL_DEBUG = LOG_LEVEL_DEBUG;\n\n_FactoryMaker2.default.updateSingletonFactory(Debug.__dashjs_factory_name, factory);\n\nexports.default = factory;","map":{"version":3,"sources":["../../../../src/core/Debug.js"],"names":["LOG_LEVEL_NONE","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARNING","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG","config","context","eventBus","settings","logFn","instance","showLogTimestamp","showCalleeName","startTime","window","getLogFn","fn","fatal","error","warn","info","debug","params","doLog","message","logTime","_this","Array","item","Events","level","getLogger","setLogTimestampVisible","setCalleeNameVisible","setup","Debug","factory","FactoryMaker"],"mappings":";;;;;;AA8BA,IAAA,SAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;;;;;;;AAEA;;AAAA,IAAMA,cAAAA,GAAN,CAAA;AAlCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,IAAMC,eAAAA,GAAN,CAAA;AACA,IAAMC,eAAAA,GAAN,CAAA;AACA,IAAMC,iBAAAA,GAAN,CAAA;AACA,IAAMC,cAAAA,GAAN,CAAA;AACA,IAAMC,eAAAA,GAAN,CAAA;AAEA;;;;;;AAKA,SAAA,KAAA,CAAA,MAAA,EAAuB;AAEnBC,EAAAA,MAAAA,GAASA,MAAAA,IAATA,EAAAA;AACA,MAAMC,OAAAA,GAAU,KAAhB,OAAA;AACA,MAAMC,QAAAA,GAAW,CAAA,GAAA,UAAA,CAAA,OAAA,EAAA,OAAA,EAAjB,WAAiB,EAAjB;AACA,MAAMC,QAAAA,GAAWH,MAAAA,CAAjB,QAAA;AAEA,MAAMI,KAAAA,GAAN,EAAA;AAEA,MAAIC,QAAAA,GAAAA,KAAJ,CAAA;AAAA,MACIC,gBAAAA,GAAAA,KADJ,CAAA;AAAA,MAEIC,cAAAA,GAAAA,KAFJ,CAAA;AAAA,MAGIC,SAAAA,GAAAA,KAHJ,CAAA;;AAKA,WAAA,KAAA,GAAiB;AACbF,IAAAA,gBAAAA,GAAAA,IAAAA;AACAC,IAAAA,cAAAA,GAAAA,IAAAA;AACAC,IAAAA,SAAAA,GAAY,IAAA,IAAA,GAAZA,OAAY,EAAZA;;AAEA,QAAI,OAAA,MAAA,KAAA,WAAA,IAAiCC,MAAAA,CAArC,OAAA,EAAqD;AACjDL,MAAAA,KAAAA,CAAAA,eAAAA,CAAAA,GAAyBM,QAAAA,CAASD,MAAAA,CAAAA,OAAAA,CAAlCL,KAAyBM,CAAzBN;AACAA,MAAAA,KAAAA,CAAAA,eAAAA,CAAAA,GAAyBM,QAAAA,CAASD,MAAAA,CAAAA,OAAAA,CAAlCL,KAAyBM,CAAzBN;AACAA,MAAAA,KAAAA,CAAAA,iBAAAA,CAAAA,GAA2BM,QAAAA,CAASD,MAAAA,CAAAA,OAAAA,CAApCL,IAA2BM,CAA3BN;AACAA,MAAAA,KAAAA,CAAAA,cAAAA,CAAAA,GAAwBM,QAAAA,CAASD,MAAAA,CAAAA,OAAAA,CAAjCL,IAAwBM,CAAxBN;AACAA,MAAAA,KAAAA,CAAAA,eAAAA,CAAAA,GAAyBM,QAAAA,CAASD,MAAAA,CAAAA,OAAAA,CAAlCL,KAAyBM,CAAzBN;AAEP;AAED;;AAAA,WAAA,QAAA,CAAA,EAAA,EAAsB;AAClB,QAAIO,EAAAA,IAAMA,EAAAA,CAAV,IAAA,EAAmB;AACf,aAAOA,EAAAA,CAAAA,IAAAA,CAAQF,MAAAA,CAAf,OAAOE,CAAP;AAEJ,KAJkB,CAIlB;;;AACA,WAAOF,MAAAA,CAAAA,OAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAwBA,MAAAA,CAA/B,OAAOA,CAAP;AAGJ;AAAA;;;;;;;;;;AAQA,WAAA,SAAA,CAAA,QAAA,EAA6B;AACzB,WAAO;AACHG,MAAAA,KAAAA,EAAOA,KAAAA,CAAAA,IAAAA,CADJ,QACIA,CADJ;AAEHC,MAAAA,KAAAA,EAAOA,KAAAA,CAAAA,IAAAA,CAFJ,QAEIA,CAFJ;AAGHC,MAAAA,IAAAA,EAAMA,IAAAA,CAAAA,IAAAA,CAHH,QAGGA,CAHH;AAIHC,MAAAA,IAAAA,EAAMA,IAAAA,CAAAA,IAAAA,CAJH,QAIGA,CAJH;AAKHC,MAAAA,KAAAA,EAAOA,KAAAA,CAAAA,IAAAA,CALX,QAKWA;AALJ,KAAP;AASJ;AAAA;;;;;;;;;AAOA,WAAA,sBAAA,CAAA,KAAA,EAAuC;AACnCV,IAAAA,gBAAAA,GAAAA,KAAAA;AAGJ;AAAA;;;;;;;;;AAOA,WAAA,oBAAA,CAAA,KAAA,EAAqC;AACjCC,IAAAA,cAAAA,GAAAA,KAAAA;AAGJ;;AAAA,WAAA,KAAA,GAA0B;AAAA,SAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAARU,MAAQ,GAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAARA,MAAAA,MAAQ,CAAA,IAAA,CAARA,GAAQ,SAAA,CAAA,IAAA,CAARA;AACdC;;AAAAA,IAAAA,KAAAA,CAAAA,KAAAA,CAAAA,SAAAA,EAAAA,CAAAA,eAAAA,EAAAA,IAAAA,EAAAA,MAAAA,CAAAA,MAAAA,CAAAA;AAGJ;;AAAA,WAAA,KAAA,GAA0B;AAAA,SAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EAARD,MAAQ,GAAA,KAAA,CAAA,KAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;AAARA,MAAAA,MAAQ,CAAA,KAAA,CAARA,GAAQ,SAAA,CAAA,KAAA,CAARA;AACdC;;AAAAA,IAAAA,KAAAA,CAAAA,KAAAA,CAAAA,SAAAA,EAAAA,CAAAA,eAAAA,EAAAA,IAAAA,EAAAA,MAAAA,CAAAA,MAAAA,CAAAA;AAGJ;;AAAA,WAAA,IAAA,GAAyB;AAAA,SAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EAARD,MAAQ,GAAA,KAAA,CAAA,KAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;AAARA,MAAAA,MAAQ,CAAA,KAAA,CAARA,GAAQ,SAAA,CAAA,KAAA,CAARA;AACbC;;AAAAA,IAAAA,KAAAA,CAAAA,KAAAA,CAAAA,SAAAA,EAAAA,CAAAA,iBAAAA,EAAAA,IAAAA,EAAAA,MAAAA,CAAAA,MAAAA,CAAAA;AAGJ;;AAAA,WAAA,IAAA,GAAyB;AAAA,SAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EAARD,MAAQ,GAAA,KAAA,CAAA,KAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;AAARA,MAAAA,MAAQ,CAAA,KAAA,CAARA,GAAQ,SAAA,CAAA,KAAA,CAARA;AACbC;;AAAAA,IAAAA,KAAAA,CAAAA,KAAAA,CAAAA,SAAAA,EAAAA,CAAAA,cAAAA,EAAAA,IAAAA,EAAAA,MAAAA,CAAAA,MAAAA,CAAAA;AAGJ;;AAAA,WAAA,KAAA,GAA0B;AAAA,SAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EAARD,MAAQ,GAAA,KAAA,CAAA,KAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;AAARA,MAAAA,MAAQ,CAAA,KAAA,CAARA,GAAQ,SAAA,CAAA,KAAA,CAARA;AACdC;;AAAAA,IAAAA,KAAAA,CAAAA,KAAAA,CAAAA,SAAAA,EAAAA,CAAAA,eAAAA,EAAAA,IAAAA,EAAAA,MAAAA,CAAAA,MAAAA,CAAAA;AAGJ;;AAAA,WAAA,KAAA,CAAA,KAAA,EAAA,KAAA,EAAwC;AACpC,QAAIC,OAAAA,GAAJ,EAAA;AACA,QAAIC,OAAAA,GAAJ,IAAA;;AAEA,QAAA,gBAAA,EAAsB;AAClBA,MAAAA,OAAAA,GAAU,IAAA,IAAA,GAAVA,OAAU,EAAVA;AACAD,MAAAA,OAAAA,IAAW,OAAOC,OAAAA,GAAP,SAAA,IAAXD,GAAAA;AAGJ;;AAAA,QAAIZ,cAAAA,IAAAA,KAAAA,IAA2Bc,KAAAA,CAA/B,YAAA,EAAmD;AAC/CF,MAAAA,OAAAA,IAAW,MAAME,KAAAA,CAAN,YAAMA,EAAN,GAAXF,GAAAA;;AACA,UAAIE,KAAAA,CAAJ,OAAA,EAAmB;AACfF,QAAAA,OAAAA,IAAW,MAAME,KAAAA,CAAN,OAAMA,EAAN,GAAXF,GAAAA;AAEP;AAED;;AAAA,QAAIA,OAAAA,CAAAA,MAAAA,GAAJ,CAAA,EAAwB;AACpBA,MAAAA,OAAAA,IAAAA,GAAAA;AAjBgC;;AAAA,SAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EAARF,MAAQ,GAAA,KAAA,CAAA,KAAA,GAAA,CAAA,GAAA,KAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;AAARA,MAAAA,MAAQ,CAAA,KAAA,GAAA,CAAA,CAARA,GAAQ,SAAA,CAAA,KAAA,CAARA;AAoB5BK;;AAAAA,IAAAA,KAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAAA,OAAAA,CAAkC,UAAA,IAAA,EAAgB;AAC9CH,MAAAA,OAAAA,IAAWI,IAAAA,GAAXJ,GAAAA;AADJG,KAAAA,EApBoC,CAwBpC;;AACA,QAAIlB,KAAAA,CAAAA,KAAAA,CAAAA,IAAgBD,QAAAA,CAAAA,GAAAA,GAAAA,KAAAA,CAAAA,QAAAA,IAApB,KAAA,EAA4D;AACxDC,MAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,OAAAA;AAGJ,KA7BoC,CA6BpC;;;AACA,QAAID,QAAAA,IAAYA,QAAAA,CAAAA,GAAAA,GAAAA,KAAAA,CAAhB,aAAA,EAAoD;AAChDD,MAAAA,QAAAA,CAAAA,OAAAA,CAAiBsB,QAAAA,CAAAA,OAAAA,CAAjBtB,GAAAA,EAA6B;AAAEiB,QAAAA,OAAAA,EAAF,OAAA;AAAoBM,QAAAA,KAAAA,EAAjDvB;AAA6B,OAA7BA;AAEP;AAEDG;;AAAAA,EAAAA,QAAAA,GAAW;AACPqB,IAAAA,SAAAA,EADO,SAAA;AAEPC,IAAAA,sBAAAA,EAFO,sBAAA;AAGPC,IAAAA,oBAAAA,EAHJvB;AAAW,GAAXA;AAMAwB,EAAAA,KAAAA;AAEA,SAAA,QAAA;AAGJC;;AAAAA,KAAAA,CAAAA,qBAAAA,GAAAA,OAAAA;;AAEA,IAAMC,OAAAA,GAAUC,cAAAA,CAAAA,OAAAA,CAAAA,mBAAAA,CAAhB,KAAgBA,CAAhB;;AACAD,OAAAA,CAAAA,cAAAA,GAAAA,cAAAA;AACAA,OAAAA,CAAAA,eAAAA,GAAAA,eAAAA;AACAA,OAAAA,CAAAA,eAAAA,GAAAA,eAAAA;AACAA,OAAAA,CAAAA,iBAAAA,GAAAA,iBAAAA;AACAA,OAAAA,CAAAA,cAAAA,GAAAA,cAAAA;AACAA,OAAAA,CAAAA,eAAAA,GAAAA,eAAAA;;AACAC,cAAAA,CAAAA,OAAAA,CAAAA,sBAAAA,CAAoCF,KAAAA,CAApCE,qBAAAA,EAAAA,OAAAA;;kBACeD,O","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventBus from './EventBus';\nimport Events from './events/Events';\nimport FactoryMaker from './FactoryMaker';\n\nconst LOG_LEVEL_NONE = 0;\nconst LOG_LEVEL_FATAL = 1;\nconst LOG_LEVEL_ERROR = 2;\nconst LOG_LEVEL_WARNING = 3;\nconst LOG_LEVEL_INFO = 4;\nconst LOG_LEVEL_DEBUG = 5;\n\n/**\n * @module Debug\n * @param {object} config\n * @ignore\n */\nfunction Debug(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n    const settings = config.settings;\n\n    const logFn = [];\n\n    let instance,\n        showLogTimestamp,\n        showCalleeName,\n        startTime;\n\n    function setup() {\n        showLogTimestamp = true;\n        showCalleeName = true;\n        startTime = new Date().getTime();\n\n        if (typeof window !== 'undefined' && window.console) {\n            logFn[LOG_LEVEL_FATAL] = getLogFn(window.console.error);\n            logFn[LOG_LEVEL_ERROR] = getLogFn(window.console.error);\n            logFn[LOG_LEVEL_WARNING] = getLogFn(window.console.warn);\n            logFn[LOG_LEVEL_INFO] = getLogFn(window.console.info);\n            logFn[LOG_LEVEL_DEBUG] = getLogFn(window.console.debug);\n        }\n    }\n\n    function getLogFn(fn) {\n        if (fn && fn.bind) {\n            return fn.bind(window.console);\n        }\n        // if not define, return the default function for reporting logs\n        return window.console.log.bind(window.console);\n    }\n\n    /**\n     * Retrieves a logger which can be used to write logging information in browser console.\n     * @param {object} instance Object for which the logger is created. It is used\n     * to include calle object information in log messages.\n     * @memberof module:Debug\n     * @returns {Logger}\n     * @instance\n     */\n    function getLogger(instance) {\n        return {\n            fatal: fatal.bind(instance),\n            error: error.bind(instance),\n            warn: warn.bind(instance),\n            info: info.bind(instance),\n            debug: debug.bind(instance)\n        };\n    }\n\n    /**\n     * Prepends a timestamp in milliseconds to each log message.\n     * @param {boolean} value Set to true if you want to see a timestamp in each log message.\n     * @default LOG_LEVEL_WARNING\n     * @memberof module:Debug\n     * @instance\n     */\n    function setLogTimestampVisible(value) {\n        showLogTimestamp = value;\n    }\n\n    /**\n     * Prepends the callee object name, and media type if available, to each log message.\n     * @param {boolean} value Set to true if you want to see the callee object name and media type in each log message.\n     * @default true\n     * @memberof module:Debug\n     * @instance\n     */\n    function setCalleeNameVisible(value) {\n        showCalleeName = value;\n    }\n\n    function fatal(...params) {\n        doLog(LOG_LEVEL_FATAL, this, ...params);\n    }\n\n    function error(...params) {\n        doLog(LOG_LEVEL_ERROR, this, ...params);\n    }\n\n    function warn(...params) {\n        doLog(LOG_LEVEL_WARNING, this, ...params);\n    }\n\n    function info(...params) {\n        doLog(LOG_LEVEL_INFO, this, ...params);\n    }\n\n    function debug(...params) {\n        doLog(LOG_LEVEL_DEBUG, this, ...params);\n    }\n\n    function doLog(level, _this, ...params) {\n        let message = '';\n        let logTime = null;\n\n        if (showLogTimestamp) {\n            logTime = new Date().getTime();\n            message += '[' + (logTime - startTime) + ']';\n        }\n\n        if (showCalleeName && _this && _this.getClassName) {\n            message += '[' + _this.getClassName() + ']';\n            if (_this.getType) {\n                message += '[' + _this.getType() + ']';\n            }\n        }\n\n        if (message.length > 0) {\n            message += ' ';\n        }\n\n        Array.apply(null, params).forEach(function (item) {\n            message += item + ' ';\n        });\n\n        // log to console if the log level is high enough\n        if (logFn[level] && settings.get().debug.logLevel >= level) {\n            logFn[level](message);\n        }\n\n        // send log event regardless of log level\n        if (settings && settings.get().debug.dispatchEvent) {\n            eventBus.trigger(Events.LOG, { message: message, level: level });\n        }\n    }\n\n    instance = {\n        getLogger: getLogger,\n        setLogTimestampVisible: setLogTimestampVisible,\n        setCalleeNameVisible: setCalleeNameVisible\n    };\n\n    setup();\n\n    return instance;\n}\n\nDebug.__dashjs_factory_name = 'Debug';\n\nconst factory = FactoryMaker.getSingletonFactory(Debug);\nfactory.LOG_LEVEL_NONE = LOG_LEVEL_NONE;\nfactory.LOG_LEVEL_FATAL = LOG_LEVEL_FATAL;\nfactory.LOG_LEVEL_ERROR = LOG_LEVEL_ERROR;\nfactory.LOG_LEVEL_WARNING = LOG_LEVEL_WARNING;\nfactory.LOG_LEVEL_INFO = LOG_LEVEL_INFO;\nfactory.LOG_LEVEL_DEBUG = LOG_LEVEL_DEBUG;\nFactoryMaker.updateSingletonFactory(Debug.__dashjs_factory_name, factory);\nexport default factory;\n"]},"metadata":{},"sourceType":"script"}