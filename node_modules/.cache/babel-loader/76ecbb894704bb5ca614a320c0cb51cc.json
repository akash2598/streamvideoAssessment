{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _BaseMatcher2 = require('./BaseMatcher');\n\nvar _BaseMatcher3 = _interopRequireDefault(_BaseMatcher2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n* @classdesc matches and converts xs:datetime to Date\n*/\n\n\nvar SECONDS_IN_MIN = 60;\nvar MINUTES_IN_HOUR = 60;\nvar MILLISECONDS_IN_SECONDS = 1000;\nvar datetimeRegex = /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\\.[0-9]*)?)?(?:([+-])([0-9]{2})(?::?)([0-9]{2}))?/;\n\nvar DateTimeMatcher = function (_BaseMatcher) {\n  _inherits(DateTimeMatcher, _BaseMatcher);\n\n  function DateTimeMatcher() {\n    _classCallCheck(this, DateTimeMatcher);\n\n    return _possibleConstructorReturn(this, (DateTimeMatcher.__proto__ || Object.getPrototypeOf(DateTimeMatcher)).call(this, function (attr) {\n      return datetimeRegex.test(attr.value);\n    }, function (str) {\n      var match = datetimeRegex.exec(str);\n      var utcDate = void 0; // If the string does not contain a timezone offset different browsers can interpret it either\n      // as UTC or as a local time so we have to parse the string manually to normalize the given date value for\n      // all browsers\n\n      utcDate = Date.UTC(parseInt(match[1], 10), parseInt(match[2], 10) - 1, // months start from zero\n      parseInt(match[3], 10), parseInt(match[4], 10), parseInt(match[5], 10), match[6] && parseInt(match[6], 10) || 0, match[7] && parseFloat(match[7]) * MILLISECONDS_IN_SECONDS || 0); // If the date has timezone offset take it into account as well\n\n      if (match[9] && match[10]) {\n        var timezoneOffset = parseInt(match[9], 10) * MINUTES_IN_HOUR + parseInt(match[10], 10);\n        utcDate += (match[8] === '+' ? -1 : +1) * timezoneOffset * SECONDS_IN_MIN * MILLISECONDS_IN_SECONDS;\n      }\n\n      return new Date(utcDate);\n    }));\n  }\n\n  return DateTimeMatcher;\n}(_BaseMatcher3.default);\n\nexports.default = DateTimeMatcher;","map":{"version":3,"sources":["../../../../../../src/dash/parser/matchers/DateTimeMatcher.js"],"names":["SECONDS_IN_MIN","MINUTES_IN_HOUR","MILLISECONDS_IN_SECONDS","datetimeRegex","DateTimeMatcher","BaseMatcher","attr","match","utcDate","Date","parseInt","parseFloat","timezoneOffset"],"mappings":";;;;;;AAiCA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAjCA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;;AAKA,IAAMA,cAAAA,GAAN,EAAA;AACA,IAAMC,eAAAA,GAAN,EAAA;AACA,IAAMC,uBAAAA,GAAN,IAAA;AAEA,IAAMC,aAAAA,GAAN,uHAAA;;AAEMC,IAAAA,e;;;AACF,WAAA,eAAA,GAAc;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,CAAA;;AAAA,WAAA,0BAAA,CAAA,IAAA,EAAA,CAAA,eAAA,CAAA,SAAA,IAAA,MAAA,CAAA,cAAA,CAAA,eAAA,CAAA,EAAA,IAAA,CAAA,IAAA,EAEN,UAAA,IAAA,EAAA;AAAA,aAAQD,aAAAA,CAAAA,IAAAA,CAAmBG,IAAAA,CAA3B,KAAQH,CAAR;AAFM,KAAA,EAGN,UAAA,GAAA,EAAO;AACH,UAAMI,KAAAA,GAAQJ,aAAAA,CAAAA,IAAAA,CAAd,GAAcA,CAAd;AACA,UAAIK,OAAAA,GAAAA,KAAJ,CAAA,CAFG,CAIH;AACA;AACA;;AACAA,MAAAA,OAAAA,GAAUC,IAAAA,CAAAA,GAAAA,CACNC,QAAAA,CAASH,KAAAA,CAATG,CAASH,CAATG,EADMD,EACNC,CADMD,EAENC,QAAAA,CAASH,KAAAA,CAATG,CAASH,CAATG,EAAAA,EAAAA,CAAAA,GAFMD,CAAAA,EAEsB;AAC5BC,MAAAA,QAAAA,CAASH,KAAAA,CAATG,CAASH,CAATG,EAHMD,EAGNC,CAHMD,EAINC,QAAAA,CAASH,KAAAA,CAATG,CAASH,CAATG,EAJMD,EAINC,CAJMD,EAKNC,QAAAA,CAASH,KAAAA,CAATG,CAASH,CAATG,EALMD,EAKNC,CALMD,EAMLF,KAAAA,CAAAA,CAAAA,CAAAA,IAAYG,QAAAA,CAASH,KAAAA,CAATG,CAASH,CAATG,EAAZH,EAAYG,CAAZH,IANKE,CAAAA,EAOLF,KAAAA,CAAAA,CAAAA,CAAAA,IAAYI,UAAAA,CAAWJ,KAAAA,CAAXI,CAAWJ,CAAXI,CAAAA,GAAb,uBAACJ,IAPLC,CAAUC,CAAVD,CAPG,CAgBH;;AACA,UAAID,KAAAA,CAAAA,CAAAA,CAAAA,IAAYA,KAAAA,CAAhB,EAAgBA,CAAhB,EAA2B;AACvB,YAAMK,cAAAA,GAAiBF,QAAAA,CAASH,KAAAA,CAATG,CAASH,CAATG,EAAAA,EAAAA,CAAAA,GAAAA,eAAAA,GAA2CA,QAAAA,CAASH,KAAAA,CAATG,EAASH,CAATG,EAAlE,EAAkEA,CAAlE;AACAF,QAAAA,OAAAA,IAAW,CAACD,KAAAA,CAAAA,CAAAA,CAAAA,KAAAA,GAAAA,GAAmB,CAAnBA,CAAAA,GAAwB,CAAzB,CAAA,IAAA,cAAA,GAAA,cAAA,GAAXC,uBAAAA;AAGJ;;AAAA,aAAO,IAAA,IAAA,CAAP,OAAO,CAAP;AAzBE,KAAA,CAAA,CAAA;;;;EADYH,aAAAA,CAAAA,O,CAAxBD;;kBAgCSA,e","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc matches and converts xs:datetime to Date\n */\nimport BaseMatcher from './BaseMatcher';\n\nconst SECONDS_IN_MIN = 60;\nconst MINUTES_IN_HOUR = 60;\nconst MILLISECONDS_IN_SECONDS = 1000;\n\nconst datetimeRegex = /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\\.[0-9]*)?)?(?:([+-])([0-9]{2})(?::?)([0-9]{2}))?/;\n\nclass DateTimeMatcher extends BaseMatcher {\n    constructor() {\n        super(\n            attr => datetimeRegex.test(attr.value),\n            str => {\n                const match = datetimeRegex.exec(str);\n                let utcDate;\n\n                // If the string does not contain a timezone offset different browsers can interpret it either\n                // as UTC or as a local time so we have to parse the string manually to normalize the given date value for\n                // all browsers\n                utcDate = Date.UTC(\n                    parseInt(match[1], 10),\n                    parseInt(match[2], 10) - 1, // months start from zero\n                    parseInt(match[3], 10),\n                    parseInt(match[4], 10),\n                    parseInt(match[5], 10),\n                    (match[6] && parseInt(match[6], 10) || 0),\n                    (match[7] && parseFloat(match[7]) * MILLISECONDS_IN_SECONDS) || 0);\n\n                // If the date has timezone offset take it into account as well\n                if (match[9] && match[10]) {\n                    const timezoneOffset = parseInt(match[9], 10) * MINUTES_IN_HOUR + parseInt(match[10], 10);\n                    utcDate += (match[8] === '+' ? -1 : +1) * timezoneOffset * SECONDS_IN_MIN * MILLISECONDS_IN_SECONDS;\n                }\n\n                return new Date(utcDate);\n            }\n        );\n    }\n}\n\nexport default DateTimeMatcher;\n"]},"metadata":{},"sourceType":"script"}