{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ErrorsBase2 = require('./ErrorsBase');\n\nvar _ErrorsBase3 = _interopRequireDefault(_ErrorsBase2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n* Errors declaration\n* @class\n*/\n\n\nvar Errors = function (_ErrorsBase) {\n  _inherits(Errors, _ErrorsBase);\n\n  function Errors() {\n    _classCallCheck(this, Errors);\n    /**\n    * Error code returned when a manifest parsing error occurs\n    */\n\n\n    var _this = _possibleConstructorReturn(this, (Errors.__proto__ || Object.getPrototypeOf(Errors)).call(this));\n\n    _this.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE = 10;\n    /**\n    * Error code returned when a manifest loading error occurs\n    */\n\n    _this.MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE = 11;\n    /**\n    * Error code returned when a xlink loading error occurs\n    */\n\n    _this.XLINK_LOADER_LOADING_FAILURE_ERROR_CODE = 12;\n    /**\n    * Error code returned when the update of segments list has failed\n    */\n\n    _this.SEGMENTS_UPDATE_FAILED_ERROR_CODE = 13;\n    _this.SEGMENTS_UNAVAILABLE_ERROR_CODE = 14;\n    _this.SEGMENT_BASE_LOADER_ERROR_CODE = 15;\n    _this.TIME_SYNC_FAILED_ERROR_CODE = 16;\n    _this.FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE = 17;\n    _this.FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE = 18;\n    _this.URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE = 19;\n    _this.APPEND_ERROR_CODE = 20;\n    _this.REMOVE_ERROR_CODE = 21;\n    _this.DATA_UPDATE_FAILED_ERROR_CODE = 22;\n    /**\n    * Error code returned when MediaSource is not supported by the browser\n    */\n\n    _this.CAPABILITY_MEDIASOURCE_ERROR_CODE = 23;\n    /**\n    * Error code returned when Protected contents are not supported\n    */\n\n    _this.CAPABILITY_MEDIAKEYS_ERROR_CODE = 24;\n    _this.DOWNLOAD_ERROR_ID_MANIFEST_CODE = 25;\n    _this.DOWNLOAD_ERROR_ID_SIDX_CODE = 26;\n    _this.DOWNLOAD_ERROR_ID_CONTENT_CODE = 27;\n    _this.DOWNLOAD_ERROR_ID_INITIALIZATION_CODE = 28;\n    _this.DOWNLOAD_ERROR_ID_XLINK_CODE = 29;\n    _this.MANIFEST_ERROR_ID_CODEC_CODE = 30;\n    _this.MANIFEST_ERROR_ID_PARSE_CODE = 31;\n    /**\n    * Error code returned when no stream (period) has been detected in the manifest\n    */\n\n    _this.MANIFEST_ERROR_ID_NOSTREAMS_CODE = 32;\n    /**\n    * Error code returned when something wrong has append during subtitles parsing (TTML or VTT)\n    */\n\n    _this.TIMED_TEXT_ERROR_ID_PARSE_CODE = 33;\n    /**\n    * Error code returned when a 'muxed' media type has been detected in the manifest. This type is not supported\n    */\n\n    _this.MANIFEST_ERROR_ID_MULTIPLEXED_CODE = 34;\n    /**\n    * Error code returned when a media source type is not supported\n    */\n\n    _this.MEDIASOURCE_TYPE_UNSUPPORTED_CODE = 35;\n    _this.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE = 'parsing failed for ';\n    _this.MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE = 'Failed loading manifest: ';\n    _this.XLINK_LOADER_LOADING_FAILURE_ERROR_MESSAGE = 'Failed loading Xlink element: ';\n    _this.SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE = 'Segments update failed';\n    _this.SEGMENTS_UNAVAILABLE_ERROR_MESSAGE = 'no segments are available yet';\n    _this.SEGMENT_BASE_LOADER_ERROR_MESSAGE = 'error loading segments';\n    _this.TIME_SYNC_FAILED_ERROR_MESSAGE = 'Failed to synchronize time';\n    _this.FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE = 'request is null';\n    _this.URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE = 'Failed to resolve a valid URL';\n    _this.APPEND_ERROR_MESSAGE = 'chunk is not defined';\n    _this.REMOVE_ERROR_MESSAGE = 'buffer is not defined';\n    _this.DATA_UPDATE_FAILED_ERROR_MESSAGE = 'Data update failed';\n    _this.CAPABILITY_MEDIASOURCE_ERROR_MESSAGE = 'mediasource is not supported';\n    _this.CAPABILITY_MEDIAKEYS_ERROR_MESSAGE = 'mediakeys is not supported';\n    _this.TIMED_TEXT_ERROR_MESSAGE_PARSE = 'parsing error :';\n    _this.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE = 'Error creating source buffer of type : ';\n    return _this;\n  }\n\n  return Errors;\n}(_ErrorsBase3.default);\n\nvar errors = new Errors();\nexports.default = errors;","map":{"version":3,"sources":["../../../../../src/core/errors/Errors.js"],"names":["Errors","ErrorsBase","errors"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ErrorsBase from './ErrorsBase';\n/**\n * Errors declaration\n * @class\n */\nclass Errors extends ErrorsBase {\n    constructor () {\n        super();\n        /**\n         * Error code returned when a manifest parsing error occurs\n         */\n        this.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE = 10;\n        /**\n         * Error code returned when a manifest loading error occurs\n         */\n        this.MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE = 11;\n        /**\n         * Error code returned when a xlink loading error occurs\n         */\n        this.XLINK_LOADER_LOADING_FAILURE_ERROR_CODE = 12;\n        /**\n         * Error code returned when the update of segments list has failed\n         */\n        this.SEGMENTS_UPDATE_FAILED_ERROR_CODE = 13;\n        this.SEGMENTS_UNAVAILABLE_ERROR_CODE = 14;\n        this.SEGMENT_BASE_LOADER_ERROR_CODE = 15;\n        this.TIME_SYNC_FAILED_ERROR_CODE = 16;\n        this.FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE = 17;\n        this.FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE = 18;\n        this.URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE = 19;\n        this.APPEND_ERROR_CODE = 20;\n        this.REMOVE_ERROR_CODE = 21;\n        this.DATA_UPDATE_FAILED_ERROR_CODE = 22;\n        /**\n         * Error code returned when MediaSource is not supported by the browser\n         */\n        this.CAPABILITY_MEDIASOURCE_ERROR_CODE = 23;\n        /**\n         * Error code returned when Protected contents are not supported\n         */\n        this.CAPABILITY_MEDIAKEYS_ERROR_CODE   = 24;\n\n        this.DOWNLOAD_ERROR_ID_MANIFEST_CODE   = 25;\n\n        this.DOWNLOAD_ERROR_ID_SIDX_CODE            = 26;\n        this.DOWNLOAD_ERROR_ID_CONTENT_CODE         = 27;\n\n        this.DOWNLOAD_ERROR_ID_INITIALIZATION_CODE  = 28;\n\n        this.DOWNLOAD_ERROR_ID_XLINK_CODE           = 29;\n\n        this.MANIFEST_ERROR_ID_CODEC_CODE           = 30;\n        this.MANIFEST_ERROR_ID_PARSE_CODE           = 31;\n\n        /**\n         * Error code returned when no stream (period) has been detected in the manifest\n         */\n        this.MANIFEST_ERROR_ID_NOSTREAMS_CODE       = 32;\n        /**\n         * Error code returned when something wrong has append during subtitles parsing (TTML or VTT)\n         */\n        this.TIMED_TEXT_ERROR_ID_PARSE_CODE         = 33;\n        /**\n         * Error code returned when a 'muxed' media type has been detected in the manifest. This type is not supported\n         */\n        this.MANIFEST_ERROR_ID_MULTIPLEXED_CODE     = 34;\n        /**\n         * Error code returned when a media source type is not supported\n         */\n        this.MEDIASOURCE_TYPE_UNSUPPORTED_CODE = 35;\n\n        this.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE = 'parsing failed for ';\n        this.MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE = 'Failed loading manifest: ';\n        this.XLINK_LOADER_LOADING_FAILURE_ERROR_MESSAGE = 'Failed loading Xlink element: ';\n        this.SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE = 'Segments update failed';\n        this.SEGMENTS_UNAVAILABLE_ERROR_MESSAGE = 'no segments are available yet';\n        this.SEGMENT_BASE_LOADER_ERROR_MESSAGE = 'error loading segments';\n        this.TIME_SYNC_FAILED_ERROR_MESSAGE = 'Failed to synchronize time';\n        this.FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE = 'request is null';\n        this.URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE = 'Failed to resolve a valid URL';\n        this.APPEND_ERROR_MESSAGE = 'chunk is not defined';\n        this.REMOVE_ERROR_MESSAGE = 'buffer is not defined';\n        this.DATA_UPDATE_FAILED_ERROR_MESSAGE = 'Data update failed';\n\n        this.CAPABILITY_MEDIASOURCE_ERROR_MESSAGE = 'mediasource is not supported';\n        this.CAPABILITY_MEDIAKEYS_ERROR_MESSAGE = 'mediakeys is not supported';\n        this.TIMED_TEXT_ERROR_MESSAGE_PARSE = 'parsing error :';\n        this.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE = 'Error creating source buffer of type : ';\n    }\n}\n\nlet errors = new Errors();\nexport default errors;"]},"metadata":{},"sourceType":"script"}