{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction DroppedFramesHistory() {\n  var values = [];\n  var lastDroppedFrames = 0;\n  var lastTotalFrames = 0;\n\n  function push(index, playbackQuality) {\n    var droppedVideoFrames = playbackQuality && playbackQuality.droppedVideoFrames ? playbackQuality.droppedVideoFrames : 0;\n    var totalVideoFrames = playbackQuality && playbackQuality.totalVideoFrames ? playbackQuality.totalVideoFrames : 0;\n    var intervalDroppedFrames = droppedVideoFrames - lastDroppedFrames;\n    lastDroppedFrames = droppedVideoFrames;\n    var intervalTotalFrames = totalVideoFrames - lastTotalFrames;\n    lastTotalFrames = totalVideoFrames;\n\n    if (!isNaN(index)) {\n      if (!values[index]) {\n        values[index] = {\n          droppedVideoFrames: intervalDroppedFrames,\n          totalVideoFrames: intervalTotalFrames\n        };\n      } else {\n        values[index].droppedVideoFrames += intervalDroppedFrames;\n        values[index].totalVideoFrames += intervalTotalFrames;\n      }\n    }\n  }\n\n  function getDroppedFrameHistory() {\n    return values;\n  }\n\n  function reset(playbackQuality) {\n    values = [];\n    lastDroppedFrames = playbackQuality.droppedVideoFrames;\n    lastTotalFrames = playbackQuality.totalVideoFrames;\n  }\n\n  return {\n    push: push,\n    getFrameHistory: getDroppedFrameHistory,\n    reset: reset\n  };\n}\n\nDroppedFramesHistory.__dashjs_factory_name = 'DroppedFramesHistory';\n\nvar factory = _FactoryMaker2.default.getClassFactory(DroppedFramesHistory);\n\nexports.default = factory;","map":{"version":3,"sources":["../../../../../src/streaming/rules/DroppedFramesHistory.js"],"names":["values","lastDroppedFrames","lastTotalFrames","droppedVideoFrames","playbackQuality","totalVideoFrames","intervalDroppedFrames","intervalTotalFrames","isNaN","push","getFrameHistory","reset","DroppedFramesHistory","factory","FactoryMaker"],"mappings":";;;;;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;;;;;;;AAGA;;AAAA,SAAA,oBAAA,GAAgC;AAE5B,MAAIA,MAAAA,GAAJ,EAAA;AACA,MAAIC,iBAAAA,GAAJ,CAAA;AACA,MAAIC,eAAAA,GAAJ,CAAA;;AAEA,WAAA,IAAA,CAAA,KAAA,EAAA,eAAA,EAAsC;AAClC,QAAIC,kBAAAA,GAAqBC,eAAAA,IAAmBA,eAAAA,CAAnBA,kBAAAA,GAAwDA,eAAAA,CAAxDA,kBAAAA,GAAzB,CAAA;AACA,QAAIC,gBAAAA,GAAmBD,eAAAA,IAAmBA,eAAAA,CAAnBA,gBAAAA,GAAsDA,eAAAA,CAAtDA,gBAAAA,GAAvB,CAAA;AAEA,QAAIE,qBAAAA,GAAwBH,kBAAAA,GAA5B,iBAAA;AACAF,IAAAA,iBAAAA,GAAAA,kBAAAA;AAEA,QAAIM,mBAAAA,GAAsBF,gBAAAA,GAA1B,eAAA;AACAH,IAAAA,eAAAA,GAAAA,gBAAAA;;AAEA,QAAI,CAACM,KAAAA,CAAL,KAAKA,CAAL,EAAmB;AACf,UAAI,CAACR,MAAAA,CAAL,KAAKA,CAAL,EAAoB;AAChBA,QAAAA,MAAAA,CAAAA,KAAAA,CAAAA,GAAgB;AAACG,UAAAA,kBAAAA,EAAD,qBAAA;AAA4CE,UAAAA,gBAAAA,EAA5DL;AAAgB,SAAhBA;AADJ,OAAA,MAEO;AACHA,QAAAA,MAAAA,CAAAA,KAAAA,CAAAA,CAAAA,kBAAAA,IAAAA,qBAAAA;AACAA,QAAAA,MAAAA,CAAAA,KAAAA,CAAAA,CAAAA,gBAAAA,IAAAA,mBAAAA;AAEP;AACJ;AAED;;AAAA,WAAA,sBAAA,GAAkC;AAC9B,WAAA,MAAA;AAGJ;;AAAA,WAAA,KAAA,CAAA,eAAA,EAAgC;AAC5BA,IAAAA,MAAAA,GAAAA,EAAAA;AACAC,IAAAA,iBAAAA,GAAoBG,eAAAA,CAApBH,kBAAAA;AACAC,IAAAA,eAAAA,GAAkBE,eAAAA,CAAlBF,gBAAAA;AAGJ;;AAAA,SAAO;AACHO,IAAAA,IAAAA,EADG,IAAA;AAEHC,IAAAA,eAAAA,EAFG,sBAAA;AAGHC,IAAAA,KAAAA,EAHJ;AAAO,GAAP;AAOJC;;AAAAA,oBAAAA,CAAAA,qBAAAA,GAAAA,sBAAAA;;AACA,IAAMC,OAAAA,GAAUC,cAAAA,CAAAA,OAAAA,CAAAA,eAAAA,CAAhB,oBAAgBA,CAAhB;;kBACeD,O","sourcesContent":["\nimport FactoryMaker from '../../core/FactoryMaker';\n\n\nfunction DroppedFramesHistory() {\n\n    let values = [];\n    let lastDroppedFrames = 0;\n    let lastTotalFrames = 0;\n\n    function push(index, playbackQuality) {\n        let droppedVideoFrames = playbackQuality && playbackQuality.droppedVideoFrames ? playbackQuality.droppedVideoFrames : 0;\n        let totalVideoFrames = playbackQuality && playbackQuality.totalVideoFrames ? playbackQuality.totalVideoFrames : 0;\n\n        let intervalDroppedFrames = droppedVideoFrames - lastDroppedFrames;\n        lastDroppedFrames = droppedVideoFrames;\n\n        let intervalTotalFrames = totalVideoFrames - lastTotalFrames;\n        lastTotalFrames = totalVideoFrames;\n\n        if (!isNaN(index)) {\n            if (!values[index]) {\n                values[index] = {droppedVideoFrames: intervalDroppedFrames, totalVideoFrames: intervalTotalFrames};\n            } else {\n                values[index].droppedVideoFrames += intervalDroppedFrames;\n                values[index].totalVideoFrames += intervalTotalFrames;\n            }\n        }\n    }\n\n    function getDroppedFrameHistory() {\n        return values;\n    }\n\n    function reset(playbackQuality) {\n        values = [];\n        lastDroppedFrames = playbackQuality.droppedVideoFrames;\n        lastTotalFrames = playbackQuality.totalVideoFrames;\n    }\n\n    return {\n        push: push,\n        getFrameHistory: getDroppedFrameHistory,\n        reset: reset\n    };\n}\n\nDroppedFramesHistory.__dashjs_factory_name = 'DroppedFramesHistory';\nconst factory = FactoryMaker.getClassFactory(DroppedFramesHistory);\nexport default factory;\n"]},"metadata":{},"sourceType":"script"}