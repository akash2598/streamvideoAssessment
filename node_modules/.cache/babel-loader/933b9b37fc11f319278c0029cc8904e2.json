{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _SwitchRequest = require('./SwitchRequest');\n\nvar _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nvar SWITCH_REQUEST_HISTORY_DEPTH = 8; // must be > SwitchHistoryRule SAMPLE_SIZE to enable rule\n\nfunction SwitchRequestHistory() {\n  var switchRequests = []; // running total\n\n  var srHistory = []; // history of each switch\n\n  function push(switchRequest) {\n    if (switchRequest.newValue === _SwitchRequest2.default.NO_CHANGE) {\n      switchRequest.newValue = switchRequest.oldValue;\n    }\n\n    if (!switchRequests[switchRequest.oldValue]) {\n      switchRequests[switchRequest.oldValue] = {\n        noDrops: 0,\n        drops: 0,\n        dropSize: 0\n      };\n    } // Set switch details\n\n\n    var indexDiff = switchRequest.newValue - switchRequest.oldValue;\n    var drop = indexDiff < 0 ? 1 : 0;\n    var dropSize = drop ? -indexDiff : 0;\n    var noDrop = drop ? 0 : 1; // Update running totals\n\n    switchRequests[switchRequest.oldValue].drops += drop;\n    switchRequests[switchRequest.oldValue].dropSize += dropSize;\n    switchRequests[switchRequest.oldValue].noDrops += noDrop; // Save to history\n\n    srHistory.push({\n      idx: switchRequest.oldValue,\n      noDrop: noDrop,\n      drop: drop,\n      dropSize: dropSize\n    }); // Shift earliest switch off srHistory and readjust to keep depth of running totals constant\n\n    if (srHistory.length > SWITCH_REQUEST_HISTORY_DEPTH) {\n      var srHistoryFirst = srHistory.shift();\n      switchRequests[srHistoryFirst.idx].drops -= srHistoryFirst.drop;\n      switchRequests[srHistoryFirst.idx].dropSize -= srHistoryFirst.dropSize;\n      switchRequests[srHistoryFirst.idx].noDrops -= srHistoryFirst.noDrop;\n    }\n  }\n\n  function getSwitchRequests() {\n    return switchRequests;\n  }\n\n  function reset() {\n    switchRequests = [];\n    srHistory = [];\n  }\n\n  return {\n    push: push,\n    getSwitchRequests: getSwitchRequests,\n    reset: reset\n  };\n}\n\nSwitchRequestHistory.__dashjs_factory_name = 'SwitchRequestHistory';\n\nvar factory = _FactoryMaker2.default.getClassFactory(SwitchRequestHistory);\n\nexports.default = factory;","map":{"version":3,"sources":["../../../../../src/streaming/rules/SwitchRequestHistory.js"],"names":["SWITCH_REQUEST_HISTORY_DEPTH","switchRequests","srHistory","switchRequest","SwitchRequest","noDrops","drops","dropSize","indexDiff","drop","noDrop","idx","srHistoryFirst","push","getSwitchRequests","reset","SwitchRequestHistory","factory","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\nimport SwitchRequest from './SwitchRequest';\n\nconst SWITCH_REQUEST_HISTORY_DEPTH = 8; // must be > SwitchHistoryRule SAMPLE_SIZE to enable rule\n\nfunction SwitchRequestHistory() {\n    let switchRequests = []; // running total\n    let srHistory = []; // history of each switch\n\n    function push(switchRequest) {\n        if (switchRequest.newValue === SwitchRequest.NO_CHANGE) {\n            switchRequest.newValue = switchRequest.oldValue;\n        }\n        if (!switchRequests[switchRequest.oldValue]) {\n            switchRequests[switchRequest.oldValue] = {noDrops: 0, drops: 0, dropSize: 0};\n        }\n\n        // Set switch details\n        let indexDiff = switchRequest.newValue - switchRequest.oldValue;\n        let drop = (indexDiff < 0) ? 1 : 0;\n        let dropSize = drop ? -indexDiff : 0;\n        let noDrop = drop ? 0 : 1;\n\n        // Update running totals\n        switchRequests[switchRequest.oldValue].drops += drop;\n        switchRequests[switchRequest.oldValue].dropSize += dropSize;\n        switchRequests[switchRequest.oldValue].noDrops += noDrop;\n\n        // Save to history\n        srHistory.push({idx: switchRequest.oldValue, noDrop: noDrop, drop: drop, dropSize: dropSize});\n\n        // Shift earliest switch off srHistory and readjust to keep depth of running totals constant\n        if ( srHistory.length > SWITCH_REQUEST_HISTORY_DEPTH ) {\n            let srHistoryFirst = srHistory.shift();\n            switchRequests[srHistoryFirst.idx].drops -= srHistoryFirst.drop;\n            switchRequests[srHistoryFirst.idx].dropSize -= srHistoryFirst.dropSize;\n            switchRequests[srHistoryFirst.idx].noDrops -= srHistoryFirst.noDrop;\n        }\n    }\n\n    function getSwitchRequests() {\n        return switchRequests;\n    }\n\n    function reset() {\n        switchRequests = [];\n        srHistory = [];\n    }\n\n    return {\n        push: push,\n        getSwitchRequests: getSwitchRequests,\n        reset: reset\n    };\n}\n\nSwitchRequestHistory.__dashjs_factory_name = 'SwitchRequestHistory';\nconst factory = FactoryMaker.getClassFactory(SwitchRequestHistory);\nexport default factory;\n"]},"metadata":{},"sourceType":"script"}