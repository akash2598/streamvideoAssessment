{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Debug = require('../../../core/Debug');\n\nvar _Debug2 = _interopRequireDefault(_Debug);\n\nvar _SwitchRequest = require('../SwitchRequest');\n\nvar _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);\n\nvar _Constants = require('../../constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _MetricsConstants = require('../../constants/MetricsConstants');\n\nvar _MetricsConstants2 = _interopRequireDefault(_MetricsConstants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ThroughputRule(config) {\n  config = config || {};\n  var context = this.context;\n  var dashMetrics = config.dashMetrics;\n  var instance = void 0,\n      logger = void 0;\n\n  function setup() {\n    logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);\n  }\n\n  function checkConfig() {\n    if (!dashMetrics || !dashMetrics.hasOwnProperty('getCurrentBufferState')) {\n      throw new Error(_Constants2.default.MISSING_CONFIG_ERROR);\n    }\n  }\n\n  function getMaxIndex(rulesContext) {\n    var switchRequest = (0, _SwitchRequest2.default)(context).create();\n\n    if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('useBufferOccupancyABR') || !rulesContext.hasOwnProperty('getAbrController') || !rulesContext.hasOwnProperty('getScheduleController')) {\n      return switchRequest;\n    }\n\n    checkConfig();\n    var mediaInfo = rulesContext.getMediaInfo();\n    var mediaType = rulesContext.getMediaType();\n    var currentBufferState = dashMetrics.getCurrentBufferState(mediaType);\n    var scheduleController = rulesContext.getScheduleController();\n    var abrController = rulesContext.getAbrController();\n    var streamInfo = rulesContext.getStreamInfo();\n    var isDynamic = streamInfo && streamInfo.manifestInfo ? streamInfo.manifestInfo.isDynamic : null;\n    var throughputHistory = abrController.getThroughputHistory();\n    var throughput = throughputHistory.getSafeAverageThroughput(mediaType, isDynamic);\n    var latency = throughputHistory.getAverageLatency(mediaType);\n    var useBufferOccupancyABR = rulesContext.useBufferOccupancyABR();\n\n    if (isNaN(throughput) || !currentBufferState || useBufferOccupancyABR) {\n      return switchRequest;\n    }\n\n    if (abrController.getAbandonmentStateFor(mediaType) !== _MetricsConstants2.default.ABANDON_LOAD) {\n      if (currentBufferState.state === _MetricsConstants2.default.BUFFER_LOADED || isDynamic) {\n        switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, throughput, latency);\n        scheduleController.setTimeToLoadDelay(0);\n        logger.debug('[' + mediaType + '] requesting switch to index: ', switchRequest.quality, 'Average throughput', Math.round(throughput), 'kbps');\n        switchRequest.reason = {\n          throughput: throughput,\n          latency: latency\n        };\n      }\n    }\n\n    return switchRequest;\n  }\n\n  function reset() {// no persistent information to reset\n  }\n\n  instance = {\n    getMaxIndex: getMaxIndex,\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nThroughputRule.__dashjs_factory_name = 'ThroughputRule';\nexports.default = _FactoryMaker2.default.getClassFactory(ThroughputRule);","map":{"version":3,"sources":["../../../../../../src/streaming/rules/abr/ThroughputRule.js"],"names":["config","context","dashMetrics","instance","logger","Constants","switchRequest","rulesContext","checkConfig","mediaInfo","mediaType","currentBufferState","scheduleController","abrController","streamInfo","isDynamic","throughputHistory","throughput","latency","useBufferOccupancyABR","isNaN","MetricsConstants","Math","getMaxIndex","reset","setup","ThroughputRule","FactoryMaker"],"mappings":";;;;;;AA8BA,IAAA,aAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,kCAAA,CAAA;;;;;;;;AAEA;;AAAA,SAAA,cAAA,CAAA,MAAA,EAAgC;AAE5BA,EAAAA,MAAAA,GAASA,MAAAA,IAATA,EAAAA;AACA,MAAMC,OAAAA,GAAU,KAAhB,OAAA;AACA,MAAMC,WAAAA,GAAcF,MAAAA,CAApB,WAAA;AAEA,MAAIG,QAAAA,GAAAA,KAAJ,CAAA;AAAA,MACIC,MAAAA,GAAAA,KADJ,CAAA;;AAGA,WAAA,KAAA,GAAiB;AACbA,IAAAA,MAAAA,GAAS,CAAA,GAAA,OAAA,CAAA,OAAA,EAAA,OAAA,EAAA,WAAA,GAAA,SAAA,CAATA,QAAS,CAATA;AAGJ;;AAAA,WAAA,WAAA,GAAuB;AACnB,QAAI,CAAA,WAAA,IAAgB,CAACF,WAAAA,CAAAA,cAAAA,CAArB,uBAAqBA,CAArB,EAA0E;AACtE,YAAM,IAAA,KAAA,CAAUG,WAAAA,CAAAA,OAAAA,CAAhB,oBAAM,CAAN;AAEP;AAED;;AAAA,WAAA,WAAA,CAAA,YAAA,EAAmC;AAC/B,QAAMC,aAAAA,GAAgB,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,OAAA,EAAtB,MAAsB,EAAtB;;AAEA,QAAI,CAAA,YAAA,IAAiB,CAACC,YAAAA,CAAAA,cAAAA,CAAlB,cAAkBA,CAAlB,IAAiE,CAACA,YAAAA,CAAAA,cAAAA,CAAlE,cAAkEA,CAAlE,IAAiH,CAACA,YAAAA,CAAAA,cAAAA,CAAlH,uBAAkHA,CAAlH,IACA,CAACA,YAAAA,CAAAA,cAAAA,CADD,kBACCA,CADD,IACoD,CAACA,YAAAA,CAAAA,cAAAA,CADzD,uBACyDA,CADzD,EAC+G;AAC3G,aAAA,aAAA;AAGJC;;AAAAA,IAAAA,WAAAA;AAEA,QAAMC,SAAAA,GAAYF,YAAAA,CAAlB,YAAkBA,EAAlB;AACA,QAAMG,SAAAA,GAAYH,YAAAA,CAAlB,YAAkBA,EAAlB;AACA,QAAMI,kBAAAA,GAAqBT,WAAAA,CAAAA,qBAAAA,CAA3B,SAA2BA,CAA3B;AACA,QAAMU,kBAAAA,GAAqBL,YAAAA,CAA3B,qBAA2BA,EAA3B;AACA,QAAMM,aAAAA,GAAgBN,YAAAA,CAAtB,gBAAsBA,EAAtB;AACA,QAAMO,UAAAA,GAAaP,YAAAA,CAAnB,aAAmBA,EAAnB;AACA,QAAMQ,SAAAA,GAAYD,UAAAA,IAAcA,UAAAA,CAAdA,YAAAA,GAAwCA,UAAAA,CAAAA,YAAAA,CAAxCA,SAAAA,GAAlB,IAAA;AACA,QAAME,iBAAAA,GAAoBH,aAAAA,CAA1B,oBAA0BA,EAA1B;AACA,QAAMI,UAAAA,GAAaD,iBAAAA,CAAAA,wBAAAA,CAAAA,SAAAA,EAAnB,SAAmBA,CAAnB;AACA,QAAME,OAAAA,GAAUF,iBAAAA,CAAAA,iBAAAA,CAAhB,SAAgBA,CAAhB;AACA,QAAMG,qBAAAA,GAAwBZ,YAAAA,CAA9B,qBAA8BA,EAA9B;;AAGA,QAAIa,KAAAA,CAAAA,UAAAA,CAAAA,IAAqB,CAArBA,kBAAAA,IAAJ,qBAAA,EAAuE;AACnE,aAAA,aAAA;AAGJ;;AAAA,QAAIP,aAAAA,CAAAA,sBAAAA,CAAAA,SAAAA,MAAoDQ,kBAAAA,CAAAA,OAAAA,CAAxD,YAAA,EAAuF;AACnF,UAAIV,kBAAAA,CAAAA,KAAAA,KAA6BU,kBAAAA,CAAAA,OAAAA,CAA7BV,aAAAA,IAAJ,SAAA,EAA8E;AAC1EL,QAAAA,aAAAA,CAAAA,OAAAA,GAAwBO,aAAAA,CAAAA,oBAAAA,CAAAA,SAAAA,EAAAA,UAAAA,EAAxBP,OAAwBO,CAAxBP;AACAM,QAAAA,kBAAAA,CAAAA,kBAAAA,CAAAA,CAAAA;AACAR,QAAAA,MAAAA,CAAAA,KAAAA,CAAa,MAAA,SAAA,GAAbA,gCAAAA,EAAiEE,aAAAA,CAAjEF,OAAAA,EAAAA,oBAAAA,EAA8GkB,IAAAA,CAAAA,KAAAA,CAA9GlB,UAA8GkB,CAA9GlB,EAAAA,MAAAA;AACAE,QAAAA,aAAAA,CAAAA,MAAAA,GAAuB;AAACW,UAAAA,UAAAA,EAAD,UAAA;AAAyBC,UAAAA,OAAAA,EAAhDZ;AAAuB,SAAvBA;AAEP;AAED;;AAAA,WAAA,aAAA;AAGJ;;AAAA,WAAA,KAAA,GAAiB,CACb;AAGJH;;AAAAA,EAAAA,QAAAA,GAAW;AACPoB,IAAAA,WAAAA,EADO,WAAA;AAEPC,IAAAA,KAAAA,EAFJrB;AAAW,GAAXA;AAKAsB,EAAAA,KAAAA;AAEA,SAAA,QAAA;AAzGJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4GAC,cAAAA,CAAAA,qBAAAA,GAAAA,gBAAAA;kBACeC,cAAAA,CAAAA,OAAAA,CAAAA,eAAAA,CAAAA,cAAAA,C","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport Debug from '../../../core/Debug';\nimport SwitchRequest from '../SwitchRequest';\nimport Constants from '../../constants/Constants';\nimport MetricsConstants from '../../constants/MetricsConstants';\n\nfunction ThroughputRule(config) {\n\n    config = config || {};\n    const context = this.context;\n    const dashMetrics = config.dashMetrics;\n\n    let instance,\n        logger;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n    }\n\n    function checkConfig() {\n        if (!dashMetrics || !dashMetrics.hasOwnProperty('getCurrentBufferState')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    function getMaxIndex(rulesContext) {\n        const switchRequest = SwitchRequest(context).create();\n\n        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('useBufferOccupancyABR') ||\n            !rulesContext.hasOwnProperty('getAbrController') || !rulesContext.hasOwnProperty('getScheduleController')) {\n            return switchRequest;\n        }\n\n        checkConfig();\n\n        const mediaInfo = rulesContext.getMediaInfo();\n        const mediaType = rulesContext.getMediaType();\n        const currentBufferState = dashMetrics.getCurrentBufferState(mediaType);\n        const scheduleController = rulesContext.getScheduleController();\n        const abrController = rulesContext.getAbrController();\n        const streamInfo = rulesContext.getStreamInfo();\n        const isDynamic = streamInfo && streamInfo.manifestInfo ? streamInfo.manifestInfo.isDynamic : null;\n        const throughputHistory = abrController.getThroughputHistory();\n        const throughput = throughputHistory.getSafeAverageThroughput(mediaType, isDynamic);\n        const latency = throughputHistory.getAverageLatency(mediaType);\n        const useBufferOccupancyABR = rulesContext.useBufferOccupancyABR();\n\n\n        if (isNaN(throughput) || !currentBufferState || useBufferOccupancyABR) {\n            return switchRequest;\n        }\n\n        if (abrController.getAbandonmentStateFor(mediaType) !== MetricsConstants.ABANDON_LOAD) {\n            if (currentBufferState.state === MetricsConstants.BUFFER_LOADED || isDynamic) {\n                switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, throughput, latency);\n                scheduleController.setTimeToLoadDelay(0);\n                logger.debug('[' + mediaType + '] requesting switch to index: ', switchRequest.quality, 'Average throughput', Math.round(throughput), 'kbps');\n                switchRequest.reason = {throughput: throughput, latency: latency};\n            }\n        }\n\n        return switchRequest;\n    }\n\n    function reset() {\n        // no persistent information to reset\n    }\n\n    instance = {\n        getMaxIndex: getMaxIndex,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nThroughputRule.__dashjs_factory_name = 'ThroughputRule';\nexport default FactoryMaker.getClassFactory(ThroughputRule);\n"]},"metadata":{},"sourceType":"script"}