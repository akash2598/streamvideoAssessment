{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* @module DefaultURLUtils\n* @description Provides utility functions for operating on URLs.\n* Initially this is simply a method to determine the Base URL of a URL, but\n* should probably include other things provided all over the place such as\n* determining whether a URL is relative/absolute, resolving two paths etc.\n* @ignore\n*/\n\n\nfunction DefaultURLUtils() {\n  var resolveFunction = void 0;\n  var schemeRegex = /^[a-z][a-z0-9+\\-_.]*:/i;\n  var httpUrlRegex = /^https?:\\/\\//i;\n  var httpsUrlRegex = /^https:\\/\\//i;\n  var originRegex = /^([a-z][a-z0-9+\\-_.]*:\\/\\/[^\\/]+)\\/?/i;\n  /**\n  * Resolves a url given an optional base url\n  * Uses window.URL to do the resolution.\n  *\n  * @param {string} url\n  * @param {string} [baseUrl]\n  * @return {string}\n  * @memberof module:DefaultURLUtils\n  * @instance\n  * @private\n  */\n\n  var nativeURLResolver = function nativeURLResolver(url, baseUrl) {\n    try {\n      return new window.URL(url, baseUrl).toString();\n    } catch (e) {\n      return url;\n    }\n  };\n  /**\n  * Resolves a url given an optional base url\n  * Does not resolve ./, ../ etc but will do enough to construct something\n  * which will satisfy XHR etc when window.URL is not available ie\n  * IE11/node etc.\n  *\n  * @param {string} url\n  * @param {string} [baseUrl]\n  * @return {string}\n  * @memberof module:DefaultURLUtils\n  * @instance\n  * @private\n  */\n\n\n  var dumbURLResolver = function dumbURLResolver(url, baseUrl) {\n    var baseUrlParseFunc = parseBaseUrl;\n\n    if (!baseUrl) {\n      return url;\n    }\n\n    if (!isRelative(url)) {\n      return url;\n    }\n\n    if (isPathAbsolute(url)) {\n      baseUrlParseFunc = parseOrigin;\n    }\n\n    if (isSchemeRelative(url)) {\n      baseUrlParseFunc = parseScheme;\n    }\n\n    var base = baseUrlParseFunc(baseUrl);\n    var joinChar = base.charAt(base.length - 1) !== '/' && url.charAt(0) !== '/' ? '/' : '';\n    return [base, url].join(joinChar);\n  };\n\n  function setup() {\n    try {\n      var u = new window.URL('x', 'http://y'); //jshint ignore:line\n\n      resolveFunction = nativeURLResolver;\n    } catch (e) {// must be IE11/Node etc\n    } finally {\n      resolveFunction = resolveFunction || dumbURLResolver;\n    }\n  }\n  /**\n  * Returns a string that contains the Base URL of a URL, if determinable.\n  * @param {string} url - full url\n  * @return {string}\n  * @memberof module:DefaultURLUtils\n  * @instance\n  */\n\n\n  function parseBaseUrl(url) {\n    var slashIndex = url.indexOf('/');\n    var lastSlashIndex = url.lastIndexOf('/');\n\n    if (slashIndex !== -1) {\n      // if there is only '//'\n      if (lastSlashIndex === slashIndex + 1) {\n        return url;\n      }\n\n      if (url.indexOf('?') !== -1) {\n        url = url.substring(0, url.indexOf('?'));\n      }\n\n      return url.substring(0, lastSlashIndex + 1);\n    }\n\n    return '';\n  }\n  /**\n  * Returns a string that contains the scheme and origin of a URL,\n  * if determinable.\n  * @param {string} url - full url\n  * @return {string}\n  * @memberof module:DefaultURLUtils\n  * @instance\n  */\n\n\n  function parseOrigin(url) {\n    var matches = url.match(originRegex);\n\n    if (matches) {\n      return matches[1];\n    }\n\n    return '';\n  }\n  /**\n  * Returns a string that contains the fragment of a URL without scheme,\n  * if determinable.\n  * @param {string} url - full url\n  * @return {string}\n  * @memberof module:DefaultURLUtils\n  * @instance\n  */\n\n\n  function removeHostname(url) {\n    var urlParts = /^(?:\\w+\\:\\/\\/)?([^\\/]+)(.*)$/.exec(url); //[1] = host / [2] = path\n\n    return urlParts[2].substring(1);\n  }\n  /**\n  * Returns a string that contains the scheme of a URL, if determinable.\n  * @param {string} url - full url\n  * @return {string}\n  * @memberof module:DefaultURLUtils\n  * @instance\n  */\n\n\n  function parseScheme(url) {\n    var matches = url.match(schemeRegex);\n\n    if (matches) {\n      return matches[0];\n    }\n\n    return '';\n  }\n  /**\n  * Determines whether the url is relative.\n  * @return {boolean}\n  * @param {string} url\n  * @memberof module:DefaultURLUtils\n  * @instance\n  */\n\n\n  function isRelative(url) {\n    return !schemeRegex.test(url);\n  }\n  /**\n  * Determines whether the url is path-absolute.\n  * @return {bool}\n  * @param {string} url\n  * @memberof module:DefaultURLUtils\n  * @instance\n  */\n\n\n  function isPathAbsolute(url) {\n    return isRelative(url) && url.charAt(0) === '/';\n  }\n  /**\n  * Determines whether the url is scheme-relative.\n  * @return {bool}\n  * @param {string} url\n  * @memberof module:DefaultURLUtils\n  * @instance\n  */\n\n\n  function isSchemeRelative(url) {\n    return url.indexOf('//') === 0;\n  }\n  /**\n  * Determines whether the url is an HTTP-URL as defined in ISO/IEC\n  * 23009-1:2014 3.1.15. ie URL with a fixed scheme of http or https\n  * @return {bool}\n  * @param {string} url\n  * @memberof module:DefaultURLUtils\n  * @instance\n  */\n\n\n  function isHTTPURL(url) {\n    return httpUrlRegex.test(url);\n  }\n  /**\n  * Determines whether the supplied url has https scheme\n  * @return {bool}\n  * @param {string} url\n  * @memberof module:DefaultURLUtils\n  * @instance\n  */\n\n\n  function isHTTPS(url) {\n    return httpsUrlRegex.test(url);\n  }\n  /**\n  * Resolves a url given an optional base url\n  * @return {string}\n  * @param {string} url\n  * @param {string} [baseUrl]\n  * @memberof module:DefaultURLUtils\n  * @instance\n  */\n\n\n  function resolve(url, baseUrl) {\n    return resolveFunction(url, baseUrl);\n  }\n\n  setup();\n  var instance = {\n    parseBaseUrl: parseBaseUrl,\n    parseOrigin: parseOrigin,\n    parseScheme: parseScheme,\n    isRelative: isRelative,\n    isPathAbsolute: isPathAbsolute,\n    isSchemeRelative: isSchemeRelative,\n    isHTTPURL: isHTTPURL,\n    isHTTPS: isHTTPS,\n    removeHostname: removeHostname,\n    resolve: resolve\n  };\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nDefaultURLUtils.__dashjs_factory_name = 'DefaultURLUtils';\nexports.default = _FactoryMaker2.default.getSingletonFactory(DefaultURLUtils);","map":{"version":3,"sources":["../../../../../src/streaming/utils/DefaultURLUtils.js"],"names":["resolveFunction","schemeRegex","httpUrlRegex","httpsUrlRegex","originRegex","nativeURLResolver","window","dumbURLResolver","baseUrlParseFunc","isRelative","isPathAbsolute","isSchemeRelative","base","joinChar","url","u","slashIndex","lastSlashIndex","matches","urlParts","setup","instance","parseBaseUrl","parseOrigin","parseScheme","isHTTPURL","isHTTPS","removeHostname","resolve","DefaultURLUtils","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\n\n/**\n * @module DefaultURLUtils\n * @description Provides utility functions for operating on URLs.\n * Initially this is simply a method to determine the Base URL of a URL, but\n * should probably include other things provided all over the place such as\n * determining whether a URL is relative/absolute, resolving two paths etc.\n * @ignore\n */\nfunction DefaultURLUtils() {\n\n    let resolveFunction;\n\n    const schemeRegex = /^[a-z][a-z0-9+\\-_.]*:/i;\n    const httpUrlRegex = /^https?:\\/\\//i;\n    const httpsUrlRegex = /^https:\\/\\//i;\n    const originRegex = /^([a-z][a-z0-9+\\-_.]*:\\/\\/[^\\/]+)\\/?/i;\n\n    /**\n     * Resolves a url given an optional base url\n     * Uses window.URL to do the resolution.\n     *\n     * @param {string} url\n     * @param {string} [baseUrl]\n     * @return {string}\n     * @memberof module:DefaultURLUtils\n     * @instance\n     * @private\n     */\n    const nativeURLResolver = (url, baseUrl) => {\n        try {\n            return new window.URL(url, baseUrl).toString();\n        } catch (e) {\n            return url;\n        }\n    };\n\n    /**\n     * Resolves a url given an optional base url\n     * Does not resolve ./, ../ etc but will do enough to construct something\n     * which will satisfy XHR etc when window.URL is not available ie\n     * IE11/node etc.\n     *\n     * @param {string} url\n     * @param {string} [baseUrl]\n     * @return {string}\n     * @memberof module:DefaultURLUtils\n     * @instance\n     * @private\n     */\n    const dumbURLResolver = (url, baseUrl) => {\n        let baseUrlParseFunc = parseBaseUrl;\n\n        if (!baseUrl) {\n            return url;\n        }\n\n        if (!isRelative(url)) {\n            return url;\n        }\n\n        if (isPathAbsolute(url)) {\n            baseUrlParseFunc = parseOrigin;\n        }\n\n        if (isSchemeRelative(url)) {\n            baseUrlParseFunc = parseScheme;\n        }\n\n        const base = baseUrlParseFunc(baseUrl);\n        const joinChar =\n              base.charAt(base.length - 1) !== '/' &&\n              url.charAt(0) !== '/' ?\n              '/' : '';\n\n        return [base, url].join(joinChar);\n    };\n\n    function setup() {\n        try {\n            const u = new window.URL('x', 'http://y'); //jshint ignore:line\n            resolveFunction = nativeURLResolver;\n        } catch (e) {\n            // must be IE11/Node etc\n        } finally {\n            resolveFunction = resolveFunction || dumbURLResolver;\n        }\n    }\n\n    /**\n     * Returns a string that contains the Base URL of a URL, if determinable.\n     * @param {string} url - full url\n     * @return {string}\n     * @memberof module:DefaultURLUtils\n     * @instance\n     */\n    function parseBaseUrl(url) {\n        const slashIndex = url.indexOf('/');\n        const lastSlashIndex = url.lastIndexOf('/');\n\n        if (slashIndex !== -1) {\n            // if there is only '//'\n            if (lastSlashIndex === slashIndex + 1) {\n                return url;\n            }\n\n            if (url.indexOf('?') !== -1) {\n                url = url.substring(0, url.indexOf('?'));\n            }\n\n            return url.substring(0, lastSlashIndex + 1);\n        }\n\n        return '';\n    }\n\n    /**\n     * Returns a string that contains the scheme and origin of a URL,\n     * if determinable.\n     * @param {string} url - full url\n     * @return {string}\n     * @memberof module:DefaultURLUtils\n     * @instance\n     */\n    function parseOrigin(url) {\n        const matches = url.match(originRegex);\n\n        if (matches) {\n            return matches[1];\n        }\n\n        return '';\n    }\n\n    /**\n     * Returns a string that contains the fragment of a URL without scheme,\n     * if determinable.\n     * @param {string} url - full url\n     * @return {string}\n     * @memberof module:DefaultURLUtils\n     * @instance\n     */\n    function removeHostname(url) {\n        let urlParts = /^(?:\\w+\\:\\/\\/)?([^\\/]+)(.*)$/.exec(url); //[1] = host / [2] = path\n        return urlParts[2].substring(1);\n    }\n\n    /**\n     * Returns a string that contains the scheme of a URL, if determinable.\n     * @param {string} url - full url\n     * @return {string}\n     * @memberof module:DefaultURLUtils\n     * @instance\n     */\n    function parseScheme(url) {\n        const matches = url.match(schemeRegex);\n\n        if (matches) {\n            return matches[0];\n        }\n\n        return '';\n    }\n\n    /**\n     * Determines whether the url is relative.\n     * @return {boolean}\n     * @param {string} url\n     * @memberof module:DefaultURLUtils\n     * @instance\n     */\n    function isRelative(url) {\n        return !schemeRegex.test(url);\n    }\n\n    /**\n     * Determines whether the url is path-absolute.\n     * @return {bool}\n     * @param {string} url\n     * @memberof module:DefaultURLUtils\n     * @instance\n     */\n    function isPathAbsolute(url) {\n        return isRelative(url) && url.charAt(0) === '/';\n    }\n\n    /**\n     * Determines whether the url is scheme-relative.\n     * @return {bool}\n     * @param {string} url\n     * @memberof module:DefaultURLUtils\n     * @instance\n     */\n    function isSchemeRelative(url) {\n        return url.indexOf('//') === 0;\n    }\n\n    /**\n     * Determines whether the url is an HTTP-URL as defined in ISO/IEC\n     * 23009-1:2014 3.1.15. ie URL with a fixed scheme of http or https\n     * @return {bool}\n     * @param {string} url\n     * @memberof module:DefaultURLUtils\n     * @instance\n     */\n    function isHTTPURL(url) {\n        return httpUrlRegex.test(url);\n    }\n\n    /**\n     * Determines whether the supplied url has https scheme\n     * @return {bool}\n     * @param {string} url\n     * @memberof module:DefaultURLUtils\n     * @instance\n     */\n    function isHTTPS(url) {\n        return httpsUrlRegex.test(url);\n    }\n\n    /**\n     * Resolves a url given an optional base url\n     * @return {string}\n     * @param {string} url\n     * @param {string} [baseUrl]\n     * @memberof module:DefaultURLUtils\n     * @instance\n     */\n    function resolve(url, baseUrl) {\n        return resolveFunction(url, baseUrl);\n    }\n\n    setup();\n\n    const instance = {\n        parseBaseUrl:       parseBaseUrl,\n        parseOrigin:        parseOrigin,\n        parseScheme:        parseScheme,\n        isRelative:         isRelative,\n        isPathAbsolute:     isPathAbsolute,\n        isSchemeRelative:   isSchemeRelative,\n        isHTTPURL:          isHTTPURL,\n        isHTTPS:            isHTTPS,\n        removeHostname:     removeHostname,\n        resolve:            resolve\n    };\n\n    return instance;\n}\n\nDefaultURLUtils.__dashjs_factory_name = 'DefaultURLUtils';\nexport default FactoryMaker.getSingletonFactory(DefaultURLUtils);\n"]},"metadata":{},"sourceType":"script"}