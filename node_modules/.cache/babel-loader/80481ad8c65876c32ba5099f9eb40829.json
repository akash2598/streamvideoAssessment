{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/* global escape: true */\n\n/**\n* Microsoft PlayReady Test License Server\n*\n* For testing content that uses the PlayReady test server at\n*\n* @implements LicenseServer\n* @class\n* @ignore\n*/\n\nfunction PlayReady() {\n  var instance = void 0;\n  var soap = 'http://schemas.xmlsoap.org/soap/envelope/';\n\n  function uintToString(arrayBuffer) {\n    var encodedString = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\n    var decodedString = decodeURIComponent(escape(encodedString));\n    return decodedString;\n  }\n\n  function parseServerResponse(serverResponse) {\n    if (window.DOMParser) {\n      var stringResponse = uintToString(serverResponse);\n      var parser = new window.DOMParser();\n      var xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n      var envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n      var body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n      var fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n\n      if (fault) {\n        return null;\n      }\n    }\n\n    return serverResponse;\n  }\n\n  function parseErrorResponse(serverResponse) {\n    var faultstring = '';\n    var statusCode = '';\n    var message = '';\n    var idStart = -1;\n    var idEnd = -1;\n\n    if (window.DOMParser) {\n      var stringResponse = uintToString(serverResponse);\n      var parser = new window.DOMParser();\n      var xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n      var envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n      var body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n      var fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n      var detail = fault ? fault.getElementsByTagName('detail')[0] : null;\n      var exception = detail ? detail.getElementsByTagName('Exception')[0] : null;\n      var node = null;\n\n      if (fault === null) {\n        return stringResponse;\n      }\n\n      node = fault.getElementsByTagName('faultstring')[0].firstChild;\n      faultstring = node ? node.nodeValue : null;\n\n      if (exception !== null) {\n        node = exception.getElementsByTagName('StatusCode')[0];\n        statusCode = node ? node.firstChild.nodeValue : null;\n        node = exception.getElementsByTagName('Message')[0];\n        message = node ? node.firstChild.nodeValue : null;\n        idStart = message ? message.lastIndexOf('[') + 1 : -1;\n        idEnd = message ? message.indexOf(']') : -1;\n        message = message ? message.substring(idStart, idEnd) : '';\n      }\n    }\n\n    var errorString = 'code: ' + statusCode + ', name: ' + faultstring;\n\n    if (message) {\n      errorString += ', message: ' + message;\n    }\n\n    return errorString;\n  }\n\n  function getServerURLFromMessage(url\n  /*, message, messageType*/\n  ) {\n    return url;\n  }\n\n  function getHTTPMethod()\n  /*messageType*/\n  {\n    return 'POST';\n  }\n\n  function getResponseType()\n  /*keySystemStr, messageType*/\n  {\n    return 'arraybuffer';\n  }\n\n  function getLicenseMessage(serverResponse\n  /*, keySystemStr, messageType*/\n  ) {\n    return parseServerResponse.call(this, serverResponse);\n  }\n\n  function getErrorResponse(serverResponse\n  /*, keySystemStr, messageType*/\n  ) {\n    return parseErrorResponse.call(this, serverResponse);\n  }\n\n  instance = {\n    getServerURLFromMessage: getServerURLFromMessage,\n    getHTTPMethod: getHTTPMethod,\n    getResponseType: getResponseType,\n    getLicenseMessage: getLicenseMessage,\n    getErrorResponse: getErrorResponse\n  };\n  return instance;\n}\n\nPlayReady.__dashjs_factory_name = 'PlayReady';\nexports.default = dashjs.FactoryMaker.getSingletonFactory(PlayReady);\n/* jshint ignore:line */","map":{"version":3,"sources":["../../../../../../src/streaming/protection/servers/PlayReady.js"],"names":["instance","soap","encodedString","String","decodedString","decodeURIComponent","escape","window","stringResponse","uintToString","parser","xmlDoc","envelope","body","fault","faultstring","statusCode","message","idStart","idEnd","detail","exception","node","errorString","url","serverResponse","parseServerResponse","parseErrorResponse","getServerURLFromMessage","getHTTPMethod","getResponseType","getLicenseMessage","getErrorResponse","PlayReady","dashjs"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global escape: true */\n\n/**\n * Microsoft PlayReady Test License Server\n *\n * For testing content that uses the PlayReady test server at\n *\n * @implements LicenseServer\n * @class\n * @ignore\n */\n\nfunction PlayReady() {\n\n    let instance;\n\n    const soap = 'http://schemas.xmlsoap.org/soap/envelope/';\n\n    function uintToString(arrayBuffer) {\n        const encodedString = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\n        const decodedString = decodeURIComponent(escape(encodedString));\n        return decodedString;\n    }\n\n    function parseServerResponse(serverResponse) {\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n\n            if (fault) {\n                return null;\n            }\n        }\n        return serverResponse;\n    }\n\n    function parseErrorResponse(serverResponse) {\n        let faultstring = '';\n        let statusCode = '';\n        let message = '';\n        let idStart = -1;\n        let idEnd = -1;\n\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n            const detail = fault ? fault.getElementsByTagName('detail')[0] : null;\n            const exception = detail ? detail.getElementsByTagName('Exception')[0] : null;\n            let node = null;\n\n            if (fault === null) {\n                return stringResponse;\n            }\n\n            node = fault.getElementsByTagName('faultstring')[0].firstChild;\n            faultstring = node ? node.nodeValue : null;\n\n            if (exception !== null) {\n                node = exception.getElementsByTagName('StatusCode')[0];\n                statusCode = node ? node.firstChild.nodeValue : null;\n                node = exception.getElementsByTagName('Message')[0];\n                message = node ? node.firstChild.nodeValue : null;\n                idStart = message ? message.lastIndexOf('[') + 1 : -1;\n                idEnd = message ? message.indexOf(']') : -1;\n                message = message ? message.substring(idStart, idEnd) : '';\n            }\n        }\n\n        let errorString = `code: ${statusCode}, name: ${faultstring}`;\n        if (message) {\n            errorString += `, message: ${message}`;\n        }\n\n        return errorString;\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return parseServerResponse.call(this, serverResponse);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return parseErrorResponse.call(this, serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nPlayReady.__dashjs_factory_name = 'PlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(PlayReady); /* jshint ignore:line */"]},"metadata":{},"sourceType":"script"}