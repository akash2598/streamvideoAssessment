{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Errors = require('../../core/errors/Errors');\n\nvar _Errors2 = _interopRequireDefault(_Errors);\n\nvar _EventBus = require('../../core/EventBus');\n\nvar _EventBus2 = _interopRequireDefault(_EventBus);\n\nvar _Events = require('../../core/events/Events');\n\nvar _Events2 = _interopRequireDefault(_Events);\n\nvar _BlacklistController = require('../controllers/BlacklistController');\n\nvar _BlacklistController2 = _interopRequireDefault(_BlacklistController);\n\nvar _DVBSelector = require('./baseUrlResolution/DVBSelector');\n\nvar _DVBSelector2 = _interopRequireDefault(_DVBSelector);\n\nvar _BasicSelector = require('./baseUrlResolution/BasicSelector');\n\nvar _BasicSelector2 = _interopRequireDefault(_BasicSelector);\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _DashJSError = require('../vo/DashJSError');\n\nvar _DashJSError2 = _interopRequireDefault(_DashJSError);\n\nvar _SupervisorTools = require('../utils/SupervisorTools');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction BaseURLSelector() {\n  var context = this.context;\n  var eventBus = (0, _EventBus2.default)(context).getInstance();\n  var instance = void 0,\n      serviceLocationBlacklistController = void 0,\n      basicSelector = void 0,\n      dvbSelector = void 0,\n      selector = void 0;\n\n  function setup() {\n    serviceLocationBlacklistController = (0, _BlacklistController2.default)(context).create({\n      updateEventName: _Events2.default.SERVICE_LOCATION_BLACKLIST_CHANGED,\n      addBlacklistEventName: _Events2.default.SERVICE_LOCATION_BLACKLIST_ADD\n    });\n    basicSelector = (0, _BasicSelector2.default)(context).create({\n      blacklistController: serviceLocationBlacklistController\n    });\n    dvbSelector = (0, _DVBSelector2.default)(context).create({\n      blacklistController: serviceLocationBlacklistController\n    });\n    selector = basicSelector;\n  }\n\n  function setConfig(config) {\n    if (config.selector) {\n      selector = config.selector;\n    }\n  }\n\n  function chooseSelector(isDVB) {\n    (0, _SupervisorTools.checkParameterType)(isDVB, 'boolean');\n    selector = isDVB ? dvbSelector : basicSelector;\n  }\n\n  function select(data) {\n    if (!data) {\n      return;\n    }\n\n    var baseUrls = data.baseUrls;\n    var selectedIdx = data.selectedIdx; // Once a random selection has been carried out amongst a group of BaseURLs with the same\n    // @priority attribute value, then that choice should be re-used if the selection needs to be made again\n    // unless the blacklist has been modified or the available BaseURLs have changed.\n\n    if (!isNaN(selectedIdx)) {\n      return baseUrls[selectedIdx];\n    }\n\n    var selectedBaseUrl = selector.select(baseUrls);\n\n    if (!selectedBaseUrl) {\n      eventBus.trigger(_Events2.default.URL_RESOLUTION_FAILED, {\n        error: new _DashJSError2.default(_Errors2.default.URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE, _Errors2.default.URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE)\n      });\n\n      if (selector === basicSelector) {\n        reset();\n      }\n\n      return;\n    }\n\n    data.selectedIdx = baseUrls.indexOf(selectedBaseUrl);\n    return selectedBaseUrl;\n  }\n\n  function reset() {\n    serviceLocationBlacklistController.reset();\n  }\n\n  instance = {\n    chooseSelector: chooseSelector,\n    select: select,\n    reset: reset,\n    setConfig: setConfig\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nBaseURLSelector.__dashjs_factory_name = 'BaseURLSelector';\nexports.default = _FactoryMaker2.default.getClassFactory(BaseURLSelector);","map":{"version":3,"sources":["../../../../../src/streaming/utils/BaseURLSelector.js"],"names":["context","eventBus","instance","serviceLocationBlacklistController","basicSelector","dvbSelector","selector","updateEventName","Events","addBlacklistEventName","blacklistController","config","isDVB","baseUrls","data","selectedIdx","isNaN","selectedBaseUrl","error","DashJSError","Errors","reset","chooseSelector","select","setConfig","setup","BaseURLSelector","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport Errors from '../../core/errors/Errors';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport BlacklistController from '../controllers/BlacklistController';\nimport DVBSelector from './baseUrlResolution/DVBSelector';\nimport BasicSelector from './baseUrlResolution/BasicSelector';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport DashJSError from '../vo/DashJSError';\nimport { checkParameterType } from '../utils/SupervisorTools';\n\nfunction BaseURLSelector() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    let instance,\n        serviceLocationBlacklistController,\n        basicSelector,\n        dvbSelector,\n        selector;\n\n    function setup() {\n        serviceLocationBlacklistController = BlacklistController(context).create({\n            updateEventName:        Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            addBlacklistEventName:    Events.SERVICE_LOCATION_BLACKLIST_ADD\n        });\n\n        basicSelector = BasicSelector(context).create({\n            blacklistController: serviceLocationBlacklistController\n        });\n\n        dvbSelector = DVBSelector(context).create({\n            blacklistController: serviceLocationBlacklistController\n        });\n\n        selector = basicSelector;\n    }\n\n    function setConfig(config) {\n        if (config.selector) {\n            selector = config.selector;\n        }\n    }\n\n    function chooseSelector(isDVB) {\n        checkParameterType(isDVB, 'boolean');\n        selector = isDVB ? dvbSelector : basicSelector;\n    }\n\n    function select(data) {\n        if (!data) {\n            return;\n        }\n        const baseUrls = data.baseUrls;\n        const selectedIdx = data.selectedIdx;\n\n        // Once a random selection has been carried out amongst a group of BaseURLs with the same\n        // @priority attribute value, then that choice should be re-used if the selection needs to be made again\n        // unless the blacklist has been modified or the available BaseURLs have changed.\n        if (!isNaN(selectedIdx)) {\n            return baseUrls[selectedIdx];\n        }\n\n        let selectedBaseUrl = selector.select(baseUrls);\n\n        if (!selectedBaseUrl) {\n            eventBus.trigger(Events.URL_RESOLUTION_FAILED, {\n                error: new DashJSError(\n                    Errors.URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE,\n                    Errors.URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE\n                )\n            });\n            if (selector === basicSelector) {\n                reset();\n            }\n            return;\n        }\n\n        data.selectedIdx = baseUrls.indexOf(selectedBaseUrl);\n\n        return selectedBaseUrl;\n    }\n\n    function reset() {\n        serviceLocationBlacklistController.reset();\n    }\n\n    instance = {\n        chooseSelector: chooseSelector,\n        select: select,\n        reset: reset,\n        setConfig: setConfig\n    };\n\n    setup();\n\n    return instance;\n}\n\nBaseURLSelector.__dashjs_factory_name = 'BaseURLSelector';\nexport default FactoryMaker.getClassFactory(BaseURLSelector);\n"]},"metadata":{},"sourceType":"script"}