{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Metrics = require('../vo/Metrics');\n\nvar _Metrics2 = _interopRequireDefault(_Metrics);\n\nvar _Range = require('../vo/Range');\n\nvar _Range2 = _interopRequireDefault(_Range);\n\nvar _Reporting = require('../vo/Reporting');\n\nvar _Reporting2 = _interopRequireDefault(_Reporting);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ManifestParsing(config) {\n  config = config || {};\n  var instance = void 0;\n  var adapter = config.adapter;\n  var constants = config.constants;\n\n  function getMetricsRangeStartTime(manifest, dynamic, range) {\n    var voPeriods = void 0,\n        reportingStartTime = void 0;\n    var presentationStartTime = 0;\n\n    if (dynamic) {\n      // For services with MPD@type='dynamic', the start time is\n      // indicated in wall clock time by adding the value of this\n      // attribute to the value of the MPD@availabilityStartTime\n      // attribute.\n      presentationStartTime = adapter.getAvailabilityStartTime(manifest) / 1000;\n    } else {\n      // For services with MPD@type='static', the start time is indicated\n      // in Media Presentation time and is relative to the PeriodStart\n      // time of the first Period in this MPD.\n      voPeriods = adapter.getRegularPeriods(manifest);\n\n      if (voPeriods.length) {\n        presentationStartTime = voPeriods[0].start;\n      }\n    } // When not present, DASH Metrics collection is\n    // requested from the beginning of content\n    // consumption.\n\n\n    reportingStartTime = presentationStartTime;\n\n    if (range && range.hasOwnProperty(constants.START_TIME)) {\n      reportingStartTime += range.starttime;\n    }\n\n    return reportingStartTime;\n  }\n\n  function getMetrics(manifest) {\n    var metrics = [];\n\n    if (manifest && manifest.Metrics_asArray) {\n      manifest.Metrics_asArray.forEach(function (metric) {\n        var metricEntry = new _Metrics2.default();\n        var isDynamic = adapter.getIsDynamic(manifest);\n\n        if (metric.hasOwnProperty('metrics')) {\n          metricEntry.metrics = metric.metrics;\n        } else {\n          return;\n        }\n\n        if (metric.Range_asArray) {\n          metric.Range_asArray.forEach(function (range) {\n            var rangeEntry = new _Range2.default();\n            rangeEntry.starttime = getMetricsRangeStartTime(manifest, isDynamic, range);\n\n            if (range.hasOwnProperty('duration')) {\n              rangeEntry.duration = range.duration;\n            } else {\n              // if not present, the value is identical to the\n              // Media Presentation duration.\n              rangeEntry.duration = adapter.getDuration(manifest);\n            }\n\n            rangeEntry._useWallClockTime = isDynamic;\n            metricEntry.Range.push(rangeEntry);\n          });\n        }\n\n        if (metric.Reporting_asArray) {\n          metric.Reporting_asArray.forEach(function (reporting) {\n            var reportingEntry = new _Reporting2.default();\n\n            if (reporting.hasOwnProperty(constants.SCHEME_ID_URI)) {\n              reportingEntry.schemeIdUri = reporting.schemeIdUri;\n            } else {\n              // Invalid Reporting. schemeIdUri must be set. Ignore.\n              return;\n            }\n\n            if (reporting.hasOwnProperty('value')) {\n              reportingEntry.value = reporting.value;\n            }\n\n            if (reporting.hasOwnProperty(constants.DVB_REPORTING_URL)) {\n              reportingEntry.dvb_reportingUrl = reporting[constants.DVB_REPORTING_URL];\n            }\n\n            if (reporting.hasOwnProperty(constants.DVB_PROBABILITY)) {\n              reportingEntry.dvb_probability = reporting[constants.DVB_PROBABILITY];\n            }\n\n            metricEntry.Reporting.push(reportingEntry);\n          });\n        } else {\n          // Invalid Metrics. At least one reporting must be present. Ignore\n          return;\n        }\n\n        metrics.push(metricEntry);\n      });\n    }\n\n    return metrics;\n  }\n\n  instance = {\n    getMetrics: getMetrics\n  };\n  return instance;\n}\n\nManifestParsing.__dashjs_factory_name = 'ManifestParsing';\nexports.default = dashjs.FactoryMaker.getSingletonFactory(ManifestParsing);\n/* jshint ignore:line */","map":{"version":3,"sources":["../../../../../../src/streaming/metrics/utils/ManifestParsing.js"],"names":["config","instance","adapter","constants","voPeriods","reportingStartTime","presentationStartTime","range","metrics","manifest","metricEntry","Metrics","isDynamic","metric","rangeEntry","Range","getMetricsRangeStartTime","reportingEntry","Reporting","reporting","getMetrics","ManifestParsing","dashjs"],"mappings":"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","sourcesContent":["import Metrics from '../vo/Metrics';\nimport Range from '../vo/Range';\nimport Reporting from '../vo/Reporting';\n\nfunction ManifestParsing (config) {\n    config = config || {};\n    let instance;\n    let adapter = config.adapter;\n    const constants = config.constants;\n\n    function getMetricsRangeStartTime(manifest, dynamic, range) {\n        let voPeriods,\n            reportingStartTime;\n        let presentationStartTime = 0;\n\n        if (dynamic) {\n            // For services with MPD@type='dynamic', the start time is\n            // indicated in wall clock time by adding the value of this\n            // attribute to the value of the MPD@availabilityStartTime\n            // attribute.\n            presentationStartTime = adapter.getAvailabilityStartTime(manifest) / 1000;\n        } else {\n            // For services with MPD@type='static', the start time is indicated\n            // in Media Presentation time and is relative to the PeriodStart\n            // time of the first Period in this MPD.\n            voPeriods = adapter.getRegularPeriods(manifest);\n\n            if (voPeriods.length) {\n                presentationStartTime = voPeriods[0].start;\n            }\n        }\n\n        // When not present, DASH Metrics collection is\n        // requested from the beginning of content\n        // consumption.\n        reportingStartTime = presentationStartTime;\n\n        if (range && range.hasOwnProperty(constants.START_TIME)) {\n            reportingStartTime += range.starttime;\n        }\n\n        return reportingStartTime;\n    }\n\n    function getMetrics(manifest) {\n        let metrics = [];\n\n        if (manifest && manifest.Metrics_asArray) {\n            manifest.Metrics_asArray.forEach(metric => {\n                var metricEntry = new Metrics();\n                var isDynamic = adapter.getIsDynamic(manifest);\n\n                if (metric.hasOwnProperty('metrics')) {\n                    metricEntry.metrics = metric.metrics;\n                } else {\n                    return;\n                }\n\n                if (metric.Range_asArray) {\n                    metric.Range_asArray.forEach(range => {\n                        var rangeEntry = new Range();\n\n                        rangeEntry.starttime =\n                            getMetricsRangeStartTime(manifest, isDynamic, range);\n\n                        if (range.hasOwnProperty('duration')) {\n                            rangeEntry.duration = range.duration;\n                        } else {\n                            // if not present, the value is identical to the\n                            // Media Presentation duration.\n                            rangeEntry.duration = adapter.getDuration(manifest);\n                        }\n\n                        rangeEntry._useWallClockTime = isDynamic;\n\n                        metricEntry.Range.push(rangeEntry);\n                    });\n                }\n\n                if (metric.Reporting_asArray) {\n                    metric.Reporting_asArray.forEach(reporting => {\n                        var reportingEntry = new Reporting();\n\n                        if (reporting.hasOwnProperty(constants.SCHEME_ID_URI)) {\n                            reportingEntry.schemeIdUri = reporting.schemeIdUri;\n                        } else {\n                            // Invalid Reporting. schemeIdUri must be set. Ignore.\n                            return;\n                        }\n\n                        if (reporting.hasOwnProperty('value')) {\n                            reportingEntry.value = reporting.value;\n                        }\n\n                        if (reporting.hasOwnProperty(constants.DVB_REPORTING_URL)) {\n                            reportingEntry.dvb_reportingUrl = reporting[constants.DVB_REPORTING_URL];\n                        }\n\n                        if (reporting.hasOwnProperty(constants.DVB_PROBABILITY)) {\n                            reportingEntry.dvb_probability = reporting[constants.DVB_PROBABILITY];\n                        }\n\n                        metricEntry.Reporting.push(reportingEntry);\n                    });\n                } else {\n                    // Invalid Metrics. At least one reporting must be present. Ignore\n                    return;\n                }\n\n                metrics.push(metricEntry);\n            });\n        }\n\n        return metrics;\n    }\n\n    instance = {\n        getMetrics: getMetrics\n    };\n\n    return instance;\n}\n\nManifestParsing.__dashjs_factory_name = 'ManifestParsing';\nexport default dashjs.FactoryMaker.getSingletonFactory(ManifestParsing); /* jshint ignore:line */"]},"metadata":{},"sourceType":"script"}