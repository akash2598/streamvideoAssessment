{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _DVBErrorsTranslator = require('./utils/DVBErrorsTranslator');\n\nvar _DVBErrorsTranslator2 = _interopRequireDefault(_DVBErrorsTranslator);\n\nvar _MetricsReportingEvents = require('./MetricsReportingEvents');\n\nvar _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents);\n\nvar _MetricsCollectionController = require('./controllers/MetricsCollectionController');\n\nvar _MetricsCollectionController2 = _interopRequireDefault(_MetricsCollectionController);\n\nvar _MetricsHandlerFactory = require('./metrics/MetricsHandlerFactory');\n\nvar _MetricsHandlerFactory2 = _interopRequireDefault(_MetricsHandlerFactory);\n\nvar _ReportingFactory = require('./reporting/ReportingFactory');\n\nvar _ReportingFactory2 = _interopRequireDefault(_ReportingFactory);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction MetricsReporting() {\n  var context = this.context;\n  var instance = void 0,\n      dvbErrorsTranslator = void 0;\n  /**\n  * Create a MetricsCollectionController, and a DVBErrorsTranslator\n  * @param {Object} config - dependancies from owner\n  * @return {MetricsCollectionController} Metrics Collection Controller\n  */\n\n  function createMetricsReporting(config) {\n    dvbErrorsTranslator = (0, _DVBErrorsTranslator2.default)(context).getInstance({\n      eventBus: config.eventBus,\n      dashMetrics: config.dashMetrics,\n      metricsConstants: config.metricsConstants,\n      events: config.events\n    });\n    return (0, _MetricsCollectionController2.default)(context).create(config);\n  }\n  /**\n  * Get the ReportingFactory to allow new reporters to be registered\n  * @return {ReportingFactory} Reporting Factory\n  */\n\n\n  function getReportingFactory() {\n    return (0, _ReportingFactory2.default)(context).getInstance();\n  }\n  /**\n  * Get the MetricsHandlerFactory to allow new handlers to be registered\n  * @return {MetricsHandlerFactory} Metrics Handler Factory\n  */\n\n\n  function getMetricsHandlerFactory() {\n    return (0, _MetricsHandlerFactory2.default)(context).getInstance();\n  }\n\n  instance = {\n    createMetricsReporting: createMetricsReporting,\n    getReportingFactory: getReportingFactory,\n    getMetricsHandlerFactory: getMetricsHandlerFactory\n  };\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nMetricsReporting.__dashjs_factory_name = 'MetricsReporting';\nvar factory = dashjs.FactoryMaker.getClassFactory(MetricsReporting);\n/* jshint ignore:line */\n\nfactory.events = _MetricsReportingEvents2.default;\ndashjs.FactoryMaker.updateClassFactory(MetricsReporting.__dashjs_factory_name, factory);\n/* jshint ignore:line */\n\nexports.default = factory;","map":{"version":3,"sources":["../../../../../src/streaming/metrics/MetricsReporting.js"],"names":["context","instance","dvbErrorsTranslator","eventBus","config","dashMetrics","metricsConstants","events","createMetricsReporting","getReportingFactory","getMetricsHandlerFactory","MetricsReporting","factory","dashjs","MetricsReportingEvents"],"mappings":";;;;;;AA+BA,IAAA,oBAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;;;AACA,IAAA,uBAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;;;AACA,IAAA,4BAAA,GAAA,OAAA,CAAA,2CAAA,CAAA;;;;AACA,IAAA,sBAAA,GAAA,OAAA,CAAA,iCAAA,CAAA;;;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;;;;;;;AAEA;;AAAA,SAAA,gBAAA,GAA4B;AAExB,MAAIA,OAAAA,GAAU,KAAd,OAAA;AACA,MAAIC,QAAAA,GAAAA,KAAJ,CAAA;AAAA,MACIC,mBAAAA,GAAAA,KADJ,CAAA;AAGA;;;;;;AAKA,WAAA,sBAAA,CAAA,MAAA,EAAwC;AACpCA,IAAAA,mBAAAA,GAAsB,CAAA,GAAA,qBAAA,CAAA,OAAA,EAAA,OAAA,EAAA,WAAA,CAAyC;AAC3DC,MAAAA,QAAAA,EAAUC,MAAAA,CADiD,QAAA;AAE3DC,MAAAA,WAAAA,EAAaD,MAAAA,CAF8C,WAAA;AAG3DE,MAAAA,gBAAAA,EAAkBF,MAAAA,CAHyC,gBAAA;AAI3DG,MAAAA,MAAAA,EAAQH,MAAAA,CAJZF;AAA+D,KAAzC,CAAtBA;AAOA,WAAO,CAAA,GAAA,6BAAA,CAAA,OAAA,EAAA,OAAA,EAAA,MAAA,CAAP,MAAO,CAAP;AAGJ;AAAA;;;;;;AAIA,WAAA,mBAAA,GAA+B;AAC3B,WAAO,CAAA,GAAA,kBAAA,CAAA,OAAA,EAAA,OAAA,EAAP,WAAO,EAAP;AAGJ;AAAA;;;;;;AAIA,WAAA,wBAAA,GAAoC;AAChC,WAAO,CAAA,GAAA,uBAAA,CAAA,OAAA,EAAA,OAAA,EAAP,WAAO,EAAP;AAGJD;;AAAAA,EAAAA,QAAAA,GAAW;AACPO,IAAAA,sBAAAA,EADO,sBAAA;AAEPC,IAAAA,mBAAAA,EAFO,mBAAA;AAGPC,IAAAA,wBAAAA,EAHJT;AAAW,GAAXA;AAMA,SAAA,QAAA;AAjFJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFAU,gBAAAA,CAAAA,qBAAAA,GAAAA,kBAAAA;AACA,IAAMC,OAAAA,GAAUC,MAAAA,CAAAA,YAAAA,CAAAA,eAAAA,CAAhB,gBAAgBA,CAAhB;AAAuE;;AACvED,OAAAA,CAAAA,MAAAA,GAAiBE,wBAAAA,CAAjBF,OAAAA;AACAC,MAAAA,CAAAA,YAAAA,CAAAA,kBAAAA,CAAuCF,gBAAAA,CAAvCE,qBAAAA,EAAAA,OAAAA;AAAyF;;kBAC1ED,O","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DVBErrorsTranslator from './utils/DVBErrorsTranslator';\nimport MetricsReportingEvents from './MetricsReportingEvents';\nimport MetricsCollectionController from './controllers/MetricsCollectionController';\nimport MetricsHandlerFactory from './metrics/MetricsHandlerFactory';\nimport ReportingFactory from './reporting/ReportingFactory';\n\nfunction MetricsReporting() {\n\n    let context = this.context;\n    let instance,\n        dvbErrorsTranslator;\n\n    /**\n     * Create a MetricsCollectionController, and a DVBErrorsTranslator\n     * @param {Object} config - dependancies from owner\n     * @return {MetricsCollectionController} Metrics Collection Controller\n     */\n    function createMetricsReporting(config) {\n        dvbErrorsTranslator = DVBErrorsTranslator(context).getInstance({\n            eventBus: config.eventBus,\n            dashMetrics: config.dashMetrics,\n            metricsConstants: config.metricsConstants,\n            events: config.events\n        });\n\n        return MetricsCollectionController(context).create(config);\n    }\n\n    /**\n     * Get the ReportingFactory to allow new reporters to be registered\n     * @return {ReportingFactory} Reporting Factory\n     */\n    function getReportingFactory() {\n        return ReportingFactory(context).getInstance();\n    }\n\n    /**\n     * Get the MetricsHandlerFactory to allow new handlers to be registered\n     * @return {MetricsHandlerFactory} Metrics Handler Factory\n     */\n    function getMetricsHandlerFactory() {\n        return MetricsHandlerFactory(context).getInstance();\n    }\n\n    instance = {\n        createMetricsReporting:     createMetricsReporting,\n        getReportingFactory:        getReportingFactory,\n        getMetricsHandlerFactory:   getMetricsHandlerFactory\n    };\n\n    return instance;\n}\n\nMetricsReporting.__dashjs_factory_name = 'MetricsReporting';\nconst factory = dashjs.FactoryMaker.getClassFactory(MetricsReporting); /* jshint ignore:line */\nfactory.events = MetricsReportingEvents;\ndashjs.FactoryMaker.updateClassFactory(MetricsReporting.__dashjs_factory_name, factory); /* jshint ignore:line */\nexport default factory;\n"]},"metadata":{},"sourceType":"script"}