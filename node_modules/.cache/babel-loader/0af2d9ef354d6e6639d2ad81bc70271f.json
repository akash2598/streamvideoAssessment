{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Constants = require('../../streaming/constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _SegmentsUtils = require('./SegmentsUtils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ListSegmentsGetter(config, isDynamic) {\n  config = config || {};\n  var timelineConverter = config.timelineConverter;\n  var instance = void 0;\n\n  function checkConfig() {\n    if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\n      throw new Error(_Constants2.default.MISSING_CONFIG_ERROR);\n    }\n  }\n\n  function getSegmentByIndex(representation, index) {\n    checkConfig();\n\n    if (!representation) {\n      return null;\n    }\n\n    var list = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList;\n    var len = list.SegmentURL_asArray.length;\n    var startNumber = representation && !isNaN(representation.startNumber) ? representation.startNumber : 1;\n    var offsetToSubtract = Math.max(startNumber - 1, 0);\n    var relativeIndex = Math.max(index - offsetToSubtract, 0);\n    var segment = null;\n\n    if (relativeIndex < len) {\n      var s = list.SegmentURL_asArray[relativeIndex];\n      segment = (0, _SegmentsUtils.getIndexBasedSegment)(timelineConverter, isDynamic, representation, index);\n\n      if (segment) {\n        segment.replacementTime = (startNumber + index - 1) * representation.segmentDuration;\n        segment.media = s.media ? s.media : '';\n        segment.mediaRange = s.mediaRange;\n        segment.index = index;\n        segment.indexRange = s.indexRange;\n      }\n    }\n\n    representation.availableSegmentsNumber = len;\n    return segment;\n  }\n\n  function getSegmentByTime(representation, requestedTime) {\n    checkConfig();\n\n    if (!representation) {\n      return null;\n    }\n\n    var duration = representation.segmentDuration;\n\n    if (isNaN(duration)) {\n      return null;\n    }\n\n    var periodTime = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, requestedTime);\n    var index = Math.floor(periodTime / duration);\n    return getSegmentByIndex(representation, index);\n  }\n\n  instance = {\n    getSegmentByIndex: getSegmentByIndex,\n    getSegmentByTime: getSegmentByTime\n  };\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nListSegmentsGetter.__dashjs_factory_name = 'ListSegmentsGetter';\n\nvar factory = _FactoryMaker2.default.getClassFactory(ListSegmentsGetter);\n\nexports.default = factory;","map":{"version":3,"sources":["../../../../../src/dash/utils/ListSegmentsGetter.js"],"names":["config","timelineConverter","instance","Constants","checkConfig","list","representation","len","startNumber","isNaN","offsetToSubtract","Math","relativeIndex","index","segment","s","duration","periodTime","getSegmentByIndex","getSegmentByTime","ListSegmentsGetter","factory","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Constants from '../../streaming/constants/Constants';\n\nimport {getIndexBasedSegment} from './SegmentsUtils';\n\nfunction ListSegmentsGetter(config, isDynamic) {\n\n    config = config || {};\n    const timelineConverter = config.timelineConverter;\n\n    let instance;\n\n    function checkConfig() {\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    function getSegmentByIndex(representation, index) {\n        checkConfig();\n\n        if (!representation) {\n            return null;\n        }\n\n        const list = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList;\n        const len = list.SegmentURL_asArray.length;\n\n        const startNumber = representation && !isNaN(representation.startNumber) ? representation.startNumber : 1;\n        const offsetToSubtract = Math.max(startNumber - 1, 0);\n\n        const relativeIndex = Math.max(index - offsetToSubtract, 0);\n\n        let segment = null;\n        if (relativeIndex < len) {\n            const s = list.SegmentURL_asArray[relativeIndex];\n\n            segment = getIndexBasedSegment(timelineConverter, isDynamic, representation, index);\n            if (segment) {\n                segment.replacementTime = (startNumber + index - 1) * representation.segmentDuration;\n                segment.media = s.media ? s.media : '';\n                segment.mediaRange = s.mediaRange;\n                segment.index = index;\n                segment.indexRange = s.indexRange;\n            }\n        }\n\n        representation.availableSegmentsNumber = len;\n\n        return segment;\n    }\n\n    function getSegmentByTime(representation, requestedTime) {\n        checkConfig();\n\n        if (!representation) {\n            return null;\n        }\n\n        const duration = representation.segmentDuration;\n\n        if (isNaN(duration)) {\n            return null;\n        }\n\n        const periodTime = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, requestedTime);\n        const index = Math.floor(periodTime / duration);\n\n        return getSegmentByIndex(representation, index);\n    }\n\n    instance = {\n        getSegmentByIndex: getSegmentByIndex,\n        getSegmentByTime: getSegmentByTime\n    };\n\n    return instance;\n}\n\nListSegmentsGetter.__dashjs_factory_name = 'ListSegmentsGetter';\nconst factory = FactoryMaker.getClassFactory(ListSegmentsGetter);\nexport default factory;\n"]},"metadata":{},"sourceType":"script"}