{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Constants = require('./constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _DashConstants = require('../dash/constants/DashConstants');\n\nvar _DashConstants2 = _interopRequireDefault(_DashConstants);\n\nvar _XlinkController = require('./controllers/XlinkController');\n\nvar _XlinkController2 = _interopRequireDefault(_XlinkController);\n\nvar _URLLoader = require('./net/URLLoader');\n\nvar _URLLoader2 = _interopRequireDefault(_URLLoader);\n\nvar _URLUtils = require('./utils/URLUtils');\n\nvar _URLUtils2 = _interopRequireDefault(_URLUtils);\n\nvar _TextRequest = require('./vo/TextRequest');\n\nvar _TextRequest2 = _interopRequireDefault(_TextRequest);\n\nvar _DashJSError = require('./vo/DashJSError');\n\nvar _DashJSError2 = _interopRequireDefault(_DashJSError);\n\nvar _HTTPRequest = require('./vo/metrics/HTTPRequest');\n\nvar _EventBus = require('../core/EventBus');\n\nvar _EventBus2 = _interopRequireDefault(_EventBus);\n\nvar _Events = require('../core/events/Events');\n\nvar _Events2 = _interopRequireDefault(_Events);\n\nvar _Errors = require('../core/errors/Errors');\n\nvar _Errors2 = _interopRequireDefault(_Errors);\n\nvar _FactoryMaker = require('../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _DashParser = require('../dash/parser/DashParser');\n\nvar _DashParser2 = _interopRequireDefault(_DashParser);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ManifestLoader(config) {\n  config = config || {};\n  var context = this.context;\n  var debug = config.debug;\n  var eventBus = (0, _EventBus2.default)(context).getInstance();\n  var urlUtils = (0, _URLUtils2.default)(context).getInstance();\n  var instance = void 0,\n      logger = void 0,\n      urlLoader = void 0,\n      xlinkController = void 0,\n      parser = void 0;\n  var mssHandler = config.mssHandler;\n  var errHandler = config.errHandler;\n\n  function setup() {\n    logger = debug.getLogger(instance);\n    eventBus.on(_Events2.default.XLINK_READY, onXlinkReady, instance);\n    urlLoader = (0, _URLLoader2.default)(context).create({\n      errHandler: config.errHandler,\n      dashMetrics: config.dashMetrics,\n      mediaPlayerModel: config.mediaPlayerModel,\n      requestModifier: config.requestModifier,\n      useFetch: config.settings.get().streaming.lowLatencyEnabled,\n      urlUtils: urlUtils,\n      constants: _Constants2.default,\n      dashConstants: _DashConstants2.default,\n      errors: _Errors2.default\n    });\n    xlinkController = (0, _XlinkController2.default)(context).create({\n      errHandler: errHandler,\n      dashMetrics: config.dashMetrics,\n      mediaPlayerModel: config.mediaPlayerModel,\n      requestModifier: config.requestModifier,\n      settings: config.settings\n    });\n    parser = null;\n  }\n\n  function onXlinkReady(event) {\n    eventBus.trigger(_Events2.default.INTERNAL_MANIFEST_LOADED, {\n      manifest: event.manifest\n    });\n  }\n\n  function createParser(data) {\n    var parser = null; // Analyze manifest content to detect protocol and select appropriate parser\n\n    if (data.indexOf('SmoothStreamingMedia') > -1) {\n      //do some business to transform it into a Dash Manifest\n      if (mssHandler) {\n        parser = mssHandler.createMssParser();\n        mssHandler.registerEvents();\n      }\n\n      return parser;\n    } else if (data.indexOf('MPD') > -1 || data.indexOf('Patch') > -1) {\n      return (0, _DashParser2.default)(context).create({\n        debug: debug\n      });\n    } else {\n      return parser;\n    }\n  }\n\n  function load(url) {\n    var request = new _TextRequest2.default(url, _HTTPRequest.HTTPRequest.MPD_TYPE);\n    urlLoader.load({\n      request: request,\n      success: function success(data, textStatus, responseURL) {\n        // Manage situations in which success is called after calling reset\n        if (!xlinkController) return;\n        var actualUrl = void 0,\n            baseUri = void 0,\n            manifest = void 0; // Handle redirects for the MPD - as per RFC3986 Section 5.1.3\n        // also handily resolves relative MPD URLs to absolute\n\n        if (responseURL && responseURL !== url) {\n          baseUri = urlUtils.parseBaseUrl(responseURL);\n          actualUrl = responseURL;\n        } else {\n          // usually this case will be caught and resolved by\n          // responseURL above but it is not available for IE11 and Edge/12 and Edge/13\n          // baseUri must be absolute for BaseURL resolution later\n          if (urlUtils.isRelative(url)) {\n            url = urlUtils.resolve(url, window.location.href);\n          }\n\n          baseUri = urlUtils.parseBaseUrl(url);\n        } // A response of no content implies in-memory is properly up to date\n\n\n        if (textStatus == 'No Content') {\n          eventBus.trigger(_Events2.default.INTERNAL_MANIFEST_LOADED, {\n            manifest: null\n          });\n          return;\n        } // Create parser according to manifest type\n\n\n        if (parser === null) {\n          parser = createParser(data);\n        }\n\n        if (parser === null) {\n          eventBus.trigger(_Events2.default.INTERNAL_MANIFEST_LOADED, {\n            manifest: null,\n            error: new _DashJSError2.default(_Errors2.default.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE, _Errors2.default.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + ('' + url))\n          });\n          return;\n        } // init xlinkcontroller with matchers and iron object from created parser\n\n\n        xlinkController.setMatchers(parser.getMatchers());\n        xlinkController.setIron(parser.getIron());\n\n        try {\n          manifest = parser.parse(data);\n        } catch (e) {\n          eventBus.trigger(_Events2.default.INTERNAL_MANIFEST_LOADED, {\n            manifest: null,\n            error: new _DashJSError2.default(_Errors2.default.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE, _Errors2.default.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + ('' + url))\n          });\n          return;\n        }\n\n        if (manifest) {\n          manifest.url = actualUrl || url; // URL from which the MPD was originally retrieved (MPD updates will not change this value)\n\n          if (!manifest.originalUrl) {\n            manifest.originalUrl = manifest.url;\n          } // In the following, we only use the first Location entry even if many are available\n          // Compare with ManifestUpdater/DashManifestModel\n\n\n          if (manifest.hasOwnProperty(_Constants2.default.LOCATION)) {\n            baseUri = urlUtils.parseBaseUrl(manifest.Location_asArray[0]);\n            logger.debug('BaseURI set by Location to: ' + baseUri);\n          }\n\n          manifest.baseUri = baseUri;\n          manifest.loadedTime = new Date();\n          xlinkController.resolveManifestOnLoad(manifest);\n          eventBus.trigger(_Events2.default.ORIGINAL_MANIFEST_LOADED, {\n            originalManifest: data\n          });\n        } else {\n          eventBus.trigger(_Events2.default.INTERNAL_MANIFEST_LOADED, {\n            manifest: null,\n            error: new _DashJSError2.default(_Errors2.default.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE, _Errors2.default.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + ('' + url))\n          });\n        }\n      },\n      error: function error(request, statusText, errorText) {\n        eventBus.trigger(_Events2.default.INTERNAL_MANIFEST_LOADED, {\n          manifest: null,\n          error: new _DashJSError2.default(_Errors2.default.MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE, _Errors2.default.MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE + (url + ', ' + errorText))\n        });\n      }\n    });\n  }\n\n  function reset() {\n    eventBus.off(_Events2.default.XLINK_READY, onXlinkReady, instance);\n\n    if (mssHandler) {\n      mssHandler.reset();\n    }\n\n    if (xlinkController) {\n      xlinkController.reset();\n      xlinkController = null;\n    }\n\n    if (urlLoader) {\n      urlLoader.abort();\n      urlLoader = null;\n    }\n  }\n\n  instance = {\n    load: load,\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nManifestLoader.__dashjs_factory_name = 'ManifestLoader';\n\nvar factory = _FactoryMaker2.default.getClassFactory(ManifestLoader);\n\nexports.default = factory;","map":{"version":3,"sources":["../../../../src/streaming/ManifestLoader.js"],"names":["config","context","debug","eventBus","urlUtils","instance","logger","urlLoader","xlinkController","parser","mssHandler","errHandler","Events","dashMetrics","mediaPlayerModel","requestModifier","useFetch","constants","Constants","dashConstants","DashConstants","errors","Errors","settings","manifest","event","data","request","TextRequest","HTTPRequest","success","actualUrl","baseUri","responseURL","url","window","textStatus","createParser","error","DashJSError","originalManifest","load","reset","setup","ManifestLoader","factory","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from './constants/Constants';\nimport DashConstants from '../dash/constants/DashConstants';\nimport XlinkController from './controllers/XlinkController';\nimport URLLoader from './net/URLLoader';\nimport URLUtils from './utils/URLUtils';\nimport TextRequest from './vo/TextRequest';\nimport DashJSError from './vo/DashJSError';\nimport {HTTPRequest} from './vo/metrics/HTTPRequest';\nimport EventBus from '../core/EventBus';\nimport Events from '../core/events/Events';\nimport Errors from '../core/errors/Errors';\nimport FactoryMaker from '../core/FactoryMaker';\nimport DashParser from '../dash/parser/DashParser';\n\nfunction ManifestLoader(config) {\n\n    config = config || {};\n    const context = this.context;\n    const debug = config.debug;\n    const eventBus = EventBus(context).getInstance();\n    const urlUtils = URLUtils(context).getInstance();\n\n    let instance,\n        logger,\n        urlLoader,\n        xlinkController,\n        parser;\n\n    let mssHandler = config.mssHandler;\n    let errHandler = config.errHandler;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        eventBus.on(Events.XLINK_READY, onXlinkReady, instance);\n\n        urlLoader = URLLoader(context).create({\n            errHandler: config.errHandler,\n            dashMetrics: config.dashMetrics,\n            mediaPlayerModel: config.mediaPlayerModel,\n            requestModifier: config.requestModifier,\n            useFetch: config.settings.get().streaming.lowLatencyEnabled,\n            urlUtils: urlUtils,\n            constants: Constants,\n            dashConstants: DashConstants,\n            errors: Errors\n        });\n\n        xlinkController = XlinkController(context).create({\n            errHandler: errHandler,\n            dashMetrics: config.dashMetrics,\n            mediaPlayerModel: config.mediaPlayerModel,\n            requestModifier: config.requestModifier,\n            settings: config.settings\n        });\n\n        parser = null;\n    }\n\n    function onXlinkReady(event) {\n        eventBus.trigger(Events.INTERNAL_MANIFEST_LOADED, { manifest: event.manifest });\n    }\n\n    function createParser(data) {\n        let parser = null;\n        // Analyze manifest content to detect protocol and select appropriate parser\n        if (data.indexOf('SmoothStreamingMedia') > -1) {\n            //do some business to transform it into a Dash Manifest\n            if (mssHandler) {\n                parser = mssHandler.createMssParser();\n                mssHandler.registerEvents();\n            }\n            return parser;\n        } else if (data.indexOf('MPD') > -1 || data.indexOf('Patch') > -1) {\n            return DashParser(context).create({debug: debug});\n        } else {\n            return parser;\n        }\n    }\n\n    function load(url) {\n\n        const request = new TextRequest(url, HTTPRequest.MPD_TYPE);\n\n        urlLoader.load({\n            request: request,\n            success: function (data, textStatus, responseURL) {\n                // Manage situations in which success is called after calling reset\n                if (!xlinkController) return;\n\n                let actualUrl,\n                    baseUri,\n                    manifest;\n\n                // Handle redirects for the MPD - as per RFC3986 Section 5.1.3\n                // also handily resolves relative MPD URLs to absolute\n                if (responseURL && responseURL !== url) {\n                    baseUri = urlUtils.parseBaseUrl(responseURL);\n                    actualUrl = responseURL;\n                } else {\n                    // usually this case will be caught and resolved by\n                    // responseURL above but it is not available for IE11 and Edge/12 and Edge/13\n                    // baseUri must be absolute for BaseURL resolution later\n                    if (urlUtils.isRelative(url)) {\n                        url = urlUtils.resolve(url, window.location.href);\n                    }\n\n                    baseUri = urlUtils.parseBaseUrl(url);\n                }\n\n                // A response of no content implies in-memory is properly up to date\n                if (textStatus == 'No Content') {\n                    eventBus.trigger(\n                        Events.INTERNAL_MANIFEST_LOADED, {\n                            manifest: null\n                        }\n                    );\n                    return;\n                }\n\n                // Create parser according to manifest type\n                if (parser === null) {\n                    parser = createParser(data);\n                }\n\n                if (parser === null) {\n                    eventBus.trigger(Events.INTERNAL_MANIFEST_LOADED, {\n                        manifest: null,\n                        error: new DashJSError(\n                            Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE,\n                            Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + `${url}`\n                        )\n                    });\n                    return;\n                }\n\n                // init xlinkcontroller with matchers and iron object from created parser\n                xlinkController.setMatchers(parser.getMatchers());\n                xlinkController.setIron(parser.getIron());\n\n                try {\n                    manifest = parser.parse(data);\n                } catch (e) {\n                    eventBus.trigger(Events.INTERNAL_MANIFEST_LOADED, {\n                        manifest: null,\n                        error: new DashJSError(\n                            Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE,\n                            Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + `${url}`\n                        )\n                    });\n                    return;\n                }\n\n                if (manifest) {\n                    manifest.url = actualUrl || url;\n\n                    // URL from which the MPD was originally retrieved (MPD updates will not change this value)\n                    if (!manifest.originalUrl) {\n                        manifest.originalUrl = manifest.url;\n                    }\n\n                    // In the following, we only use the first Location entry even if many are available\n                    // Compare with ManifestUpdater/DashManifestModel\n                    if (manifest.hasOwnProperty(Constants.LOCATION)) {\n                        baseUri = urlUtils.parseBaseUrl(manifest.Location_asArray[0]);\n                        logger.debug('BaseURI set by Location to: ' + baseUri);\n                    }\n\n                    manifest.baseUri = baseUri;\n                    manifest.loadedTime = new Date();\n                    xlinkController.resolveManifestOnLoad(manifest);\n\n                    eventBus.trigger(Events.ORIGINAL_MANIFEST_LOADED, { originalManifest: data });\n                } else {\n                    eventBus.trigger(Events.INTERNAL_MANIFEST_LOADED, {\n                        manifest: null,\n                        error: new DashJSError(\n                            Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE,\n                            Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + `${url}`\n                        )\n                    });\n                }\n            },\n            error: function (request, statusText, errorText) {\n                eventBus.trigger(Events.INTERNAL_MANIFEST_LOADED, {\n                    manifest: null,\n                    error: new DashJSError(\n                        Errors.MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE,\n                        Errors.MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE + `${url}, ${errorText}`\n                    )\n                });\n            }\n        });\n    }\n\n    function reset() {\n        eventBus.off(Events.XLINK_READY, onXlinkReady, instance);\n\n        if (mssHandler) {\n            mssHandler.reset();\n        }\n\n        if (xlinkController) {\n            xlinkController.reset();\n            xlinkController = null;\n        }\n\n        if (urlLoader) {\n            urlLoader.abort();\n            urlLoader = null;\n        }\n    }\n\n    instance = {\n        load: load,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nManifestLoader.__dashjs_factory_name = 'ManifestLoader';\n\nconst factory = FactoryMaker.getClassFactory(ManifestLoader);\nexport default factory;\n"]},"metadata":{},"sourceType":"script"}