{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _DVBReporting = require('./reporters/DVBReporting');\n\nvar _DVBReporting2 = _interopRequireDefault(_DVBReporting);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ReportingFactory(config) {\n  config = config || {};\n  var knownReportingSchemeIdUris = {\n    'urn:dvb:dash:reporting:2014': _DVBReporting2.default\n  };\n  var context = this.context;\n  var instance = void 0;\n  var logger = config.debug ? config.debug.getLogger(instance) : {};\n  var metricsConstants = config.metricsConstants;\n\n  function create(entry, rangeController) {\n    var reporting = void 0;\n\n    try {\n      reporting = knownReportingSchemeIdUris[entry.schemeIdUri](context).create({\n        metricsConstants: metricsConstants\n      });\n      reporting.initialize(entry, rangeController);\n    } catch (e) {\n      reporting = null;\n      logger.error('ReportingFactory: could not create Reporting with schemeIdUri ' + entry.schemeIdUri + ' (' + e.message + ')');\n    }\n\n    return reporting;\n  }\n\n  function register(schemeIdUri, moduleName) {\n    knownReportingSchemeIdUris[schemeIdUri] = moduleName;\n  }\n\n  function unregister(schemeIdUri) {\n    delete knownReportingSchemeIdUris[schemeIdUri];\n  }\n\n  instance = {\n    create: create,\n    register: register,\n    unregister: unregister\n  };\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nReportingFactory.__dashjs_factory_name = 'ReportingFactory';\nexports.default = dashjs.FactoryMaker.getSingletonFactory(ReportingFactory);\n/* jshint ignore:line */","map":{"version":3,"sources":["../../../../../../src/streaming/metrics/reporting/ReportingFactory.js"],"names":["config","knownReportingSchemeIdUris","DVBReporting","context","instance","logger","metricsConstants","reporting","entry","e","create","register","unregister","ReportingFactory","dashjs"],"mappings":";;;;;;AA+BA,IAAA,aAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;;;;;;;AAEA;;AAAA,SAAA,gBAAA,CAAA,MAAA,EAAkC;AAC9BA,EAAAA,MAAAA,GAASA,MAAAA,IAATA,EAAAA;AAEA,MAAMC,0BAAAA,GAA6B;AAC/B,mCAA+BC,cAAAA,CADnC;AAAmC,GAAnC;AAIA,MAAMC,OAAAA,GAAU,KAAhB,OAAA;AACA,MAAIC,QAAAA,GAAAA,KAAJ,CAAA;AACA,MAAMC,MAAAA,GAASL,MAAAA,CAAAA,KAAAA,GAAeA,MAAAA,CAAAA,KAAAA,CAAAA,SAAAA,CAAfA,QAAeA,CAAfA,GAAf,EAAA;AACA,MAAMM,gBAAAA,GAAmBN,MAAAA,CAAzB,gBAAA;;AAEA,WAAA,MAAA,CAAA,KAAA,EAAA,eAAA,EAAwC;AACpC,QAAIO,SAAAA,GAAAA,KAAJ,CAAA;;AAEA,QAAI;AACAA,MAAAA,SAAAA,GAAYN,0BAAAA,CAA2BO,KAAAA,CAA3BP,WAAAA,CAAAA,CAAAA,OAAAA,EAAAA,MAAAA,CAA8D;AACtEK,QAAAA,gBAAAA,EADJC;AAA0E,OAA9DN,CAAZM;AAIAA,MAAAA,SAAAA,CAAAA,UAAAA,CAAAA,KAAAA,EAAAA,eAAAA;AACF,KANF,CAME,OAAA,CAAA,EAAU;AACRA,MAAAA,SAAAA,GAAAA,IAAAA;AACAF,MAAAA,MAAAA,CAAAA,KAAAA,CAAAA,mEAA8EG,KAAAA,CAA9EH,WAAAA,GAAAA,IAAAA,GAAoGI,CAAAA,CAApGJ,OAAAA,GAAAA,GAAAA;AAGJ;;AAAA,WAAA,SAAA;AAGJ;;AAAA,WAAA,QAAA,CAAA,WAAA,EAAA,UAAA,EAA2C;AACvCJ,IAAAA,0BAAAA,CAAAA,WAAAA,CAAAA,GAAAA,UAAAA;AAGJ;;AAAA,WAAA,UAAA,CAAA,WAAA,EAAiC;AAC7B,WAAOA,0BAAAA,CAAP,WAAOA,CAAP;AAGJG;;AAAAA,EAAAA,QAAAA,GAAW;AACPM,IAAAA,MAAAA,EADO,MAAA;AAEPC,IAAAA,QAAAA,EAFO,QAAA;AAGPC,IAAAA,UAAAA,EAHJR;AAAW,GAAXA;AAMA,SAAA,QAAA;AA5EJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EAS,gBAAAA,CAAAA,qBAAAA,GAAAA,kBAAAA;kBACeC,MAAAA,CAAAA,YAAAA,CAAAA,mBAAAA,CAAAA,gBAAAA,C;AAA2D","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DVBReporting from './reporters/DVBReporting';\n\nfunction ReportingFactory(config) {\n    config = config || {};\n\n    const knownReportingSchemeIdUris = {\n        'urn:dvb:dash:reporting:2014': DVBReporting\n    };\n\n    const context = this.context;\n    let instance;\n    const logger = config.debug ? config.debug.getLogger(instance) : {};\n    const metricsConstants = config.metricsConstants;\n\n    function create(entry, rangeController) {\n        let reporting;\n\n        try {\n            reporting = knownReportingSchemeIdUris[entry.schemeIdUri](context).create({\n                metricsConstants: metricsConstants\n            });\n\n            reporting.initialize(entry, rangeController);\n        } catch (e) {\n            reporting = null;\n            logger.error(`ReportingFactory: could not create Reporting with schemeIdUri ${entry.schemeIdUri} (${e.message})`);\n        }\n\n        return reporting;\n    }\n\n    function register(schemeIdUri, moduleName) {\n        knownReportingSchemeIdUris[schemeIdUri] = moduleName;\n    }\n\n    function unregister(schemeIdUri) {\n        delete knownReportingSchemeIdUris[schemeIdUri];\n    }\n\n    instance = {\n        create:     create,\n        register:   register,\n        unregister: unregister\n    };\n\n    return instance;\n}\n\nReportingFactory.__dashjs_factory_name = 'ReportingFactory';\nexport default dashjs.FactoryMaker.getSingletonFactory(ReportingFactory); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}