{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _RangeController = require('./RangeController');\n\nvar _RangeController2 = _interopRequireDefault(_RangeController);\n\nvar _ReportingController = require('./ReportingController');\n\nvar _ReportingController2 = _interopRequireDefault(_ReportingController);\n\nvar _MetricsHandlersController = require('./MetricsHandlersController');\n\nvar _MetricsHandlersController2 = _interopRequireDefault(_MetricsHandlersController);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction MetricsController(config) {\n  config = config || {};\n  var metricsHandlersController = void 0,\n      reportingController = void 0,\n      rangeController = void 0,\n      instance = void 0;\n  var context = this.context;\n\n  function initialize(metricsEntry) {\n    try {\n      rangeController = (0, _RangeController2.default)(context).create({\n        mediaElement: config.mediaElement\n      });\n      rangeController.initialize(metricsEntry.Range);\n      reportingController = (0, _ReportingController2.default)(context).create({\n        debug: config.debug,\n        metricsConstants: config.metricsConstants\n      });\n      reportingController.initialize(metricsEntry.Reporting, rangeController);\n      metricsHandlersController = (0, _MetricsHandlersController2.default)(context).create({\n        debug: config.debug,\n        eventBus: config.eventBus,\n        metricsConstants: config.metricsConstants,\n        events: config.events\n      });\n      metricsHandlersController.initialize(metricsEntry.metrics, reportingController);\n    } catch (e) {\n      reset();\n      throw e;\n    }\n  }\n\n  function reset() {\n    if (metricsHandlersController) {\n      metricsHandlersController.reset();\n    }\n\n    if (reportingController) {\n      reportingController.reset();\n    }\n\n    if (rangeController) {\n      rangeController.reset();\n    }\n  }\n\n  instance = {\n    initialize: initialize,\n    reset: reset\n  };\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nMetricsController.__dashjs_factory_name = 'MetricsController';\nexports.default = dashjs.FactoryMaker.getClassFactory(MetricsController);\n/* jshint ignore:line */","map":{"version":3,"sources":["../../../../../../src/streaming/metrics/controllers/MetricsController.js"],"names":["config","metricsHandlersController","reportingController","rangeController","instance","context","mediaElement","metricsEntry","debug","metricsConstants","eventBus","events","reset","initialize","MetricsController","dashjs"],"mappings":";;;;;;AA+BA,IAAA,gBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;;;AACA,IAAA,oBAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;;;AACA,IAAA,0BAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;;;;;;;AAEA;;AAAA,SAAA,iBAAA,CAAA,MAAA,EAAmC;AAE/BA,EAAAA,MAAAA,GAASA,MAAAA,IAATA,EAAAA;AACA,MAAIC,yBAAAA,GAAAA,KAAJ,CAAA;AAAA,MACIC,mBAAAA,GAAAA,KADJ,CAAA;AAAA,MAEIC,eAAAA,GAAAA,KAFJ,CAAA;AAAA,MAGIC,QAAAA,GAAAA,KAHJ,CAAA;AAKA,MAAIC,OAAAA,GAAU,KAAd,OAAA;;AAEA,WAAA,UAAA,CAAA,YAAA,EAAkC;AAC9B,QAAI;AACAF,MAAAA,eAAAA,GAAkB,CAAA,GAAA,iBAAA,CAAA,OAAA,EAAA,OAAA,EAAA,MAAA,CAAgC;AAC9CG,QAAAA,YAAAA,EAAcN,MAAAA,CADlBG;AAAkD,OAAhC,CAAlBA;AAIAA,MAAAA,eAAAA,CAAAA,UAAAA,CAA2BI,YAAAA,CAA3BJ,KAAAA;AAEAD,MAAAA,mBAAAA,GAAsB,CAAA,GAAA,qBAAA,CAAA,OAAA,EAAA,OAAA,EAAA,MAAA,CAAoC;AACtDM,QAAAA,KAAAA,EAAOR,MAAAA,CAD+C,KAAA;AAEtDS,QAAAA,gBAAAA,EAAkBT,MAAAA,CAFtBE;AAA0D,OAApC,CAAtBA;AAKAA,MAAAA,mBAAAA,CAAAA,UAAAA,CAA+BK,YAAAA,CAA/BL,SAAAA,EAAAA,eAAAA;AAEAD,MAAAA,yBAAAA,GAA4B,CAAA,GAAA,2BAAA,CAAA,OAAA,EAAA,OAAA,EAAA,MAAA,CAA0C;AAClEO,QAAAA,KAAAA,EAAOR,MAAAA,CAD2D,KAAA;AAElEU,QAAAA,QAAAA,EAAUV,MAAAA,CAFwD,QAAA;AAGlES,QAAAA,gBAAAA,EAAkBT,MAAAA,CAHgD,gBAAA;AAIlEW,QAAAA,MAAAA,EAAQX,MAAAA,CAJZC;AAAsE,OAA1C,CAA5BA;AAOAA,MAAAA,yBAAAA,CAAAA,UAAAA,CAAqCM,YAAAA,CAArCN,OAAAA,EAAAA,mBAAAA;AACF,KAtBF,CAsBE,OAAA,CAAA,EAAU;AACRW,MAAAA,KAAAA;AACA,YAAA,CAAA;AAEP;AAED;;AAAA,WAAA,KAAA,GAAiB;AACb,QAAA,yBAAA,EAA+B;AAC3BX,MAAAA,yBAAAA,CAAAA,KAAAA;AAGJ;;AAAA,QAAA,mBAAA,EAAyB;AACrBC,MAAAA,mBAAAA,CAAAA,KAAAA;AAGJ;;AAAA,QAAA,eAAA,EAAqB;AACjBC,MAAAA,eAAAA,CAAAA,KAAAA;AAEP;AAEDC;;AAAAA,EAAAA,QAAAA,GAAW;AACPS,IAAAA,UAAAA,EADO,UAAA;AAEPD,IAAAA,KAAAA,EAFJR;AAAW,GAAXA;AAKA,SAAA,QAAA;AA7FJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgGAU,iBAAAA,CAAAA,qBAAAA,GAAAA,mBAAAA;kBACeC,MAAAA,CAAAA,YAAAA,CAAAA,eAAAA,CAAAA,iBAAAA,C;AAAwD","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport RangeController from './RangeController';\nimport ReportingController from './ReportingController';\nimport MetricsHandlersController from './MetricsHandlersController';\n\nfunction MetricsController(config) {\n\n    config = config || {};\n    let metricsHandlersController,\n        reportingController,\n        rangeController,\n        instance;\n\n    let context = this.context;\n\n    function initialize(metricsEntry) {\n        try {\n            rangeController = RangeController(context).create({\n                mediaElement: config.mediaElement\n            });\n\n            rangeController.initialize(metricsEntry.Range);\n\n            reportingController = ReportingController(context).create({\n                debug: config.debug,\n                metricsConstants: config.metricsConstants\n            });\n\n            reportingController.initialize(metricsEntry.Reporting, rangeController);\n\n            metricsHandlersController = MetricsHandlersController(context).create({\n                debug: config.debug,\n                eventBus: config.eventBus,\n                metricsConstants: config.metricsConstants,\n                events: config.events\n            });\n\n            metricsHandlersController.initialize(metricsEntry.metrics, reportingController);\n        } catch (e) {\n            reset();\n            throw e;\n        }\n    }\n\n    function reset() {\n        if (metricsHandlersController) {\n            metricsHandlersController.reset();\n        }\n\n        if (reportingController) {\n            reportingController.reset();\n        }\n\n        if (rangeController) {\n            rangeController.reset();\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset\n    };\n\n    return instance;\n}\n\nMetricsController.__dashjs_factory_name = 'MetricsController';\nexport default dashjs.FactoryMaker.getClassFactory(MetricsController); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}