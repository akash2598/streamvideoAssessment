{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Constants = require('../constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _DataChunk = require('../vo/DataChunk');\n\nvar _DataChunk2 = _interopRequireDefault(_DataChunk);\n\nvar _FragmentModel = require('../models/FragmentModel');\n\nvar _FragmentModel2 = _interopRequireDefault(_FragmentModel);\n\nvar _FragmentLoader = require('../FragmentLoader');\n\nvar _FragmentLoader2 = _interopRequireDefault(_FragmentLoader);\n\nvar _RequestModifier = require('../utils/RequestModifier');\n\nvar _RequestModifier2 = _interopRequireDefault(_RequestModifier);\n\nvar _EventBus = require('../../core/EventBus');\n\nvar _EventBus2 = _interopRequireDefault(_EventBus);\n\nvar _Events = require('../../core/events/Events');\n\nvar _Events2 = _interopRequireDefault(_Events);\n\nvar _Errors = require('../../core/errors/Errors');\n\nvar _Errors2 = _interopRequireDefault(_Errors);\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Debug = require('../../core/Debug');\n\nvar _Debug2 = _interopRequireDefault(_Debug);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nfunction FragmentController(config) {\n  config = config || {};\n  var context = this.context;\n  var eventBus = (0, _EventBus2.default)(context).getInstance();\n  var errHandler = config.errHandler;\n  var mediaPlayerModel = config.mediaPlayerModel;\n  var dashMetrics = config.dashMetrics;\n  var debug = (0, _Debug2.default)(context).getInstance();\n  var streamInfo = config.streamInfo;\n  var instance = void 0,\n      logger = void 0,\n      fragmentModels = void 0;\n\n  function setup() {\n    logger = debug.getLogger(instance);\n    resetInitialSettings();\n    eventBus.on(_Events2.default.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, instance);\n    eventBus.on(_Events2.default.FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, instance);\n  }\n\n  function getStreamId() {\n    return streamInfo.id;\n  }\n\n  function getModel(type) {\n    var model = fragmentModels[type];\n\n    if (!model) {\n      model = (0, _FragmentModel2.default)(context).create({\n        streamInfo: streamInfo,\n        type: type,\n        dashMetrics: dashMetrics,\n        fragmentLoader: (0, _FragmentLoader2.default)(context).create({\n          dashMetrics: dashMetrics,\n          mediaPlayerModel: mediaPlayerModel,\n          errHandler: errHandler,\n          requestModifier: (0, _RequestModifier2.default)(context).getInstance(),\n          settings: config.settings,\n          boxParser: config.boxParser,\n          eventBus: eventBus,\n          events: _Events2.default,\n          errors: _Errors2.default,\n          dashConstants: config.dashConstants,\n          urlUtils: config.urlUtils\n        }),\n        debug: debug,\n        eventBus: eventBus,\n        events: _Events2.default\n      });\n      fragmentModels[type] = model;\n    }\n\n    return model;\n  }\n\n  function resetInitialSettings() {\n    for (var model in fragmentModels) {\n      fragmentModels[model].reset();\n    }\n\n    fragmentModels = {};\n  }\n\n  function reset() {\n    eventBus.off(_Events2.default.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\n    eventBus.off(_Events2.default.FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, this);\n    resetInitialSettings();\n  }\n\n  function createDataChunk(bytes, request, streamId, endFragment) {\n    var chunk = new _DataChunk2.default();\n    chunk.streamId = streamId;\n    chunk.mediaInfo = request.mediaInfo;\n    chunk.segmentType = request.type;\n    chunk.start = request.startTime;\n    chunk.duration = request.duration;\n    chunk.end = chunk.start + chunk.duration;\n    chunk.bytes = bytes;\n    chunk.index = request.index;\n    chunk.quality = request.quality;\n    chunk.representationId = request.representationId;\n    chunk.endFragment = endFragment;\n    return chunk;\n  }\n\n  function onFragmentLoadingCompleted(e) {\n    // Event propagation may have been stopped (see MssHandler)\n    if (!e.sender) return;\n    var request = e.request;\n    var bytes = e.response;\n    var isInit = request.isInitializationRequest();\n    var strInfo = request.mediaInfo.streamInfo;\n\n    if (e.error) {\n      if (request.mediaType === _Constants2.default.AUDIO || request.mediaType === _Constants2.default.VIDEO || request.mediaType === _Constants2.default.FRAGMENTED_TEXT) {\n        // add service location to blacklist controller - only for audio or video. text should not set errors\n        eventBus.trigger(_Events2.default.SERVICE_LOCATION_BLACKLIST_ADD, {\n          entry: e.request.serviceLocation\n        });\n      }\n    }\n\n    if (!bytes || !strInfo) {\n      logger.warn('No ' + request.mediaType + ' bytes to push or stream is inactive.');\n      return;\n    }\n\n    var chunk = createDataChunk(bytes, request, streamInfo.id, e.type !== _Events2.default.FRAGMENT_LOADING_PROGRESS);\n    eventBus.trigger(isInit ? _Events2.default.INIT_FRAGMENT_LOADED : _Events2.default.MEDIA_FRAGMENT_LOADED, {\n      chunk: chunk,\n      request: request\n    }, {\n      streamId: strInfo.id,\n      mediaType: request.mediaType\n    });\n  }\n\n  instance = {\n    getStreamId: getStreamId,\n    getModel: getModel,\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n\nFragmentController.__dashjs_factory_name = 'FragmentController';\nexports.default = _FactoryMaker2.default.getClassFactory(FragmentController);","map":{"version":3,"sources":["../../../../../src/streaming/controllers/FragmentController.js"],"names":["config","context","eventBus","errHandler","mediaPlayerModel","dashMetrics","debug","streamInfo","instance","logger","fragmentModels","resetInitialSettings","Events","model","type","fragmentLoader","requestModifier","settings","boxParser","events","errors","Errors","dashConstants","urlUtils","chunk","DataChunk","request","e","bytes","isInit","strInfo","Constants","entry","createDataChunk","streamId","mediaType","getStreamId","getModel","reset","setup","FragmentController","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport DataChunk from '../vo/DataChunk';\nimport FragmentModel from '../models/FragmentModel';\nimport FragmentLoader from '../FragmentLoader';\nimport RequestModifier from '../utils/RequestModifier';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport Errors from '../../core/errors/Errors';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\n\nfunction FragmentController( config ) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    const errHandler = config.errHandler;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const dashMetrics = config.dashMetrics;\n    const debug = Debug(context).getInstance();\n    const streamInfo = config.streamInfo;\n\n    let instance,\n        logger,\n        fragmentModels;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        resetInitialSettings();\n        eventBus.on(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, instance);\n        eventBus.on(Events.FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, instance);\n    }\n\n    function getStreamId() {\n        return streamInfo.id;\n    }\n\n    function getModel(type) {\n        let model = fragmentModels[type];\n        if (!model) {\n            model = FragmentModel(context).create({\n                streamInfo: streamInfo,\n                type: type,\n                dashMetrics: dashMetrics,\n                fragmentLoader: FragmentLoader(context).create({\n                    dashMetrics: dashMetrics,\n                    mediaPlayerModel: mediaPlayerModel,\n                    errHandler: errHandler,\n                    requestModifier: RequestModifier(context).getInstance(),\n                    settings: config.settings,\n                    boxParser: config.boxParser,\n                    eventBus: eventBus,\n                    events: Events,\n                    errors: Errors,\n                    dashConstants: config.dashConstants,\n                    urlUtils: config.urlUtils\n                }),\n                debug: debug,\n                eventBus: eventBus,\n                events: Events\n            });\n\n            fragmentModels[type] = model;\n        }\n\n        return model;\n    }\n\n    function resetInitialSettings() {\n        for (let model in fragmentModels) {\n            fragmentModels[model].reset();\n        }\n        fragmentModels = {};\n    }\n\n    function reset() {\n        eventBus.off(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\n        eventBus.off(Events.FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, this);\n        resetInitialSettings();\n    }\n\n    function createDataChunk(bytes, request, streamId, endFragment) {\n        const chunk = new DataChunk();\n\n        chunk.streamId = streamId;\n        chunk.mediaInfo = request.mediaInfo;\n        chunk.segmentType = request.type;\n        chunk.start = request.startTime;\n        chunk.duration = request.duration;\n        chunk.end = chunk.start + chunk.duration;\n        chunk.bytes = bytes;\n        chunk.index = request.index;\n        chunk.quality = request.quality;\n        chunk.representationId = request.representationId;\n        chunk.endFragment = endFragment;\n\n        return chunk;\n    }\n\n    function onFragmentLoadingCompleted(e) {\n        // Event propagation may have been stopped (see MssHandler)\n        if (!e.sender) return;\n\n        const request = e.request;\n        const bytes = e.response;\n        const isInit = request.isInitializationRequest();\n        const strInfo = request.mediaInfo.streamInfo;\n\n        if (e.error) {\n            if (request.mediaType === Constants.AUDIO || request.mediaType === Constants.VIDEO || request.mediaType === Constants.FRAGMENTED_TEXT) {\n                // add service location to blacklist controller - only for audio or video. text should not set errors\n                eventBus.trigger(Events.SERVICE_LOCATION_BLACKLIST_ADD, { entry: e.request.serviceLocation });\n            }\n        }\n\n        if (!bytes || !strInfo) {\n            logger.warn('No ' + request.mediaType + ' bytes to push or stream is inactive.');\n            return;\n        }\n        const chunk = createDataChunk(bytes, request, streamInfo.id, e.type !== Events.FRAGMENT_LOADING_PROGRESS);\n        eventBus.trigger(isInit ? Events.INIT_FRAGMENT_LOADED : Events.MEDIA_FRAGMENT_LOADED,\n            {\n                chunk: chunk,\n                request: request\n            },\n            { streamId: strInfo.id, mediaType: request.mediaType }\n        );\n    }\n\n    instance = {\n        getStreamId: getStreamId,\n        getModel: getModel,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nFragmentController.__dashjs_factory_name = 'FragmentController';\nexport default FactoryMaker.getClassFactory(FragmentController);\n"]},"metadata":{},"sourceType":"script"}