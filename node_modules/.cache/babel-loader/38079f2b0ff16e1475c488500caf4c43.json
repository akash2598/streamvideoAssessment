{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n* @class\n* @ignore\n*/\n\n\nvar CommonEncryption = function () {\n  function CommonEncryption() {\n    _classCallCheck(this, CommonEncryption);\n  }\n\n  _createClass(CommonEncryption, null, [{\n    key: 'findCencContentProtection',\n\n    /**\n    * Find and return the ContentProtection element in the given array\n    * that indicates support for MPEG Common Encryption\n    *\n    * @param {Array} cpArray array of content protection elements\n    * @returns {Object|null} the Common Encryption content protection element or\n    * null if one was not found\n    */\n    value: function findCencContentProtection(cpArray) {\n      var retVal = null;\n\n      for (var i = 0; i < cpArray.length; ++i) {\n        var cp = cpArray[i];\n        if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' && (cp.value.toLowerCase() === 'cenc' || cp.value.toLowerCase() === 'cbcs')) retVal = cp;\n      }\n\n      return retVal;\n    }\n    /**\n    * Returns just the data portion of a single PSSH\n    *\n    * @param {ArrayBuffer} pssh - the PSSH\n    * @return {ArrayBuffer} data portion of the PSSH\n    */\n\n  }, {\n    key: 'getPSSHData',\n    value: function getPSSHData(pssh) {\n      var offset = 8; // Box size and type fields\n\n      var view = new DataView(pssh); // Read version\n\n      var version = view.getUint8(offset);\n      offset += 20; // Version (1), flags (3), system ID (16)\n\n      if (version > 0) {\n        offset += 4 + 16 * view.getUint32(offset); // Key ID count (4) and All key IDs (16*count)\n      }\n\n      offset += 4; // Data size\n\n      return pssh.slice(offset);\n    }\n    /**\n    * Returns the PSSH associated with the given key system from the concatenated\n    * list of PSSH boxes in the given initData\n    *\n    * @param {KeySystem} keySystem the desired\n    * key system\n    * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\n    * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\n    * or null if a valid association could not be found.\n    */\n\n  }, {\n    key: 'getPSSHForKeySystem',\n    value: function getPSSHForKeySystem(keySystem, initData) {\n      var psshList = CommonEncryption.parsePSSHList(initData);\n\n      if (keySystem && psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\n        return psshList[keySystem.uuid.toLowerCase()];\n      }\n\n      return null;\n    }\n    /**\n    * Parse a standard common encryption PSSH which contains a simple\n    * base64-encoding of the init data\n    *\n    * @param {Object} cpData the ContentProtection element\n    * @param {BASE64} BASE64 reference\n    * @returns {ArrayBuffer|null} the init data or null if not found\n    */\n\n  }, {\n    key: 'parseInitDataFromContentProtection',\n    value: function parseInitDataFromContentProtection(cpData, BASE64) {\n      if ('pssh' in cpData) {\n        // Remove whitespaces and newlines from pssh text\n        cpData.pssh.__text = cpData.pssh.__text.replace(/\\r?\\n|\\r/g, '').replace(/\\s+/g, '');\n        return BASE64.decodeArray(cpData.pssh.__text).buffer;\n      }\n\n      return null;\n    }\n    /**\n    * Parses list of PSSH boxes into keysystem-specific PSSH data\n    *\n    * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\n    * CDM as initialization data when CommonEncryption content is detected\n    * @returns {Object|Array} an object that has a property named according to each of\n    * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\n    * and a ArrayBuffer (the entire PSSH box) as the property value\n    */\n\n  }, {\n    key: 'parsePSSHList',\n    value: function parsePSSHList(data) {\n      if (data === null || data === undefined) return [];\n      var dv = new DataView(data.buffer || data); // data.buffer first for Uint8Array support\n\n      var done = false;\n      var pssh = {}; // TODO: Need to check every data read for end of buffer\n\n      var byteCursor = 0;\n\n      while (!done) {\n        var size = void 0,\n            nextBox = void 0,\n            version = void 0,\n            systemID = void 0,\n            psshDataSize = void 0;\n        var boxStart = byteCursor;\n        if (byteCursor >= dv.buffer.byteLength) break;\n        /* Box size */\n\n        size = dv.getUint32(byteCursor);\n        nextBox = byteCursor + size;\n        byteCursor += 4;\n        /* Verify PSSH */\n\n        if (dv.getUint32(byteCursor) !== 0x70737368) {\n          byteCursor = nextBox;\n          continue;\n        }\n\n        byteCursor += 4;\n        /* Version must be 0 or 1 */\n\n        version = dv.getUint8(byteCursor);\n\n        if (version !== 0 && version !== 1) {\n          byteCursor = nextBox;\n          continue;\n        }\n\n        byteCursor++;\n        byteCursor += 3;\n        /* skip flags */\n        // 16-byte UUID/SystemID\n\n        systemID = '';\n        var i = void 0,\n            val = void 0;\n\n        for (i = 0; i < 4; i++) {\n          val = dv.getUint8(byteCursor + i).toString(16);\n          systemID += val.length === 1 ? '0' + val : val;\n        }\n\n        byteCursor += 4;\n        systemID += '-';\n\n        for (i = 0; i < 2; i++) {\n          val = dv.getUint8(byteCursor + i).toString(16);\n          systemID += val.length === 1 ? '0' + val : val;\n        }\n\n        byteCursor += 2;\n        systemID += '-';\n\n        for (i = 0; i < 2; i++) {\n          val = dv.getUint8(byteCursor + i).toString(16);\n          systemID += val.length === 1 ? '0' + val : val;\n        }\n\n        byteCursor += 2;\n        systemID += '-';\n\n        for (i = 0; i < 2; i++) {\n          val = dv.getUint8(byteCursor + i).toString(16);\n          systemID += val.length === 1 ? '0' + val : val;\n        }\n\n        byteCursor += 2;\n        systemID += '-';\n\n        for (i = 0; i < 6; i++) {\n          val = dv.getUint8(byteCursor + i).toString(16);\n          systemID += val.length === 1 ? '0' + val : val;\n        }\n\n        byteCursor += 6;\n        systemID = systemID.toLowerCase();\n        /* PSSH Data Size */\n\n        psshDataSize = dv.getUint32(byteCursor);\n        byteCursor += 4;\n        /* PSSH Data */\n\n        pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\n        byteCursor = nextBox;\n      }\n\n      return pssh;\n    }\n  }]);\n\n  return CommonEncryption;\n}();\n\nexports.default = CommonEncryption;","map":{"version":3,"sources":["../../../../../src/streaming/protection/CommonEncryption.js"],"names":["CommonEncryption","cpArray","retVal","i","cp","pssh","offset","view","version","keySystem","initData","psshList","cpData","BASE64","data","dv","done","byteCursor","size","nextBox","systemID","psshDataSize","boxStart","val"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;;AAIMA,IAAAA,gB;;;;;;;;AACF;;;;;;;;8CAQiCC,O,EAAS;AACtC,UAAIC,MAAAA,GAAJ,IAAA;;AACA,WAAK,IAAIC,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAIF,OAAAA,CAApB,MAAA,EAAoC,EAApC,CAAA,EAAyC;AACrC,YAAIG,EAAAA,GAAKH,OAAAA,CAAT,CAASA,CAAT;AACA,YAAIG,EAAAA,CAAAA,WAAAA,CAAAA,WAAAA,OAAAA,kCAAAA,KACCA,EAAAA,CAAAA,KAAAA,CAAAA,WAAAA,OAAAA,MAAAA,IAAqCA,EAAAA,CAAAA,KAAAA,CAAAA,WAAAA,OAD1C,MAAIA,CAAJ,EAEIF,MAAAA,GAAAA,EAAAA;AAER;;AAAA,aAAA,MAAA;AAGJ;AAAA;;;;;;;;;gCAMmBG,I,EAAM;AACrB,UAAIC,MAAAA,GAAJ,CAAA,CADqB,CACL;;AAChB,UAAIC,IAAAA,GAAO,IAAA,QAAA,CAAX,IAAW,CAAX,CAFqB,CAIrB;;AACA,UAAIC,OAAAA,GAAUD,IAAAA,CAAAA,QAAAA,CAAd,MAAcA,CAAd;AAEAD,MAAAA,MAAAA,IAAAA,EAAAA,CAPqB,CAOP;;AAEd,UAAIE,OAAAA,GAAJ,CAAA,EAAiB;AACbF,QAAAA,MAAAA,IAAU,IAAK,KAAKC,IAAAA,CAAAA,SAAAA,CAApBD,MAAoBC,CAApBD,CADa,CACgC;AAGjDA;;AAAAA,MAAAA,MAAAA,IAAAA,CAAAA,CAbqB,CAaR;;AACb,aAAOD,IAAAA,CAAAA,KAAAA,CAAP,MAAOA,CAAP;AAGJ;AAAA;;;;;;;;;;;;;wCAU2BI,S,EAAWC,Q,EAAU;AAC5C,UAAIC,QAAAA,GAAWX,gBAAAA,CAAAA,aAAAA,CAAf,QAAeA,CAAf;;AACA,UAAIS,SAAAA,IAAaE,QAAAA,CAAAA,cAAAA,CAAwBF,SAAAA,CAAAA,IAAAA,CAAzC,WAAyCA,EAAxBE,CAAjB,EAAwE;AACpE,eAAOA,QAAAA,CAASF,SAAAA,CAAAA,IAAAA,CAAhB,WAAgBA,EAATE,CAAP;AAEJ;;AAAA,aAAA,IAAA;AAGJ;AAAA;;;;;;;;;;;uDAQ0CC,M,EAAQC,M,EAAQ;AACtD,UAAI,UAAJ,MAAA,EAAsB;AAElB;AACAD,QAAAA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA,GAAqBA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,OAAAA,CAAAA,WAAAA,EAAAA,EAAAA,EAAAA,OAAAA,CAAAA,MAAAA,EAArBA,EAAqBA,CAArBA;AAEA,eAAOC,MAAAA,CAAAA,WAAAA,CAAmBD,MAAAA,CAAAA,IAAAA,CAAnBC,MAAAA,EAAP,MAAA;AAEJ;;AAAA,aAAA,IAAA;AAGJ;AAAA;;;;;;;;;;;;kCASqBC,I,EAAM;AAEvB,UAAIA,IAAAA,KAAAA,IAAAA,IAAiBA,IAAAA,KAArB,SAAA,EACI,OAAA,EAAA;AAEJ,UAAIC,EAAAA,GAAK,IAAA,QAAA,CAAaD,IAAAA,CAAAA,MAAAA,IAAtB,IAAS,CAAT,CALuB,CAKqB;;AAC5C,UAAIE,IAAAA,GAAJ,KAAA;AACA,UAAIX,IAAAA,GAAJ,EAAA,CAPuB,CASvB;;AACA,UAAIY,UAAAA,GAAJ,CAAA;;AACA,aAAO,CAAP,IAAA,EAAc;AAEV,YAAIC,IAAAA,GAAAA,KAAJ,CAAA;AAAA,YACIC,OAAAA,GAAAA,KADJ,CAAA;AAAA,YAEIX,OAAAA,GAAAA,KAFJ,CAAA;AAAA,YAGIY,QAAAA,GAAAA,KAHJ,CAAA;AAAA,YAIIC,YAAAA,GAAAA,KAJJ,CAAA;AAKA,YAAIC,QAAAA,GAAJ,UAAA;AAEA,YAAIL,UAAAA,IAAcF,EAAAA,CAAAA,MAAAA,CAAlB,UAAA,EACI;AAEJ;;AACAG,QAAAA,IAAAA,GAAOH,EAAAA,CAAAA,SAAAA,CAAPG,UAAOH,CAAPG;AACAC,QAAAA,OAAAA,GAAUF,UAAAA,GAAVE,IAAAA;AACAF,QAAAA,UAAAA,IAAAA,CAAAA;AAEA;;AACA,YAAIF,EAAAA,CAAAA,SAAAA,CAAAA,UAAAA,MAAJ,UAAA,EAA6C;AACzCE,UAAAA,UAAAA,GAAAA,OAAAA;AACA;AAEJA;;AAAAA,QAAAA,UAAAA,IAAAA,CAAAA;AAEA;;AACAT,QAAAA,OAAAA,GAAUO,EAAAA,CAAAA,QAAAA,CAAVP,UAAUO,CAAVP;;AACA,YAAIA,OAAAA,KAAAA,CAAAA,IAAiBA,OAAAA,KAArB,CAAA,EAAoC;AAChCS,UAAAA,UAAAA,GAAAA,OAAAA;AACA;AAEJA;;AAAAA,QAAAA,UAAAA;AAEAA,QAAAA,UAAAA,IAAAA,CAAAA;AAAiB;AAEjB;;AACAG,QAAAA,QAAAA,GAAAA,EAAAA;AACA,YAAIjB,CAAAA,GAAAA,KAAJ,CAAA;AAAA,YAAOoB,GAAAA,GAAAA,KAAP,CAAA;;AACA,aAAKpB,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,CAAA,EAAmBA,CAAnB,EAAA,EAAwB;AACpBoB,UAAAA,GAAAA,GAAMR,EAAAA,CAAAA,QAAAA,CAAYE,UAAAA,GAAZF,CAAAA,EAAAA,QAAAA,CAANQ,EAAMR,CAANQ;AACAH,UAAAA,QAAAA,IAAaG,GAAAA,CAAAA,MAAAA,KAAD,CAACA,GAAoB,MAArB,GAACA,GAAbH,GAAAA;AAEJH;;AAAAA,QAAAA,UAAAA,IAAAA,CAAAA;AACAG,QAAAA,QAAAA,IAAAA,GAAAA;;AACA,aAAKjB,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,CAAA,EAAmBA,CAAnB,EAAA,EAAwB;AACpBoB,UAAAA,GAAAA,GAAMR,EAAAA,CAAAA,QAAAA,CAAYE,UAAAA,GAAZF,CAAAA,EAAAA,QAAAA,CAANQ,EAAMR,CAANQ;AACAH,UAAAA,QAAAA,IAAaG,GAAAA,CAAAA,MAAAA,KAAD,CAACA,GAAoB,MAArB,GAACA,GAAbH,GAAAA;AAEJH;;AAAAA,QAAAA,UAAAA,IAAAA,CAAAA;AACAG,QAAAA,QAAAA,IAAAA,GAAAA;;AACA,aAAKjB,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,CAAA,EAAmBA,CAAnB,EAAA,EAAwB;AACpBoB,UAAAA,GAAAA,GAAMR,EAAAA,CAAAA,QAAAA,CAAYE,UAAAA,GAAZF,CAAAA,EAAAA,QAAAA,CAANQ,EAAMR,CAANQ;AACAH,UAAAA,QAAAA,IAAaG,GAAAA,CAAAA,MAAAA,KAAD,CAACA,GAAoB,MAArB,GAACA,GAAbH,GAAAA;AAEJH;;AAAAA,QAAAA,UAAAA,IAAAA,CAAAA;AACAG,QAAAA,QAAAA,IAAAA,GAAAA;;AACA,aAAKjB,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,CAAA,EAAmBA,CAAnB,EAAA,EAAwB;AACpBoB,UAAAA,GAAAA,GAAMR,EAAAA,CAAAA,QAAAA,CAAYE,UAAAA,GAAZF,CAAAA,EAAAA,QAAAA,CAANQ,EAAMR,CAANQ;AACAH,UAAAA,QAAAA,IAAaG,GAAAA,CAAAA,MAAAA,KAAD,CAACA,GAAoB,MAArB,GAACA,GAAbH,GAAAA;AAEJH;;AAAAA,QAAAA,UAAAA,IAAAA,CAAAA;AACAG,QAAAA,QAAAA,IAAAA,GAAAA;;AACA,aAAKjB,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,CAAA,EAAmBA,CAAnB,EAAA,EAAwB;AACpBoB,UAAAA,GAAAA,GAAMR,EAAAA,CAAAA,QAAAA,CAAYE,UAAAA,GAAZF,CAAAA,EAAAA,QAAAA,CAANQ,EAAMR,CAANQ;AACAH,UAAAA,QAAAA,IAAaG,GAAAA,CAAAA,MAAAA,KAAD,CAACA,GAAoB,MAArB,GAACA,GAAbH,GAAAA;AAEJH;;AAAAA,QAAAA,UAAAA,IAAAA,CAAAA;AAEAG,QAAAA,QAAAA,GAAWA,QAAAA,CAAXA,WAAWA,EAAXA;AAEA;;AACAC,QAAAA,YAAAA,GAAeN,EAAAA,CAAAA,SAAAA,CAAfM,UAAeN,CAAfM;AACAJ,QAAAA,UAAAA,IAAAA,CAAAA;AAEA;;AACAZ,QAAAA,IAAAA,CAAAA,QAAAA,CAAAA,GAAiBU,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAAA,QAAAA,EAAjBV,OAAiBU,CAAjBV;AACAY,QAAAA,UAAAA,GAAAA,OAAAA;AAGJ;;AAAA,aAAA,IAAA;;;;;GAlLFjB;;kBAsLSA,gB","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @class\n * @ignore\n */\nclass CommonEncryption {\n    /**\n     * Find and return the ContentProtection element in the given array\n     * that indicates support for MPEG Common Encryption\n     *\n     * @param {Array} cpArray array of content protection elements\n     * @returns {Object|null} the Common Encryption content protection element or\n     * null if one was not found\n     */\n    static findCencContentProtection(cpArray) {\n        let retVal = null;\n        for (let i = 0; i < cpArray.length; ++i) {\n            let cp = cpArray[i];\n            if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' &&\n                (cp.value.toLowerCase() === 'cenc' || cp.value.toLowerCase() === 'cbcs'))\n                retVal = cp;\n        }\n        return retVal;\n    }\n\n    /**\n     * Returns just the data portion of a single PSSH\n     *\n     * @param {ArrayBuffer} pssh - the PSSH\n     * @return {ArrayBuffer} data portion of the PSSH\n     */\n    static getPSSHData(pssh) {\n        let offset = 8; // Box size and type fields\n        let view = new DataView(pssh);\n\n        // Read version\n        let version = view.getUint8(offset);\n\n        offset += 20; // Version (1), flags (3), system ID (16)\n\n        if (version > 0) {\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\n        }\n\n        offset += 4; // Data size\n        return pssh.slice(offset);\n    }\n\n    /**\n     * Returns the PSSH associated with the given key system from the concatenated\n     * list of PSSH boxes in the given initData\n     *\n     * @param {KeySystem} keySystem the desired\n     * key system\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\n     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\n     * or null if a valid association could not be found.\n     */\n    static getPSSHForKeySystem(keySystem, initData) {\n        let psshList = CommonEncryption.parsePSSHList(initData);\n        if (keySystem && psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\n            return psshList[keySystem.uuid.toLowerCase()];\n        }\n        return null;\n    }\n\n    /**\n     * Parse a standard common encryption PSSH which contains a simple\n     * base64-encoding of the init data\n     *\n     * @param {Object} cpData the ContentProtection element\n     * @param {BASE64} BASE64 reference\n     * @returns {ArrayBuffer|null} the init data or null if not found\n     */\n    static parseInitDataFromContentProtection(cpData, BASE64) {\n        if ('pssh' in cpData) {\n\n            // Remove whitespaces and newlines from pssh text\n            cpData.pssh.__text = cpData.pssh.__text.replace(/\\r?\\n|\\r/g, '').replace(/\\s+/g, '');\n\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\n        }\n        return null;\n    }\n\n    /**\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\n     *\n     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\n     * CDM as initialization data when CommonEncryption content is detected\n     * @returns {Object|Array} an object that has a property named according to each of\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\n     * and a ArrayBuffer (the entire PSSH box) as the property value\n     */\n    static parsePSSHList(data) {\n\n        if (data === null || data === undefined)\n            return [];\n\n        let dv = new DataView(data.buffer || data); // data.buffer first for Uint8Array support\n        let done = false;\n        let pssh = {};\n\n        // TODO: Need to check every data read for end of buffer\n        let byteCursor = 0;\n        while (!done) {\n\n            let size,\n                nextBox,\n                version,\n                systemID,\n                psshDataSize;\n            let boxStart = byteCursor;\n\n            if (byteCursor >= dv.buffer.byteLength)\n                break;\n\n            /* Box size */\n            size = dv.getUint32(byteCursor);\n            nextBox = byteCursor + size;\n            byteCursor += 4;\n\n            /* Verify PSSH */\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor += 4;\n\n            /* Version must be 0 or 1 */\n            version = dv.getUint8(byteCursor);\n            if (version !== 0 && version !== 1) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor++;\n\n            byteCursor += 3; /* skip flags */\n\n            // 16-byte UUID/SystemID\n            systemID = '';\n            let i, val;\n            for (i = 0; i < 4; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 4;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 6; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 6;\n\n            systemID = systemID.toLowerCase();\n\n            /* PSSH Data Size */\n            psshDataSize = dv.getUint32(byteCursor);\n            byteCursor += 4;\n\n            /* PSSH Data */\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\n            byteCursor = nextBox;\n        }\n\n        return pssh;\n    }\n}\n\nexport default CommonEncryption;\n"]},"metadata":{},"sourceType":"script"}