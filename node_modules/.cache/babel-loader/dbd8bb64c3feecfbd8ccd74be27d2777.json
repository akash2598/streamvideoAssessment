{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Constants = require('./constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _URLLoader = require('./net/URLLoader');\n\nvar _URLLoader2 = _interopRequireDefault(_URLLoader);\n\nvar _HeadRequest = require('./vo/HeadRequest');\n\nvar _HeadRequest2 = _interopRequireDefault(_HeadRequest);\n\nvar _DashJSError = require('./vo/DashJSError');\n\nvar _DashJSError2 = _interopRequireDefault(_DashJSError);\n\nvar _FactoryMaker = require('../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction FragmentLoader(config) {\n  config = config || {};\n  var context = this.context;\n  var eventBus = config.eventBus;\n  var events = config.events;\n  var urlUtils = config.urlUtils;\n  var errors = config.errors;\n  var instance = void 0,\n      urlLoader = void 0;\n\n  function setup() {\n    urlLoader = (0, _URLLoader2.default)(context).create({\n      errHandler: config.errHandler,\n      errors: errors,\n      dashMetrics: config.dashMetrics,\n      mediaPlayerModel: config.mediaPlayerModel,\n      requestModifier: config.requestModifier,\n      useFetch: config.settings.get().streaming.lowLatencyEnabled,\n      urlUtils: urlUtils,\n      constants: _Constants2.default,\n      boxParser: config.boxParser,\n      dashConstants: config.dashConstants,\n      requestTimeout: config.settings.get().streaming.fragmentRequestTimeout\n    });\n  }\n\n  function checkForExistence(request) {\n    var report = function report(success) {\n      eventBus.trigger(events.CHECK_FOR_EXISTENCE_COMPLETED, {\n        request: request,\n        exists: success\n      });\n    };\n\n    if (request) {\n      var headRequest = new _HeadRequest2.default(request.url);\n      urlLoader.load({\n        request: headRequest,\n        success: function success() {\n          report(true);\n        },\n        error: function error() {\n          report(false);\n        }\n      });\n    } else {\n      report(false);\n    }\n  }\n\n  function load(request) {\n    var report = function report(data, error) {\n      eventBus.trigger(events.LOADING_COMPLETED, {\n        request: request,\n        response: data || null,\n        error: error || null,\n        sender: instance\n      });\n    };\n\n    if (request) {\n      urlLoader.load({\n        request: request,\n        progress: function progress(event) {\n          eventBus.trigger(events.LOADING_PROGRESS, {\n            request: request,\n            stream: event.stream\n          });\n\n          if (event.data) {\n            eventBus.trigger(events.LOADING_DATA_PROGRESS, {\n              request: request,\n              response: event.data || null,\n              error: null,\n              sender: instance\n            });\n          }\n        },\n        success: function success(data) {\n          report(data);\n        },\n        error: function error(request, statusText, errorText) {\n          report(undefined, new _DashJSError2.default(errors.FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE, errorText, statusText));\n        },\n        abort: function abort(request) {\n          if (request) {\n            eventBus.trigger(events.LOADING_ABANDONED, {\n              mediaType: request.mediaType,\n              request: request,\n              sender: instance\n            });\n          }\n        }\n      });\n    } else {\n      report(undefined, new _DashJSError2.default(errors.FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE, errors.FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE));\n    }\n  }\n\n  function abort() {\n    if (urlLoader) {\n      urlLoader.abort();\n    }\n  }\n\n  function reset() {\n    if (urlLoader) {\n      urlLoader.abort();\n      urlLoader = null;\n    }\n  }\n\n  instance = {\n    checkForExistence: checkForExistence,\n    load: load,\n    abort: abort,\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nFragmentLoader.__dashjs_factory_name = 'FragmentLoader';\nexports.default = _FactoryMaker2.default.getClassFactory(FragmentLoader);","map":{"version":3,"sources":["../../../../src/streaming/FragmentLoader.js"],"names":["config","context","eventBus","events","urlUtils","errors","instance","urlLoader","errHandler","dashMetrics","mediaPlayerModel","requestModifier","useFetch","constants","Constants","boxParser","dashConstants","requestTimeout","report","request","exists","headRequest","HeadRequest","success","error","response","data","sender","progress","stream","event","DashJSError","abort","mediaType","checkForExistence","load","reset","setup","FragmentLoader","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from './constants/Constants';\nimport URLLoader from './net/URLLoader';\nimport HeadRequest from './vo/HeadRequest';\nimport DashJSError from './vo/DashJSError';\nimport FactoryMaker from '../core/FactoryMaker';\n\nfunction FragmentLoader(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;\n    const events = config.events;\n    const urlUtils = config.urlUtils;\n    const errors = config.errors;\n\n    let instance,\n        urlLoader;\n\n    function setup() {\n        urlLoader = URLLoader(context).create({\n            errHandler: config.errHandler,\n            errors: errors,\n            dashMetrics: config.dashMetrics,\n            mediaPlayerModel: config.mediaPlayerModel,\n            requestModifier: config.requestModifier,\n            useFetch: config.settings.get().streaming.lowLatencyEnabled,\n            urlUtils: urlUtils,\n            constants: Constants,\n            boxParser: config.boxParser,\n            dashConstants: config.dashConstants,\n            requestTimeout: config.settings.get().streaming.fragmentRequestTimeout\n        });\n    }\n\n    function checkForExistence(request) {\n        const report = function (success) {\n            eventBus.trigger(events.CHECK_FOR_EXISTENCE_COMPLETED, {\n                    request: request,\n                    exists: success\n                }\n            );\n        };\n\n        if (request) {\n            let headRequest = new HeadRequest(request.url);\n            urlLoader.load({\n                request: headRequest,\n                success: function () {\n                    report(true);\n                },\n                error: function () {\n                    report(false);\n                }\n            });\n        } else {\n            report(false);\n        }\n    }\n\n    function load(request) {\n        const report = function (data, error) {\n            eventBus.trigger(events.LOADING_COMPLETED, {\n                request: request,\n                response: data || null,\n                error: error || null,\n                sender: instance\n            });\n        };\n\n        if (request) {\n            urlLoader.load({\n                request: request,\n                progress: function (event) {\n                    eventBus.trigger(events.LOADING_PROGRESS, {\n                        request: request,\n                        stream: event.stream\n                    });\n                    if (event.data) {\n                        eventBus.trigger(events.LOADING_DATA_PROGRESS, {\n                            request: request,\n                            response: event.data || null,\n                            error: null,\n                            sender: instance\n                        });\n                    }\n                },\n                success: function (data) {\n                    report(data);\n                },\n                error: function (request, statusText, errorText) {\n                    report(\n                        undefined,\n                        new DashJSError(\n                            errors.FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE,\n                            errorText,\n                            statusText\n                        )\n                    );\n                },\n                abort: function (request) {\n                    if (request) {\n                        eventBus.trigger(events.LOADING_ABANDONED, {\n                            mediaType: request.mediaType,\n                            request: request,\n                            sender: instance\n                        });\n                    }\n                }\n            });\n        } else {\n            report(\n                undefined,\n                new DashJSError(\n                    errors.FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE,\n                    errors.FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE\n                )\n            );\n        }\n    }\n\n    function abort() {\n        if (urlLoader) {\n            urlLoader.abort();\n        }\n    }\n\n    function reset() {\n        if (urlLoader) {\n            urlLoader.abort();\n            urlLoader = null;\n        }\n    }\n\n    instance = {\n        checkForExistence: checkForExistence,\n        load: load,\n        abort: abort,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nFragmentLoader.__dashjs_factory_name = 'FragmentLoader';\nexport default FactoryMaker.getClassFactory(FragmentLoader);\n"]},"metadata":{},"sourceType":"script"}