{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _CommonEncryption = require('./../CommonEncryption');\n\nvar _CommonEncryption2 = _interopRequireDefault(_CommonEncryption);\n\nvar _KeySystemClearKey = require('./../drm/KeySystemClearKey');\n\nvar _KeySystemClearKey2 = _interopRequireDefault(_KeySystemClearKey);\n\nvar _KeySystemW3CClearKey = require('./../drm/KeySystemW3CClearKey');\n\nvar _KeySystemW3CClearKey2 = _interopRequireDefault(_KeySystemW3CClearKey);\n\nvar _KeySystemWidevine = require('./../drm/KeySystemWidevine');\n\nvar _KeySystemWidevine2 = _interopRequireDefault(_KeySystemWidevine);\n\nvar _KeySystemPlayReady = require('./../drm/KeySystemPlayReady');\n\nvar _KeySystemPlayReady2 = _interopRequireDefault(_KeySystemPlayReady);\n\nvar _DRMToday = require('./../servers/DRMToday');\n\nvar _DRMToday2 = _interopRequireDefault(_DRMToday);\n\nvar _PlayReady = require('./../servers/PlayReady');\n\nvar _PlayReady2 = _interopRequireDefault(_PlayReady);\n\nvar _Widevine = require('./../servers/Widevine');\n\nvar _Widevine2 = _interopRequireDefault(_Widevine);\n\nvar _ClearKey = require('./../servers/ClearKey');\n\nvar _ClearKey2 = _interopRequireDefault(_ClearKey);\n\nvar _ProtectionConstants = require('../../constants/ProtectionConstants');\n\nvar _ProtectionConstants2 = _interopRequireDefault(_ProtectionConstants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* @module ProtectionKeyController\n* @ignore\n* @description Media protection key system functionality that can be modified/overridden by applications\n*/\n\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nfunction ProtectionKeyController() {\n  var context = this.context;\n  var instance = void 0,\n      debug = void 0,\n      logger = void 0,\n      keySystems = void 0,\n      BASE64 = void 0,\n      clearkeyKeySystem = void 0,\n      clearkeyW3CKeySystem = void 0;\n\n  function setConfig(config) {\n    if (!config) return;\n\n    if (config.debug) {\n      debug = config.debug;\n      logger = debug.getLogger(instance);\n    }\n\n    if (config.BASE64) {\n      BASE64 = config.BASE64;\n    }\n  }\n\n  function initialize() {\n    keySystems = [];\n    var keySystem = void 0; // PlayReady\n\n    keySystem = (0, _KeySystemPlayReady2.default)(context).getInstance({\n      BASE64: BASE64\n    });\n    keySystems.push(keySystem); // Widevine\n\n    keySystem = (0, _KeySystemWidevine2.default)(context).getInstance({\n      BASE64: BASE64\n    });\n    keySystems.push(keySystem); // ClearKey\n\n    keySystem = (0, _KeySystemClearKey2.default)(context).getInstance({\n      BASE64: BASE64\n    });\n    keySystems.push(keySystem);\n    clearkeyKeySystem = keySystem; // W3C ClearKey\n\n    keySystem = (0, _KeySystemW3CClearKey2.default)(context).getInstance({\n      BASE64: BASE64,\n      debug: debug\n    });\n    keySystems.push(keySystem);\n    clearkeyW3CKeySystem = keySystem;\n  }\n  /**\n  * Returns a prioritized list of key systems supported\n  * by this player (not necessarily those supported by the\n  * user agent)\n  *\n  * @returns {Array.<KeySystem>} a prioritized\n  * list of key systems\n  * @memberof module:ProtectionKeyController\n  * @instance\n  */\n\n\n  function getKeySystems() {\n    return keySystems;\n  }\n  /**\n  * Sets the prioritized list of key systems to be supported\n  * by this player.\n  *\n  * @param {Array.<KeySystem>} newKeySystems the new prioritized\n  * list of key systems\n  * @memberof module:ProtectionKeyController\n  * @instance\n  */\n\n\n  function setKeySystems(newKeySystems) {\n    keySystems = newKeySystems;\n  }\n  /**\n  * Returns the key system associated with the given key system string\n  * name (i.e. 'org.w3.clearkey')\n  *\n  * @param {string} systemString the system string\n  * @returns {KeySystem|null} the key system\n  * or null if no supported key system is associated with the given key\n  * system string\n  * @memberof module:ProtectionKeyController\n  * @instance\n  */\n\n\n  function getKeySystemBySystemString(systemString) {\n    for (var i = 0; i < keySystems.length; i++) {\n      if (keySystems[i].systemString === systemString) {\n        return keySystems[i];\n      }\n    }\n\n    return null;\n  }\n  /**\n  * Determines whether the given key system is ClearKey.  This is\n  * necessary because the EME spec defines ClearKey and its method\n  * for providing keys to the key session; and this method has changed\n  * between the various API versions.  Our EME-specific ProtectionModels\n  * must know if the system is ClearKey so that it can format the keys\n  * according to the particular spec version.\n  *\n  * @param {Object} keySystem the key\n  * @returns {boolean} true if this is the ClearKey key system, false\n  * otherwise\n  * @memberof module:ProtectionKeyController\n  * @instance\n  */\n\n\n  function isClearKey(keySystem) {\n    return keySystem === clearkeyKeySystem || keySystem === clearkeyW3CKeySystem;\n  }\n  /**\n  * Check equality of initData array buffers.\n  *\n  * @param {ArrayBuffer} initData1 - first initData\n  * @param {ArrayBuffer} initData2 - second initData\n  * @returns {boolean} true if the initData arrays are equal in size and\n  * contents, false otherwise\n  * @memberof module:ProtectionKeyController\n  * @instance\n  */\n\n\n  function initDataEquals(initData1, initData2) {\n    if (initData1.byteLength === initData2.byteLength) {\n      var data1 = new Uint8Array(initData1);\n      var data2 = new Uint8Array(initData2);\n\n      for (var j = 0; j < data1.length; j++) {\n        if (data1[j] !== data2[j]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n  * Returns a set of supported key systems and CENC initialization data\n  * from the given array of ContentProtection elements.  Only\n  * key systems that are supported by this player will be returned.\n  * Key systems are returned in priority order (highest first).\n  *\n  * @param {Array.<Object>} cps - array of content protection elements parsed\n  * from the manifest\n  * @returns {Array.<Object>} array of objects indicating which supported key\n  * systems were found.  Empty array is returned if no\n  * supported key systems were found\n  * @memberof module:ProtectionKeyController\n  * @instance\n  */\n\n\n  function getSupportedKeySystemsFromContentProtection(cps) {\n    var cp = void 0,\n        ks = void 0,\n        ksIdx = void 0,\n        cpIdx = void 0;\n    var supportedKS = [];\n\n    if (cps) {\n      var cencContentProtection = _CommonEncryption2.default.findCencContentProtection(cps);\n\n      for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n        ks = keySystems[ksIdx];\n\n        for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\n          cp = cps[cpIdx];\n\n          if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\n            // Look for DRM-specific ContentProtection\n            var initData = ks.getInitData(cp, cencContentProtection);\n            supportedKS.push({\n              ks: keySystems[ksIdx],\n              initData: initData,\n              cdmData: ks.getCDMData(),\n              sessionId: ks.getSessionId(cp)\n            });\n          }\n        }\n      }\n    }\n\n    return supportedKS;\n  }\n  /**\n  * Returns key systems supported by this player for the given PSSH\n  * initializationData. Only key systems supported by this player\n  * that have protection data present will be returned.  Key systems are returned in priority order\n  * (highest priority first)\n  *\n  * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\n  * supported by the content\n  * @param {ProtectionData} protDataSet user specified protection data - license server url etc\n  * supported by the content\n  * @returns {Array.<Object>} array of objects indicating which supported key\n  * systems were found.  Empty array is returned if no\n  * supported key systems were found\n  * @memberof module:ProtectionKeyController\n  * @instance\n  */\n\n\n  function getSupportedKeySystems(initData, protDataSet) {\n    var supportedKS = [];\n\n    var pssh = _CommonEncryption2.default.parsePSSHList(initData);\n\n    var ks = void 0,\n        keySystemString = void 0,\n        shouldNotFilterOutKeySystem = void 0;\n\n    for (var ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n      ks = keySystems[ksIdx];\n      keySystemString = ks.systemString;\n      shouldNotFilterOutKeySystem = protDataSet ? keySystemString in protDataSet : true;\n\n      if (ks.uuid in pssh && shouldNotFilterOutKeySystem) {\n        supportedKS.push({\n          ks: ks,\n          initData: pssh[ks.uuid],\n          cdmData: ks.getCDMData(),\n          sessionId: ks.getSessionId()\n        });\n      }\n    }\n\n    return supportedKS;\n  }\n  /**\n  * Returns the license server implementation data that should be used for this request.\n  *\n  * @param {KeySystem} keySystem the key system\n  * associated with this license request\n  * @param {ProtectionData} protData protection data to use for the\n  * request\n  * @param {string} [messageType=\"license-request\"] the message type associated with this\n  * request.  Supported message types can be found\n  * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n  * @returns {LicenseServer|null} the license server\n  * implementation that should be used for this request or null if the player should not\n  * pass messages of the given type to a license server\n  * @memberof module:ProtectionKeyController\n  * @instance\n  *\n  */\n\n\n  function getLicenseServer(keySystem, protData, messageType) {\n    // Our default server implementations do not do anything with \"license-release\" or\n    // \"individualization-request\" messages, so we just send a success event\n    if (messageType === 'license-release' || messageType === 'individualization-request') {\n      return null;\n    }\n\n    var licenseServerData = null;\n\n    if (protData && protData.hasOwnProperty('drmtoday')) {\n      licenseServerData = (0, _DRMToday2.default)(context).getInstance({\n        BASE64: BASE64\n      });\n    } else if (keySystem.systemString === _ProtectionConstants2.default.WIDEVINE_KEYSTEM_STRING) {\n      licenseServerData = (0, _Widevine2.default)(context).getInstance();\n    } else if (keySystem.systemString === _ProtectionConstants2.default.PLAYREADY_KEYSTEM_STRING) {\n      licenseServerData = (0, _PlayReady2.default)(context).getInstance();\n    } else if (keySystem.systemString === _ProtectionConstants2.default.CLEARKEY_KEYSTEM_STRING) {\n      licenseServerData = (0, _ClearKey2.default)(context).getInstance();\n    }\n\n    return licenseServerData;\n  }\n  /**\n  * Allows application-specific retrieval of ClearKey keys.\n  *\n  * @param {KeySystem} clearkeyKeySystem They exact ClearKey System to be used\n  * @param {ProtectionData} protData protection data to use for the\n  * request\n  * @param {ArrayBuffer} message the key message from the CDM\n  * @return {ClearKeyKeySet|null} the clear keys associated with\n  * the request or null if no keys can be returned by this function\n  * @memberof module:ProtectionKeyController\n  * @instance\n  */\n\n\n  function processClearKeyLicenseRequest(clearkeyKeySystem, protData, message) {\n    try {\n      return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);\n    } catch (error) {\n      logger.error('Failed to retrieve clearkeys from ProtectionData');\n      return null;\n    }\n  }\n\n  function setProtectionData(protectionDataSet) {\n    var getProtectionData = function getProtectionData(keySystemString) {\n      var protData = null;\n\n      if (protectionDataSet) {\n        protData = keySystemString in protectionDataSet ? protectionDataSet[keySystemString] : null;\n      }\n\n      return protData;\n    };\n\n    for (var i = 0; i < keySystems.length; i++) {\n      var keySystem = keySystems[i];\n\n      if (keySystem.hasOwnProperty('init')) {\n        keySystem.init(getProtectionData(keySystem.systemString));\n      }\n    }\n  }\n\n  instance = {\n    initialize: initialize,\n    setProtectionData: setProtectionData,\n    isClearKey: isClearKey,\n    initDataEquals: initDataEquals,\n    getKeySystems: getKeySystems,\n    setKeySystems: setKeySystems,\n    getKeySystemBySystemString: getKeySystemBySystemString,\n    getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n    getSupportedKeySystems: getSupportedKeySystems,\n    getLicenseServer: getLicenseServer,\n    processClearKeyLicenseRequest: processClearKeyLicenseRequest,\n    setConfig: setConfig\n  };\n  return instance;\n}\n\nProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';\nexports.default = dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController);\n/* jshint ignore:line */","map":{"version":3,"sources":["../../../../../../src/streaming/protection/controllers/ProtectionKeyController.js"],"names":["context","instance","debug","logger","keySystems","BASE64","clearkeyKeySystem","clearkeyW3CKeySystem","config","keySystem","i","initData1","initData2","data1","data2","j","cp","ks","ksIdx","cpIdx","supportedKS","cencContentProtection","CommonEncryption","cps","initData","cdmData","sessionId","pssh","keySystemString","shouldNotFilterOutKeySystem","protDataSet","messageType","licenseServerData","protData","ProtectionConstants","getProtectionData","protectionDataSet","initialize","setProtectionData","isClearKey","initDataEquals","getKeySystems","setKeySystems","getKeySystemBySystemString","getSupportedKeySystemsFromContentProtection","getSupportedKeySystems","getLicenseServer","processClearKeyLicenseRequest","setConfig","ProtectionKeyController","dashjs"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport CommonEncryption from './../CommonEncryption';\nimport KeySystemClearKey from './../drm/KeySystemClearKey';\nimport KeySystemW3CClearKey from './../drm/KeySystemW3CClearKey';\nimport KeySystemWidevine from './../drm/KeySystemWidevine';\nimport KeySystemPlayReady from './../drm/KeySystemPlayReady';\nimport DRMToday from './../servers/DRMToday';\nimport PlayReady from './../servers/PlayReady';\nimport Widevine from './../servers/Widevine';\nimport ClearKey from './../servers/ClearKey';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\n/**\n * @module ProtectionKeyController\n * @ignore\n * @description Media protection key system functionality that can be modified/overridden by applications\n */\nfunction ProtectionKeyController() {\n\n    let context = this.context;\n\n    let instance,\n        debug,\n        logger,\n        keySystems,\n        BASE64,\n        clearkeyKeySystem,\n        clearkeyW3CKeySystem;\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.debug) {\n            debug = config.debug;\n            logger = debug.getLogger(instance);\n        }\n\n        if (config.BASE64) {\n            BASE64 = config.BASE64;\n        }\n    }\n\n    function initialize() {\n        keySystems = [];\n\n        let keySystem;\n\n        // PlayReady\n        keySystem = KeySystemPlayReady(context).getInstance({BASE64: BASE64});\n        keySystems.push(keySystem);\n\n        // Widevine\n        keySystem = KeySystemWidevine(context).getInstance({BASE64: BASE64});\n        keySystems.push(keySystem);\n\n        // ClearKey\n        keySystem = KeySystemClearKey(context).getInstance({BASE64: BASE64});\n        keySystems.push(keySystem);\n        clearkeyKeySystem = keySystem;\n\n        // W3C ClearKey\n        keySystem = KeySystemW3CClearKey(context).getInstance({BASE64: BASE64, debug: debug});\n        keySystems.push(keySystem);\n        clearkeyW3CKeySystem = keySystem;\n    }\n\n    /**\n     * Returns a prioritized list of key systems supported\n     * by this player (not necessarily those supported by the\n     * user agent)\n     *\n     * @returns {Array.<KeySystem>} a prioritized\n     * list of key systems\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystems() {\n        return keySystems;\n    }\n\n    /**\n     * Sets the prioritized list of key systems to be supported\n     * by this player.\n     *\n     * @param {Array.<KeySystem>} newKeySystems the new prioritized\n     * list of key systems\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function setKeySystems(newKeySystems) {\n        keySystems = newKeySystems;\n    }\n\n    /**\n     * Returns the key system associated with the given key system string\n     * name (i.e. 'org.w3.clearkey')\n     *\n     * @param {string} systemString the system string\n     * @returns {KeySystem|null} the key system\n     * or null if no supported key system is associated with the given key\n     * system string\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystemBySystemString(systemString) {\n        for (let i = 0; i < keySystems.length; i++) {\n            if (keySystems[i].systemString === systemString) {\n                return keySystems[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Determines whether the given key system is ClearKey.  This is\n     * necessary because the EME spec defines ClearKey and its method\n     * for providing keys to the key session; and this method has changed\n     * between the various API versions.  Our EME-specific ProtectionModels\n     * must know if the system is ClearKey so that it can format the keys\n     * according to the particular spec version.\n     *\n     * @param {Object} keySystem the key\n     * @returns {boolean} true if this is the ClearKey key system, false\n     * otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function isClearKey(keySystem) {\n        return (keySystem === clearkeyKeySystem || keySystem === clearkeyW3CKeySystem);\n    }\n\n    /**\n     * Check equality of initData array buffers.\n     *\n     * @param {ArrayBuffer} initData1 - first initData\n     * @param {ArrayBuffer} initData2 - second initData\n     * @returns {boolean} true if the initData arrays are equal in size and\n     * contents, false otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function initDataEquals(initData1, initData2) {\n        if (initData1.byteLength === initData2.byteLength) {\n            let data1 = new Uint8Array(initData1);\n            let data2 = new Uint8Array(initData2);\n\n            for (let j = 0; j < data1.length; j++) {\n                if (data1[j] !== data2[j]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        let cp, ks, ksIdx, cpIdx;\n        let supportedKS = [];\n\n        if (cps) {\n            const cencContentProtection = CommonEncryption.findCencContentProtection(cps);\n            for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n                ks = keySystems[ksIdx];\n                for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\n                    cp = cps[cpIdx];\n                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\n                        // Look for DRM-specific ContentProtection\n                        let initData = ks.getInitData(cp, cencContentProtection);\n\n                        supportedKS.push({\n                            ks: keySystems[ksIdx],\n                            initData: initData,\n                            cdmData: ks.getCDMData(),\n                            sessionId: ks.getSessionId(cp)\n                        });\n                    }\n                }\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns key systems supported by this player for the given PSSH\n     * initializationData. Only key systems supported by this player\n     * that have protection data present will be returned.  Key systems are returned in priority order\n     * (highest priority first)\n     *\n     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\n     * supported by the content\n     * @param {ProtectionData} protDataSet user specified protection data - license server url etc\n     * supported by the content\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystems(initData, protDataSet) {\n        let supportedKS = [];\n        let pssh = CommonEncryption.parsePSSHList(initData);\n        let ks, keySystemString, shouldNotFilterOutKeySystem;\n\n        for (let ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n            ks = keySystems[ksIdx];\n            keySystemString = ks.systemString;\n            shouldNotFilterOutKeySystem = (protDataSet) ? keySystemString in protDataSet : true;\n\n            if (ks.uuid in pssh && shouldNotFilterOutKeySystem) {\n                supportedKS.push({\n                    ks: ks,\n                    initData: pssh[ks.uuid],\n                    cdmData: ks.getCDMData(),\n                    sessionId: ks.getSessionId()\n                });\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns the license server implementation data that should be used for this request.\n     *\n     * @param {KeySystem} keySystem the key system\n     * associated with this license request\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {string} [messageType=\"license-request\"] the message type associated with this\n     * request.  Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @returns {LicenseServer|null} the license server\n     * implementation that should be used for this request or null if the player should not\n     * pass messages of the given type to a license server\n     * @memberof module:ProtectionKeyController\n     * @instance\n     *\n     */\n    function getLicenseServer(keySystem, protData, messageType) {\n\n        // Our default server implementations do not do anything with \"license-release\" or\n        // \"individualization-request\" messages, so we just send a success event\n        if (messageType === 'license-release' || messageType === 'individualization-request') {\n            return null;\n        }\n\n        let licenseServerData = null;\n        if (protData && protData.hasOwnProperty('drmtoday')) {\n            licenseServerData = DRMToday(context).getInstance({BASE64: BASE64});\n        } else if (keySystem.systemString === ProtectionConstants.WIDEVINE_KEYSTEM_STRING) {\n            licenseServerData = Widevine(context).getInstance();\n        } else if (keySystem.systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING) {\n            licenseServerData = PlayReady(context).getInstance();\n        } else if (keySystem.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING) {\n            licenseServerData = ClearKey(context).getInstance();\n        }\n\n        return licenseServerData;\n    }\n\n    /**\n     * Allows application-specific retrieval of ClearKey keys.\n     *\n     * @param {KeySystem} clearkeyKeySystem They exact ClearKey System to be used\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {ArrayBuffer} message the key message from the CDM\n     * @return {ClearKeyKeySet|null} the clear keys associated with\n     * the request or null if no keys can be returned by this function\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function processClearKeyLicenseRequest(clearkeyKeySystem, protData, message) {\n        try {\n            return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);\n        } catch (error) {\n            logger.error('Failed to retrieve clearkeys from ProtectionData');\n            return null;\n        }\n    }\n\n    function setProtectionData(protectionDataSet) {\n        var getProtectionData = function (keySystemString) {\n            var protData = null;\n            if (protectionDataSet) {\n                protData = (keySystemString in protectionDataSet) ? protectionDataSet[keySystemString] : null;\n            }\n            return protData;\n        };\n\n        for (var i = 0; i < keySystems.length; i++) {\n            var keySystem = keySystems[i];\n            if (keySystem.hasOwnProperty('init')) {\n                keySystem.init(getProtectionData(keySystem.systemString));\n            }\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        setProtectionData: setProtectionData,\n        isClearKey: isClearKey,\n        initDataEquals: initDataEquals,\n        getKeySystems: getKeySystems,\n        setKeySystems: setKeySystems,\n        getKeySystemBySystemString: getKeySystemBySystemString,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getSupportedKeySystems: getSupportedKeySystems,\n        getLicenseServer: getLicenseServer,\n        processClearKeyLicenseRequest: processClearKeyLicenseRequest,\n        setConfig: setConfig\n    };\n\n    return instance;\n}\n\nProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';\nexport default dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}