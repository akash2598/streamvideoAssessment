{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _TimelineSegmentsGetter = require('../utils/TimelineSegmentsGetter');\n\nvar _TimelineSegmentsGetter2 = _interopRequireDefault(_TimelineSegmentsGetter);\n\nvar _TemplateSegmentsGetter = require('../utils/TemplateSegmentsGetter');\n\nvar _TemplateSegmentsGetter2 = _interopRequireDefault(_TemplateSegmentsGetter);\n\nvar _ListSegmentsGetter = require('../utils/ListSegmentsGetter');\n\nvar _ListSegmentsGetter2 = _interopRequireDefault(_ListSegmentsGetter);\n\nvar _SegmentBaseGetter = require('../utils/SegmentBaseGetter');\n\nvar _SegmentBaseGetter2 = _interopRequireDefault(_SegmentBaseGetter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction SegmentsController(config) {\n  config = config || {};\n  var context = this.context;\n  var events = config.events;\n  var eventBus = config.eventBus;\n  var dashConstants = config.dashConstants;\n  var streamInfo = config.streamInfo;\n  var type = config.type;\n  var instance = void 0,\n      getters = void 0;\n\n  function setup() {\n    getters = {};\n  }\n\n  function initialize(isDynamic) {\n    getters[dashConstants.SEGMENT_TIMELINE] = (0, _TimelineSegmentsGetter2.default)(context).create(config, isDynamic);\n    getters[dashConstants.SEGMENT_TEMPLATE] = (0, _TemplateSegmentsGetter2.default)(context).create(config, isDynamic);\n    getters[dashConstants.SEGMENT_LIST] = (0, _ListSegmentsGetter2.default)(context).create(config, isDynamic);\n    getters[dashConstants.SEGMENT_BASE] = (0, _SegmentBaseGetter2.default)(context).create(config, isDynamic);\n  }\n\n  function update(voRepresentation, mimeType, hasInitialization, hasSegments) {\n    if (!hasInitialization) {\n      eventBus.trigger(events.SEGMENTBASE_INIT_REQUEST_NEEDED, {\n        streamId: streamInfo.id,\n        mediaType: type,\n        mimeType: mimeType,\n        representation: voRepresentation\n      });\n    }\n\n    if (!hasSegments) {\n      eventBus.trigger(events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, {\n        streamId: streamInfo.id,\n        mediaType: type,\n        mimeType: mimeType,\n        representation: voRepresentation\n      });\n    }\n  }\n\n  function getSegmentsGetter(representation) {\n    return representation ? representation.segments ? getters[dashConstants.SEGMENT_BASE] : getters[representation.segmentInfoType] : null;\n  }\n\n  function getSegmentByIndex(representation, index, lastSegmentTime) {\n    var getter = getSegmentsGetter(representation);\n    return getter ? getter.getSegmentByIndex(representation, index, lastSegmentTime) : null;\n  }\n\n  function getSegmentByTime(representation, time) {\n    var getter = getSegmentsGetter(representation);\n    return getter ? getter.getSegmentByTime(representation, time) : null;\n  }\n\n  instance = {\n    initialize: initialize,\n    update: update,\n    getSegmentByIndex: getSegmentByIndex,\n    getSegmentByTime: getSegmentByTime\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nSegmentsController.__dashjs_factory_name = 'SegmentsController';\n\nvar factory = _FactoryMaker2.default.getClassFactory(SegmentsController);\n\nexports.default = factory;","map":{"version":3,"sources":["../../../../../src/dash/controllers/SegmentsController.js"],"names":["config","context","events","eventBus","dashConstants","streamInfo","type","instance","getters","streamId","mediaType","mimeType","representation","getter","getSegmentsGetter","initialize","update","getSegmentByIndex","getSegmentByTime","setup","SegmentsController","factory","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\nimport TimelineSegmentsGetter from '../utils/TimelineSegmentsGetter';\nimport TemplateSegmentsGetter from '../utils/TemplateSegmentsGetter';\nimport ListSegmentsGetter from '../utils/ListSegmentsGetter';\nimport SegmentBaseGetter from '../utils/SegmentBaseGetter';\n\nfunction SegmentsController(config) {\n    config = config || {};\n\n    const context = this.context;\n    const events = config.events;\n    const eventBus = config.eventBus;\n    const dashConstants = config.dashConstants;\n    const streamInfo = config.streamInfo;\n    const type = config.type;\n\n    let instance,\n        getters;\n\n    function setup() {\n        getters = {};\n    }\n\n    function initialize(isDynamic) {\n        getters[dashConstants.SEGMENT_TIMELINE] = TimelineSegmentsGetter(context).create(config, isDynamic);\n        getters[dashConstants.SEGMENT_TEMPLATE] = TemplateSegmentsGetter(context).create(config, isDynamic);\n        getters[dashConstants.SEGMENT_LIST] = ListSegmentsGetter(context).create(config, isDynamic);\n        getters[dashConstants.SEGMENT_BASE] = SegmentBaseGetter(context).create(config, isDynamic);\n    }\n\n    function update(voRepresentation, mimeType, hasInitialization, hasSegments) {\n        if (!hasInitialization) {\n            eventBus.trigger(events.SEGMENTBASE_INIT_REQUEST_NEEDED, {\n                streamId: streamInfo.id,\n                mediaType: type,\n                mimeType: mimeType,\n                representation: voRepresentation\n            });\n        }\n\n        if (!hasSegments) {\n            eventBus.trigger(events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, {\n                streamId: streamInfo.id,\n                mediaType: type,\n                mimeType: mimeType,\n                representation: voRepresentation\n            });\n        }\n    }\n\n    function getSegmentsGetter(representation) {\n        return representation ? representation.segments ? getters[dashConstants.SEGMENT_BASE] : getters[representation.segmentInfoType] : null;\n    }\n\n    function getSegmentByIndex(representation, index, lastSegmentTime) {\n        const getter = getSegmentsGetter(representation);\n        return getter ? getter.getSegmentByIndex(representation, index, lastSegmentTime) : null;\n    }\n\n    function getSegmentByTime(representation, time) {\n        const getter = getSegmentsGetter(representation);\n        return getter ? getter.getSegmentByTime(representation, time) : null;\n    }\n\n    instance = {\n        initialize: initialize,\n        update: update,\n        getSegmentByIndex: getSegmentByIndex,\n        getSegmentByTime: getSegmentByTime\n    };\n\n    setup();\n\n    return instance;\n}\n\nSegmentsController.__dashjs_factory_name = 'SegmentsController';\nconst factory = FactoryMaker.getClassFactory(SegmentsController);\nexport default factory;\n"]},"metadata":{},"sourceType":"script"}