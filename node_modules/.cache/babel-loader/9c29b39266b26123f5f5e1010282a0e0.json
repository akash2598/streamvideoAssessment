{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _KeyPair = require('../vo/KeyPair');\n\nvar _KeyPair2 = _interopRequireDefault(_KeyPair);\n\nvar _ClearKeyKeySet = require('../vo/ClearKeyKeySet');\n\nvar _ClearKeyKeySet2 = _interopRequireDefault(_ClearKeyKeySet);\n\nvar _CommonEncryption = require('../CommonEncryption');\n\nvar _CommonEncryption2 = _interopRequireDefault(_CommonEncryption);\n\nvar _ProtectionConstants = require('../../constants/ProtectionConstants');\n\nvar _ProtectionConstants2 = _interopRequireDefault(_ProtectionConstants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nvar uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';\nvar systemString = _ProtectionConstants2.default.CLEARKEY_KEYSTEM_STRING;\nvar schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemW3CClearKey(config) {\n  var instance = void 0;\n  var BASE64 = config.BASE64;\n  var logger = config.debug.getLogger(instance);\n  /**\n  * Returns desired clearkeys (as specified in the CDM message) from protection data\n  *\n  * @param {ProtectionDataSet} protectionData the protection data\n  * @param {ArrayBuffer} message the ClearKey CDM message\n  * @returns {ClearKeyKeySet} the key set or null if none found\n  * @throws {Error} if a keyID specified in the CDM message was not found in the\n  * protection data\n  * @memberof KeySystemClearKey\n  */\n\n  function getClearKeysFromProtectionData(protectionData, message) {\n    var clearkeySet = null;\n\n    if (protectionData) {\n      // ClearKey is the only system that does not require a license server URL, so we\n      // handle it here when keys are specified in protection data\n      var jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n      var keyPairs = [];\n\n      for (var i = 0; i < jsonMsg.kids.length; i++) {\n        var clearkeyID = jsonMsg.kids[i];\n        var clearkey = protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID) ? protectionData.clearkeys[clearkeyID] : null;\n\n        if (!clearkey) {\n          throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n        } // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n\n\n        keyPairs.push(new _KeyPair2.default(clearkeyID, clearkey));\n      }\n\n      clearkeySet = new _ClearKeyKeySet2.default(keyPairs);\n      logger.warn('ClearKey schemeIdURI is using W3C Common PSSH systemID (1077efec-c0b2-4d02-ace3-3c1e52e2fb4b) in Content Protection. See DASH-IF IOP v4.1 section 7.6.2.4');\n    }\n\n    return clearkeySet;\n  }\n\n  function getInitData(cp) {\n    return _CommonEncryption2.default.parseInitDataFromContentProtection(cp, BASE64);\n  }\n\n  function getRequestHeadersFromMessage()\n  /*message*/\n  {\n    return null;\n  }\n\n  function getLicenseRequestFromMessage(message) {\n    return new Uint8Array(message);\n  }\n\n  function getLicenseServerURLFromInitData()\n  /*initData*/\n  {\n    return null;\n  }\n\n  function getCDMData() {\n    return null;\n  }\n\n  function getSessionId()\n  /*cp*/\n  {\n    return null;\n  }\n\n  instance = {\n    uuid: uuid,\n    schemeIdURI: schemeIdURI,\n    systemString: systemString,\n    getInitData: getInitData,\n    getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n    getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n    getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n    getCDMData: getCDMData,\n    getSessionId: getSessionId,\n    getClearKeysFromProtectionData: getClearKeysFromProtectionData\n  };\n  return instance;\n}\n\nKeySystemW3CClearKey.__dashjs_factory_name = 'KeySystemW3CClearKey';\nexports.default = dashjs.FactoryMaker.getSingletonFactory(KeySystemW3CClearKey);\n/* jshint ignore:line */","map":{"version":3,"sources":["../../../../../../src/streaming/protection/drm/KeySystemW3CClearKey.js"],"names":["uuid","systemString","ProtectionConstants","schemeIdURI","instance","BASE64","config","logger","clearkeySet","jsonMsg","JSON","String","keyPairs","i","clearkeyID","clearkey","protectionData","KeyPair","ClearKeyKeySet","CommonEncryption","getInitData","getRequestHeadersFromMessage","getLicenseRequestFromMessage","getLicenseServerURLFromInitData","getCDMData","getSessionId","getClearKeysFromProtectionData","KeySystemW3CClearKey","dashjs"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemW3CClearKey(config) {\n    let instance;\n    const BASE64 = config.BASE64;\n    const logger = config.debug.getLogger(instance);\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionDataSet} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            const keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                const clearkeyID = jsonMsg.kids[i];\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n\n            logger.warn('ClearKey schemeIdURI is using W3C Common PSSH systemID (1077efec-c0b2-4d02-ace3-3c1e52e2fb4b) in Content Protection. See DASH-IF IOP v4.1 section 7.6.2.4');\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemW3CClearKey.__dashjs_factory_name = 'KeySystemW3CClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemW3CClearKey); /* jshint ignore:line */\n\n"]},"metadata":{},"sourceType":"script"}