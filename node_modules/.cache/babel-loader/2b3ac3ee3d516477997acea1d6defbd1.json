{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Debug = require('../../core/Debug');\n\nvar _Debug2 = _interopRequireDefault(_Debug);\n\nvar _Constants = require('../constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar legacyKeysAndReplacements = [{\n  oldKey: 'dashjs_vbitrate',\n  newKey: 'dashjs_video_bitrate'\n}, {\n  oldKey: 'dashjs_abitrate',\n  newKey: 'dashjs_audio_bitrate'\n}, {\n  oldKey: 'dashjs_vsettings',\n  newKey: 'dashjs_video_settings'\n}, {\n  oldKey: 'dashjs_asettings',\n  newKey: 'dashjs_audio_settings'\n}];\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\nvar LOCAL_STORAGE_BITRATE_KEY_TEMPLATE = 'dashjs_?_bitrate';\nvar LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE = 'dashjs_?_settings';\nvar STORAGE_TYPE_LOCAL = 'localStorage';\nvar STORAGE_TYPE_SESSION = 'sessionStorage';\nvar LAST_BITRATE = 'lastBitrate';\nvar LAST_MEDIA_SETTINGS = 'lastMediaSettings';\n\nfunction DOMStorage(config) {\n  config = config || {};\n  var context = this.context;\n  var settings = config.settings;\n  var instance = void 0,\n      logger = void 0,\n      supported = void 0;\n\n  function setup() {\n    logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);\n    translateLegacyKeys();\n  } //type can be local, session\n\n\n  function isSupported(type) {\n    if (supported !== undefined) return supported;\n    supported = false;\n    var testKey = '1';\n    var testValue = '1';\n    var storage = void 0;\n\n    try {\n      if (typeof window !== 'undefined') {\n        storage = window[type];\n      }\n    } catch (error) {\n      logger.warn('DOMStorage access denied: ' + error.message);\n      return supported;\n    }\n\n    if (!storage || type !== STORAGE_TYPE_LOCAL && type !== STORAGE_TYPE_SESSION) {\n      return supported;\n    }\n    /* When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage is available, but trying to call setItem throws an exception.\n    http://stackoverflow.com/questions/14555347/html5-localstorage-error-with-safari-quota-exceeded-err-dom-exception-22-an\n    Check if the storage can be used\n    */\n\n\n    try {\n      storage.setItem(testKey, testValue);\n      storage.removeItem(testKey);\n      supported = true;\n    } catch (error) {\n      logger.warn('DOMStorage is supported, but cannot be used: ' + error.message);\n    }\n\n    return supported;\n  }\n\n  function translateLegacyKeys() {\n    if (isSupported(STORAGE_TYPE_LOCAL)) {\n      legacyKeysAndReplacements.forEach(function (entry) {\n        var value = localStorage.getItem(entry.oldKey);\n\n        if (value) {\n          localStorage.removeItem(entry.oldKey);\n\n          try {\n            localStorage.setItem(entry.newKey, value);\n          } catch (e) {\n            logger.error(e.message);\n          }\n        }\n      });\n    }\n  } // Return current epoch time, ms, rounded to the nearest 10m to avoid fingerprinting user\n\n\n  function getTimestamp() {\n    var ten_minutes_ms = 60 * 1000 * 10;\n    return Math.round(new Date().getTime() / ten_minutes_ms) * ten_minutes_ms;\n  }\n\n  function canStore(storageType, key) {\n    return isSupported(storageType) && settings.get().streaming[key + 'CachingInfo'].enabled;\n  }\n\n  function checkConfig() {\n    if (!settings) {\n      throw new Error(_Constants2.default.MISSING_CONFIG_ERROR);\n    }\n  }\n\n  function getSavedMediaSettings(type) {\n    var mediaSettings = null;\n    checkConfig(); //Checks local storage to see if there is valid, non-expired media settings\n\n    if (canStore(STORAGE_TYPE_LOCAL, LAST_MEDIA_SETTINGS)) {\n      var key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\\?/, type);\n\n      try {\n        var obj = JSON.parse(localStorage.getItem(key)) || {};\n        var isExpired = new Date().getTime() - parseInt(obj.timestamp, 10) >= settings.get().streaming.lastMediaSettingsCachingInfo.ttl || false;\n        mediaSettings = obj.settings;\n\n        if (isExpired) {\n          localStorage.removeItem(key);\n          mediaSettings = null;\n        }\n      } catch (e) {\n        return null;\n      }\n    }\n\n    return mediaSettings;\n  }\n\n  function getSavedBitrateSettings(type) {\n    var savedBitrate = NaN;\n    checkConfig(); //Checks local storage to see if there is valid, non-expired bit rate\n    //hinting from the last play session to use as a starting bit rate.\n\n    if (canStore(STORAGE_TYPE_LOCAL, LAST_BITRATE)) {\n      var key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\\?/, type);\n\n      try {\n        var obj = JSON.parse(localStorage.getItem(key)) || {};\n        var isExpired = new Date().getTime() - parseInt(obj.timestamp, 10) >= settings.get().streaming.lastBitrateCachingInfo.ttl || false;\n        var bitrate = parseFloat(obj.bitrate);\n\n        if (!isNaN(bitrate) && !isExpired) {\n          savedBitrate = bitrate;\n          logger.debug('Last saved bitrate for ' + type + ' was ' + bitrate);\n        } else if (isExpired) {\n          localStorage.removeItem(key);\n        }\n      } catch (e) {\n        return null;\n      }\n    }\n\n    return savedBitrate;\n  }\n\n  function setSavedMediaSettings(type, value) {\n    if (canStore(STORAGE_TYPE_LOCAL, LAST_MEDIA_SETTINGS)) {\n      var key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\\?/, type);\n\n      try {\n        localStorage.setItem(key, JSON.stringify({\n          settings: value,\n          timestamp: getTimestamp()\n        }));\n      } catch (e) {\n        logger.error(e.message);\n      }\n    }\n  }\n\n  function setSavedBitrateSettings(type, bitrate) {\n    if (canStore(STORAGE_TYPE_LOCAL, LAST_BITRATE) && bitrate) {\n      var key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\\?/, type);\n\n      try {\n        localStorage.setItem(key, JSON.stringify({\n          bitrate: bitrate.toFixed(3),\n          timestamp: getTimestamp()\n        }));\n      } catch (e) {\n        logger.error(e.message);\n      }\n    }\n  }\n\n  instance = {\n    getSavedBitrateSettings: getSavedBitrateSettings,\n    setSavedBitrateSettings: setSavedBitrateSettings,\n    getSavedMediaSettings: getSavedMediaSettings,\n    setSavedMediaSettings: setSavedMediaSettings\n  };\n  setup();\n  return instance;\n}\n\nDOMStorage.__dashjs_factory_name = 'DOMStorage';\n\nvar factory = _FactoryMaker2.default.getSingletonFactory(DOMStorage);\n\nexports.default = factory;","map":{"version":3,"sources":["../../../../../src/streaming/utils/DOMStorage.js"],"names":["legacyKeysAndReplacements","oldKey","newKey","LOCAL_STORAGE_BITRATE_KEY_TEMPLATE","LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE","STORAGE_TYPE_LOCAL","STORAGE_TYPE_SESSION","LAST_BITRATE","LAST_MEDIA_SETTINGS","config","context","settings","instance","logger","supported","translateLegacyKeys","testKey","testValue","storage","window","error","type","isSupported","value","localStorage","entry","e","ten_minutes_ms","Math","key","Constants","mediaSettings","checkConfig","canStore","obj","JSON","isExpired","parseInt","savedBitrate","bitrate","parseFloat","isNaN","timestamp","getTimestamp","getSavedBitrateSettings","setSavedBitrateSettings","getSavedMediaSettings","setSavedMediaSettings","setup","DOMStorage","factory","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport Constants from '../constants/Constants';\n\nconst legacyKeysAndReplacements = [\n    { oldKey: 'dashjs_vbitrate',  newKey: 'dashjs_video_bitrate' },\n    { oldKey: 'dashjs_abitrate',  newKey: 'dashjs_audio_bitrate' },\n    { oldKey: 'dashjs_vsettings', newKey: 'dashjs_video_settings' },\n    { oldKey: 'dashjs_asettings', newKey: 'dashjs_audio_settings' }\n];\n\nconst LOCAL_STORAGE_BITRATE_KEY_TEMPLATE = 'dashjs_?_bitrate';\nconst LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE = 'dashjs_?_settings';\n\nconst STORAGE_TYPE_LOCAL = 'localStorage';\nconst STORAGE_TYPE_SESSION = 'sessionStorage';\nconst LAST_BITRATE = 'lastBitrate';\nconst LAST_MEDIA_SETTINGS = 'lastMediaSettings';\n\nfunction DOMStorage(config) {\n\n    config = config || {};\n    const context = this.context;\n    const settings = config.settings;\n\n    let instance,\n        logger,\n        supported;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        translateLegacyKeys();\n    }\n\n    //type can be local, session\n    function isSupported(type) {\n        if (supported !== undefined) return supported;\n\n        supported = false;\n\n        const testKey = '1';\n        const testValue = '1';\n        let storage;\n\n        try {\n            if (typeof window !== 'undefined') {\n                storage = window[type];\n            }\n        } catch (error) {\n            logger.warn('DOMStorage access denied: ' + error.message);\n            return supported;\n        }\n\n        if (!storage || (type !== STORAGE_TYPE_LOCAL && type !== STORAGE_TYPE_SESSION)) {\n            return supported;\n        }\n\n        /* When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage is available, but trying to call setItem throws an exception.\n         http://stackoverflow.com/questions/14555347/html5-localstorage-error-with-safari-quota-exceeded-err-dom-exception-22-an\n\n         Check if the storage can be used\n         */\n        try {\n            storage.setItem(testKey, testValue);\n            storage.removeItem(testKey);\n            supported = true;\n        } catch (error) {\n            logger.warn('DOMStorage is supported, but cannot be used: ' + error.message);\n        }\n\n        return supported;\n    }\n\n    function translateLegacyKeys() {\n        if (isSupported(STORAGE_TYPE_LOCAL)) {\n            legacyKeysAndReplacements.forEach(entry => {\n                const value = localStorage.getItem(entry.oldKey);\n\n                if (value) {\n                    localStorage.removeItem(entry.oldKey);\n\n                    try {\n                        localStorage.setItem(entry.newKey, value);\n                    } catch (e) {\n                        logger.error(e.message);\n                    }\n                }\n            });\n        }\n    }\n\n    // Return current epoch time, ms, rounded to the nearest 10m to avoid fingerprinting user\n    function getTimestamp() {\n        const ten_minutes_ms = 60 * 1000 * 10;\n        return Math.round(new Date().getTime() / ten_minutes_ms) * ten_minutes_ms;\n    }\n\n    function canStore(storageType, key) {\n        return isSupported(storageType) && settings.get().streaming[key + 'CachingInfo'].enabled;\n    }\n\n    function checkConfig() {\n        if (!settings) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    function getSavedMediaSettings(type) {\n        let mediaSettings = null;\n\n        checkConfig();\n        //Checks local storage to see if there is valid, non-expired media settings\n        if (canStore(STORAGE_TYPE_LOCAL, LAST_MEDIA_SETTINGS)) {\n            const key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\\?/, type);\n            try {\n                const obj = JSON.parse(localStorage.getItem(key)) || {};\n                const isExpired = (new Date().getTime() - parseInt(obj.timestamp, 10)) >= settings.get().streaming.lastMediaSettingsCachingInfo.ttl || false;\n                mediaSettings = obj.settings;\n\n                if (isExpired) {\n                    localStorage.removeItem(key);\n                    mediaSettings = null;\n                }\n            } catch (e) {\n                return null;\n            }\n        }\n        return mediaSettings;\n    }\n\n    function getSavedBitrateSettings(type) {\n        let savedBitrate = NaN;\n\n        checkConfig();\n\n        //Checks local storage to see if there is valid, non-expired bit rate\n        //hinting from the last play session to use as a starting bit rate.\n        if (canStore(STORAGE_TYPE_LOCAL, LAST_BITRATE)) {\n            const key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\\?/, type);\n            try {\n                const obj = JSON.parse(localStorage.getItem(key)) || {};\n                const isExpired = (new Date().getTime() - parseInt(obj.timestamp, 10)) >= settings.get().streaming.lastBitrateCachingInfo.ttl || false;\n                const bitrate = parseFloat(obj.bitrate);\n\n                if (!isNaN(bitrate) && !isExpired) {\n                    savedBitrate = bitrate;\n                    logger.debug('Last saved bitrate for ' + type + ' was ' + bitrate);\n                } else if (isExpired) {\n                    localStorage.removeItem(key);\n                }\n            } catch (e) {\n                return null;\n            }\n        }\n        return savedBitrate;\n    }\n\n    function setSavedMediaSettings(type, value) {\n        if (canStore(STORAGE_TYPE_LOCAL, LAST_MEDIA_SETTINGS)) {\n            const key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\\?/, type);\n            try {\n                localStorage.setItem(key, JSON.stringify({settings: value, timestamp: getTimestamp()}));\n            } catch (e) {\n                logger.error(e.message);\n            }\n        }\n    }\n\n    function setSavedBitrateSettings(type, bitrate) {\n        if (canStore(STORAGE_TYPE_LOCAL, LAST_BITRATE) && bitrate) {\n            const key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\\?/, type);\n            try {\n                localStorage.setItem(key, JSON.stringify({bitrate: bitrate.toFixed(3), timestamp: getTimestamp()}));\n            } catch (e) {\n                logger.error(e.message);\n            }\n        }\n    }\n\n    instance = {\n        getSavedBitrateSettings: getSavedBitrateSettings,\n        setSavedBitrateSettings: setSavedBitrateSettings,\n        getSavedMediaSettings: getSavedMediaSettings,\n        setSavedMediaSettings: setSavedMediaSettings\n    };\n\n    setup();\n    return instance;\n}\n\nDOMStorage.__dashjs_factory_name = 'DOMStorage';\nconst factory = FactoryMaker.getSingletonFactory(DOMStorage);\nexport default factory;\n"]},"metadata":{},"sourceType":"script"}