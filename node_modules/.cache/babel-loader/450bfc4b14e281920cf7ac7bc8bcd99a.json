{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _EventBus = require('../../core/EventBus');\n\nvar _EventBus2 = _interopRequireDefault(_EventBus);\n\nvar _MediaPlayerEvents = require('../MediaPlayerEvents');\n\nvar _MediaPlayerEvents2 = _interopRequireDefault(_MediaPlayerEvents);\n\nvar _MetricsReportingEvents = require('../metrics/MetricsReportingEvents');\n\nvar _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents);\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Debug = require('../../core/Debug');\n\nvar _Debug2 = _interopRequireDefault(_Debug);\n\nvar _Settings = require('../../core/Settings');\n\nvar _Settings2 = _interopRequireDefault(_Settings);\n\nvar _Constants = require('../../streaming/constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _HTTPRequest = require('../vo/metrics/HTTPRequest');\n\nvar _DashManifestModel = require('../../dash/models/DashManifestModel');\n\nvar _DashManifestModel2 = _interopRequireDefault(_DashManifestModel);\n\nvar _Utils = require('../../core/Utils');\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nvar CMCD_REQUEST_FIELD_NAME = 'CMCD';\nvar CMCD_VERSION = 1;\nvar OBJECT_TYPES = {\n  MANIFEST: 'm',\n  AUDIO: 'a',\n  VIDEO: 'v',\n  INIT: 'i',\n  CAPTION: 'c',\n  ISOBMFF_TEXT_TRACK: 'tt',\n  ENCRYPTION_KEY: 'k',\n  OTHER: 'o'\n};\nvar STREAMING_FORMATS = {\n  DASH: 'd',\n  MSS: 's'\n};\nvar STREAM_TYPES = {\n  VOD: 'v',\n  LIVE: 'l'\n};\nvar RTP_SAFETY_FACTOR = 5;\n\nfunction CmcdModel() {\n  var logger = void 0,\n      dashManifestModel = void 0,\n      instance = void 0,\n      internalData = void 0,\n      abrController = void 0,\n      dashMetrics = void 0,\n      playbackController = void 0,\n      streamProcessors = void 0,\n      _isStartup = void 0,\n      _bufferLevelStarved = void 0,\n      _initialMediaRequestsDone = void 0;\n\n  var context = this.context;\n  var eventBus = (0, _EventBus2.default)(context).getInstance();\n  var settings = (0, _Settings2.default)(context).getInstance();\n\n  function setup() {\n    logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);\n    dashManifestModel = (0, _DashManifestModel2.default)(context).getInstance();\n\n    _resetInitialSettings();\n  }\n\n  function initialize() {\n    eventBus.on(_MediaPlayerEvents2.default.PLAYBACK_RATE_CHANGED, _onPlaybackRateChanged, instance);\n    eventBus.on(_MediaPlayerEvents2.default.MANIFEST_LOADED, _onManifestLoaded, instance);\n    eventBus.on(_MediaPlayerEvents2.default.BUFFER_LEVEL_STATE_CHANGED, _onBufferLevelStateChanged, instance);\n    eventBus.on(_MediaPlayerEvents2.default.PLAYBACK_SEEKED, _onPlaybackSeeked, instance);\n    eventBus.on(_MediaPlayerEvents2.default.PERIOD_SWITCH_COMPLETED, _onPeriodSwitchComplete, instance);\n  }\n\n  function setConfig(config) {\n    if (!config) return;\n\n    if (config.abrController) {\n      abrController = config.abrController;\n    }\n\n    if (config.dashMetrics) {\n      dashMetrics = config.dashMetrics;\n    }\n\n    if (config.playbackController) {\n      playbackController = config.playbackController;\n    }\n  }\n\n  function _resetInitialSettings() {\n    internalData = {\n      pr: 1,\n      nor: null,\n      st: null,\n      sf: null,\n      sid: '' + _Utils2.default.generateUuid(),\n      cid: null\n    };\n    _bufferLevelStarved = {};\n    _isStartup = {};\n    _initialMediaRequestsDone = {};\n\n    _updateStreamProcessors();\n  }\n\n  function _onPeriodSwitchComplete() {\n    _updateStreamProcessors();\n  }\n\n  function _updateStreamProcessors() {\n    if (!playbackController) return;\n    var streamController = playbackController.getStreamController();\n    if (!streamController) return;\n    if (typeof streamController.getActiveStream !== 'function') return;\n    var activeStream = streamController.getActiveStream();\n    if (!activeStream) return;\n    streamProcessors = activeStream.getProcessors();\n  }\n\n  function getQueryParameter(request) {\n    try {\n      if (settings.get().streaming.cmcd && settings.get().streaming.cmcd.enabled) {\n        var cmcdData = _getCmcdData(request);\n\n        var finalPayloadString = _buildFinalString(cmcdData);\n\n        eventBus.trigger(_MetricsReportingEvents2.default.CMCD_DATA_GENERATED, {\n          url: request.url,\n          mediaType: request.mediaType,\n          cmcdData: cmcdData,\n          cmcdString: finalPayloadString\n        });\n        return {\n          key: CMCD_REQUEST_FIELD_NAME,\n          value: finalPayloadString\n        };\n      }\n\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function _copyParameters(data, parameterNames) {\n    var copiedData = {};\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = parameterNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var name = _step.value;\n\n        if (data[name]) {\n          copiedData[name] = data[name];\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return copiedData;\n  }\n\n  function getHeaderParameters(request) {\n    try {\n      if (settings.get().streaming.cmcd && settings.get().streaming.cmcd.enabled) {\n        var cmcdData = _getCmcdData(request);\n\n        var cmcdObjectHeader = _copyParameters(cmcdData, ['br', 'd', 'ot', 'tb']);\n\n        var cmcdRequestHeader = _copyParameters(cmcdData, ['bl', 'dl', 'mtp', 'nor', 'nrr', 'su']);\n\n        var cmcdStatusHeader = _copyParameters(cmcdData, ['bs', 'rtp']);\n\n        var cmcdSessionHeader = _copyParameters(cmcdData, ['cid', 'pr', 'sf', 'sid', 'st', 'v']);\n\n        var headers = {\n          'CMCD-Object': _buildFinalString(cmcdObjectHeader),\n          'CMCD-Request': _buildFinalString(cmcdRequestHeader),\n          'CMCD-Status': _buildFinalString(cmcdStatusHeader),\n          'CMCD-Session': _buildFinalString(cmcdSessionHeader)\n        };\n        eventBus.trigger(_MetricsReportingEvents2.default.CMCD_DATA_GENERATED, {\n          url: request.url,\n          mediaType: request.mediaType,\n          cmcdData: cmcdData\n        });\n        return headers;\n      }\n\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function _getCmcdData(request) {\n    try {\n      var cmcdData = null;\n\n      if (request.type === _HTTPRequest.HTTPRequest.MPD_TYPE) {\n        return _getCmcdDataForMpd(request);\n      } else if (request.type === _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE) {\n        _initForMediaType(request.mediaType);\n\n        return _getCmcdDataForMediaSegment(request);\n      } else if (request.type === _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE) {\n        return _getCmcdDataForInitSegment(request);\n      } else if (request.type === _HTTPRequest.HTTPRequest.OTHER_TYPE || request.type === _HTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE) {\n        return _getCmcdDataForOther(request);\n      } else if (request.type === _HTTPRequest.HTTPRequest.LICENSE) {\n        return _getCmcdDataForLicense(request);\n      }\n\n      return cmcdData;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function _getCmcdDataForLicense(request) {\n    var data = _getGenericCmcdData(request);\n\n    data.ot = OBJECT_TYPES.ENCRYPTION_KEY;\n    return data;\n  }\n\n  function _getCmcdDataForMpd() {\n    var data = _getGenericCmcdData();\n\n    data.ot = '' + OBJECT_TYPES.MANIFEST;\n    return data;\n  }\n\n  function _getCmcdDataForMediaSegment(request) {\n    var data = _getGenericCmcdData();\n\n    var encodedBitrate = _getBitrateByRequest(request);\n\n    var d = _getObjectDurationByRequest(request);\n\n    var mtp = _getMeasuredThroughputByType(request.mediaType);\n\n    var dl = _getDeadlineByType(request.mediaType);\n\n    var bl = _getBufferLevelByType(request.mediaType);\n\n    var tb = _getTopBitrateByType(request.mediaType);\n\n    var pr = internalData.pr;\n\n    var nextRequest = _probeNextRequest(request.mediaType);\n\n    var ot = void 0;\n    if (request.mediaType === _Constants2.default.VIDEO) ot = OBJECT_TYPES.VIDEO;\n    if (request.mediaType === _Constants2.default.AUDIO) ot = OBJECT_TYPES.AUDIO;\n\n    if (request.mediaType === _Constants2.default.FRAGMENTED_TEXT) {\n      if (request.mediaInfo.mimeType === 'application/mp4') {\n        ot = OBJECT_TYPES.ISOBMFF_TEXT_TRACK;\n      } else {\n        ot = OBJECT_TYPES.CAPTION;\n      }\n    }\n\n    var rtp = settings.get().streaming.cmcd.rtp;\n\n    if (!rtp) {\n      rtp = _calculateRtp(request);\n    }\n\n    data.rtp = rtp;\n\n    if (nextRequest) {\n      if (request.url !== nextRequest.url) {\n        var url = new URL(nextRequest.url);\n        data.nor = url.pathname;\n      } else if (nextRequest.range) {\n        data.nrr = nextRequest.range;\n      }\n    }\n\n    if (encodedBitrate) {\n      data.br = encodedBitrate;\n    }\n\n    if (ot) {\n      data.ot = ot;\n    }\n\n    if (!isNaN(d)) {\n      data.d = d;\n    }\n\n    if (!isNaN(mtp)) {\n      data.mtp = mtp;\n    }\n\n    if (!isNaN(dl)) {\n      data.dl = dl;\n    }\n\n    if (!isNaN(bl)) {\n      data.bl = bl;\n    }\n\n    if (!isNaN(tb)) {\n      data.tb = tb;\n    }\n\n    if (!isNaN(pr) && pr !== 1) {\n      data.pr = pr;\n    }\n\n    if (_bufferLevelStarved[request.mediaType]) {\n      data.bs = true;\n      _bufferLevelStarved[request.mediaType] = false;\n    }\n\n    if (_isStartup[request.mediaType] || !_initialMediaRequestsDone[request.mediaType]) {\n      data.su = true;\n      _isStartup[request.mediaType] = false;\n      _initialMediaRequestsDone[request.mediaType] = true;\n    }\n\n    return data;\n  }\n\n  function _initForMediaType(mediaType) {\n    if (!_initialMediaRequestsDone.hasOwnProperty(mediaType)) {\n      _initialMediaRequestsDone[mediaType] = false;\n    }\n\n    if (!_isStartup.hasOwnProperty(mediaType)) {\n      _isStartup[mediaType] = false;\n    }\n\n    if (!_bufferLevelStarved.hasOwnProperty(mediaType)) {\n      _bufferLevelStarved[mediaType] = false;\n    }\n  }\n\n  function _getCmcdDataForInitSegment() {\n    var data = _getGenericCmcdData();\n\n    data.ot = '' + OBJECT_TYPES.INIT;\n    data.su = true;\n    return data;\n  }\n\n  function _getCmcdDataForOther() {\n    var data = _getGenericCmcdData();\n\n    data.ot = '' + OBJECT_TYPES.OTHER;\n    return data;\n  }\n\n  function _getGenericCmcdData() {\n    var data = {};\n    var cid = settings.get().streaming.cmcd.cid ? settings.get().streaming.cmcd.cid : internalData.cid;\n    data.v = CMCD_VERSION;\n    data.sid = settings.get().streaming.cmcd.sid ? settings.get().streaming.cmcd.sid : internalData.sid;\n    data.sid = '' + data.sid;\n\n    if (cid) {\n      data.cid = '' + cid;\n    }\n\n    if (!isNaN(internalData.pr) && internalData.pr !== 1 && internalData.pr !== null) {\n      data.pr = internalData.pr;\n    }\n\n    if (internalData.st) {\n      data.st = internalData.st;\n    }\n\n    if (internalData.sf) {\n      data.sf = internalData.sf;\n    }\n\n    return data;\n  }\n\n  function _getBitrateByRequest(request) {\n    try {\n      var quality = request.quality;\n      var bitrateList = request.mediaInfo.bitrateList;\n      return parseInt(bitrateList[quality].bandwidth / 1000);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function _getTopBitrateByType(mediaType) {\n    try {\n      var info = abrController.getTopBitrateInfoFor(mediaType);\n      return Math.round(info.bitrate / 1000);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function _getObjectDurationByRequest(request) {\n    try {\n      return !isNaN(request.duration) ? Math.round(request.duration * 1000) : null;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function _getMeasuredThroughputByType(mediaType) {\n    try {\n      return parseInt(abrController.getThroughputHistory().getSafeAverageThroughput(mediaType) / 100) * 100;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function _getDeadlineByType(mediaType) {\n    try {\n      var playbackRate = internalData.pr;\n      var bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\n\n      if (!isNaN(playbackRate) && !isNaN(bufferLevel)) {\n        return parseInt(bufferLevel / playbackRate * 10) * 100;\n      }\n\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function _getBufferLevelByType(mediaType) {\n    try {\n      var bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\n\n      if (!isNaN(bufferLevel)) {\n        return parseInt(bufferLevel * 10) * 100;\n      }\n\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function _onPlaybackRateChanged(data) {\n    try {\n      internalData.pr = data.playbackRate;\n    } catch (e) {}\n  }\n\n  function _onManifestLoaded(data) {\n    try {\n      var isDynamic = dashManifestModel.getIsDynamic(data.data);\n      var st = isDynamic ? '' + STREAM_TYPES.LIVE : '' + STREAM_TYPES.VOD;\n      var sf = data.protocol && data.protocol === 'MSS' ? '' + STREAMING_FORMATS.MSS : '' + STREAMING_FORMATS.DASH;\n      internalData.st = '' + st;\n      internalData.sf = '' + sf;\n    } catch (e) {}\n  }\n\n  function _onBufferLevelStateChanged(data) {\n    try {\n      if (data.state && data.mediaType) {\n        if (data.state === _MediaPlayerEvents2.default.BUFFER_EMPTY) {\n          if (!_bufferLevelStarved[data.mediaType]) {\n            _bufferLevelStarved[data.mediaType] = true;\n          }\n\n          if (!_isStartup[data.mediaType]) {\n            _isStartup[data.mediaType] = true;\n          }\n        }\n      }\n    } catch (e) {}\n  }\n\n  function _onPlaybackSeeked() {\n    for (var key in _bufferLevelStarved) {\n      if (_bufferLevelStarved.hasOwnProperty(key)) {\n        _bufferLevelStarved[key] = true;\n      }\n    }\n\n    for (var _key in _isStartup) {\n      if (_isStartup.hasOwnProperty(_key)) {\n        _isStartup[_key] = true;\n      }\n    }\n  }\n\n  function _buildFinalString(cmcdData) {\n    try {\n      if (!cmcdData) {\n        return null;\n      }\n\n      var keys = Object.keys(cmcdData).sort(function (a, b) {\n        return a.localeCompare(b);\n      });\n      var length = keys.length;\n      var cmcdString = keys.reduce(function (acc, key, index) {\n        if (key === 'v' && cmcdData[key] === 1) return acc; // Version key should only be reported if it is != 1\n\n        if (typeof cmcdData[key] === 'string' && (key !== 'ot' || key !== 'sf' || key !== 'st')) {\n          var string = cmcdData[key].replace(/\"/g, '\\\"');\n          acc += key + '=\"' + string + '\"';\n        } else {\n          acc += key + '=' + cmcdData[key];\n        }\n\n        if (index < length - 1) {\n          acc += ',';\n        }\n\n        return acc;\n      }, '');\n      cmcdString = cmcdString.replace(/=true/g, '');\n      return cmcdString;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function _probeNextRequest(mediaType) {\n    if (!streamProcessors || streamProcessors.length === 0) return;\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = streamProcessors[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var streamProcessor = _step2.value;\n\n        if (streamProcessor.getType() === mediaType) {\n          return streamProcessor.probeNextRequest();\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  }\n\n  function _calculateRtp(request) {\n    // Get the values we need\n    var playbackRate = playbackController.getPlaybackRate();\n    if (!playbackRate) playbackRate = 1;\n    var quality = request.quality,\n        mediaType = request.mediaType,\n        mediaInfo = request.mediaInfo,\n        duration = request.duration;\n\n    var currentBufferLevel = _getBufferLevelByType(mediaType);\n\n    if (currentBufferLevel === 0) currentBufferLevel = 500;\n    var bitrate = mediaInfo.bitrateList[quality].bandwidth; // Calculate RTP\n\n    var segmentSize = bitrate * duration / 1000; // Calculate file size in kilobits\n\n    var timeToLoad = currentBufferLevel / playbackRate / 1000; // Calculate time available to load file in seconds\n\n    var minBandwidth = segmentSize / timeToLoad; // Calculate the exact bandwidth required\n\n    var rtpSafetyFactor = settings.get().streaming.cmcd.rtpSafetyFactor && !isNaN(settings.get().streaming.cmcd.rtpSafetyFactor) ? settings.get().streaming.cmcd.rtpSafetyFactor : RTP_SAFETY_FACTOR;\n    var maxBandwidth = minBandwidth * rtpSafetyFactor; // Include a safety buffer\n\n    var rtp = (parseInt(maxBandwidth / 100) + 1) * 100; // Round to the next multiple of 100\n\n    return rtp;\n  }\n\n  function reset() {\n    eventBus.off(_MediaPlayerEvents2.default.PLAYBACK_RATE_CHANGED, _onPlaybackRateChanged, this);\n    eventBus.off(_MediaPlayerEvents2.default.MANIFEST_LOADED, _onManifestLoaded, this);\n    eventBus.off(_MediaPlayerEvents2.default.BUFFER_LEVEL_STATE_CHANGED, _onBufferLevelStateChanged, instance);\n    eventBus.off(_MediaPlayerEvents2.default.PLAYBACK_SEEKED, _onPlaybackSeeked, instance);\n\n    _resetInitialSettings();\n  }\n\n  instance = {\n    getQueryParameter: getQueryParameter,\n    getHeaderParameters: getHeaderParameters,\n    setConfig: setConfig,\n    reset: reset,\n    initialize: initialize\n  };\n  setup();\n  return instance;\n}\n\nCmcdModel.__dashjs_factory_name = 'CmcdModel';\nexports.default = _FactoryMaker2.default.getSingletonFactory(CmcdModel);","map":{"version":3,"sources":["../../../../../src/streaming/models/CmcdModel.js"],"names":["CMCD_REQUEST_FIELD_NAME","CMCD_VERSION","OBJECT_TYPES","MANIFEST","AUDIO","VIDEO","INIT","CAPTION","ISOBMFF_TEXT_TRACK","ENCRYPTION_KEY","OTHER","STREAMING_FORMATS","DASH","MSS","STREAM_TYPES","VOD","LIVE","RTP_SAFETY_FACTOR","logger","dashManifestModel","instance","internalData","abrController","dashMetrics","playbackController","streamProcessors","_isStartup","_bufferLevelStarved","_initialMediaRequestsDone","context","eventBus","settings","_resetInitialSettings","MediaPlayerEvents","config","pr","nor","st","sf","sid","Utils","cid","_updateStreamProcessors","streamController","activeStream","cmcdData","_getCmcdData","finalPayloadString","_buildFinalString","MetricsReportingEvents","url","request","mediaType","cmcdString","key","value","copiedData","name","parameterNames","data","cmcdObjectHeader","_copyParameters","cmcdRequestHeader","cmcdStatusHeader","cmcdSessionHeader","headers","HTTPRequest","_getCmcdDataForMpd","_initForMediaType","_getCmcdDataForMediaSegment","_getCmcdDataForInitSegment","_getCmcdDataForOther","_getCmcdDataForLicense","_getGenericCmcdData","encodedBitrate","_getBitrateByRequest","d","_getObjectDurationByRequest","mtp","_getMeasuredThroughputByType","dl","_getDeadlineByType","bl","_getBufferLevelByType","tb","_getTopBitrateByType","nextRequest","_probeNextRequest","ot","Constants","rtp","_calculateRtp","isNaN","quality","bitrateList","parseInt","info","Math","playbackRate","bufferLevel","isDynamic","keys","Object","a","length","string","acc","index","streamProcessor","mediaInfo","duration","currentBufferLevel","bitrate","segmentSize","timeToLoad","minBandwidth","rtpSafetyFactor","maxBandwidth","getQueryParameter","getHeaderParameters","setConfig","reset","initialize","setup","CmcdModel","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventBus from '../../core/EventBus';\nimport MediaPlayerEvents from '../MediaPlayerEvents';\nimport MetricsReportingEvents from '../metrics/MetricsReportingEvents';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport Settings from '../../core/Settings';\nimport Constants from '../../streaming/constants/Constants';\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\nimport DashManifestModel from '../../dash/models/DashManifestModel';\nimport Utils from '../../core/Utils';\n\nconst CMCD_REQUEST_FIELD_NAME = 'CMCD';\nconst CMCD_VERSION = 1;\nconst OBJECT_TYPES = {\n    MANIFEST: 'm',\n    AUDIO: 'a',\n    VIDEO: 'v',\n    INIT: 'i',\n    CAPTION: 'c',\n    ISOBMFF_TEXT_TRACK: 'tt',\n    ENCRYPTION_KEY: 'k',\n    OTHER: 'o'\n};\nconst STREAMING_FORMATS = {\n    DASH: 'd',\n    MSS: 's'\n};\nconst STREAM_TYPES = {\n    VOD: 'v',\n    LIVE: 'l'\n};\nconst RTP_SAFETY_FACTOR = 5;\n\nfunction CmcdModel() {\n\n    let logger,\n        dashManifestModel,\n        instance,\n        internalData,\n        abrController,\n        dashMetrics,\n        playbackController,\n        streamProcessors,\n        _isStartup,\n        _bufferLevelStarved,\n        _initialMediaRequestsDone;\n\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n    let settings = Settings(context).getInstance();\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        dashManifestModel = DashManifestModel(context).getInstance();\n\n        _resetInitialSettings();\n    }\n\n    function initialize() {\n        eventBus.on(MediaPlayerEvents.PLAYBACK_RATE_CHANGED, _onPlaybackRateChanged, instance);\n        eventBus.on(MediaPlayerEvents.MANIFEST_LOADED, _onManifestLoaded, instance);\n        eventBus.on(MediaPlayerEvents.BUFFER_LEVEL_STATE_CHANGED, _onBufferLevelStateChanged, instance);\n        eventBus.on(MediaPlayerEvents.PLAYBACK_SEEKED, _onPlaybackSeeked, instance);\n        eventBus.on(MediaPlayerEvents.PERIOD_SWITCH_COMPLETED, _onPeriodSwitchComplete, instance);\n    }\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.abrController) {\n            abrController = config.abrController;\n        }\n\n        if (config.dashMetrics) {\n            dashMetrics = config.dashMetrics;\n        }\n\n        if (config.playbackController) {\n            playbackController = config.playbackController;\n        }\n    }\n\n    function _resetInitialSettings() {\n        internalData = {\n            pr: 1,\n            nor: null,\n            st: null,\n            sf: null,\n            sid: `${Utils.generateUuid()}`,\n            cid: null\n        };\n        _bufferLevelStarved = {};\n        _isStartup = {};\n        _initialMediaRequestsDone = {};\n        _updateStreamProcessors();\n    }\n\n    function _onPeriodSwitchComplete() {\n        _updateStreamProcessors();\n    }\n\n    function _updateStreamProcessors() {\n        if (!playbackController) return;\n        const streamController = playbackController.getStreamController();\n        if (!streamController) return;\n        if (typeof streamController.getActiveStream !== 'function') return;\n        const activeStream = streamController.getActiveStream();\n        if (!activeStream) return;\n        streamProcessors = activeStream.getProcessors();\n    }\n\n    function getQueryParameter(request) {\n        try {\n            if (settings.get().streaming.cmcd && settings.get().streaming.cmcd.enabled) {\n                const cmcdData = _getCmcdData(request);\n                const finalPayloadString = _buildFinalString(cmcdData);\n\n                eventBus.trigger(MetricsReportingEvents.CMCD_DATA_GENERATED, {\n                    url: request.url,\n                    mediaType: request.mediaType,\n                    cmcdData,\n                    cmcdString: finalPayloadString\n                });\n                return {\n                    key: CMCD_REQUEST_FIELD_NAME,\n                    value: finalPayloadString\n                };\n            }\n\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _copyParameters(data, parameterNames) {\n        const copiedData = {};\n        for (let name of parameterNames) {\n            if (data[name]) {\n                copiedData[name] = data[name];\n            }\n        }\n        return copiedData;\n    }\n\n    function getHeaderParameters(request) {\n        try {\n            if (settings.get().streaming.cmcd && settings.get().streaming.cmcd.enabled) {\n                const cmcdData = _getCmcdData(request);\n                const cmcdObjectHeader = _copyParameters(cmcdData, ['br', 'd', 'ot', 'tb']);\n                const cmcdRequestHeader = _copyParameters(cmcdData, ['bl', 'dl', 'mtp', 'nor', 'nrr', 'su']);\n                const cmcdStatusHeader = _copyParameters(cmcdData, ['bs', 'rtp']);\n                const cmcdSessionHeader = _copyParameters(cmcdData, ['cid', 'pr', 'sf', 'sid', 'st', 'v']);\n                const headers = {\n                    'CMCD-Object': _buildFinalString(cmcdObjectHeader),\n                    'CMCD-Request': _buildFinalString(cmcdRequestHeader),\n                    'CMCD-Status': _buildFinalString(cmcdStatusHeader),\n                    'CMCD-Session': _buildFinalString(cmcdSessionHeader)\n                };\n\n                eventBus.trigger(MetricsReportingEvents.CMCD_DATA_GENERATED, {\n                    url: request.url,\n                    mediaType: request.mediaType,\n                    cmcdData\n                });\n                return headers;\n            }\n\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getCmcdData(request) {\n        try {\n            let cmcdData = null;\n\n            if (request.type === HTTPRequest.MPD_TYPE) {\n                return _getCmcdDataForMpd(request);\n            } else if (request.type === HTTPRequest.MEDIA_SEGMENT_TYPE) {\n                _initForMediaType(request.mediaType);\n                return _getCmcdDataForMediaSegment(request);\n            } else if (request.type === HTTPRequest.INIT_SEGMENT_TYPE) {\n                return _getCmcdDataForInitSegment(request);\n            } else if (request.type === HTTPRequest.OTHER_TYPE || request.type === HTTPRequest.XLINK_EXPANSION_TYPE) {\n                return _getCmcdDataForOther(request);\n            } else if (request.type === HTTPRequest.LICENSE) {\n                return _getCmcdDataForLicense(request);\n            }\n\n            return cmcdData;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getCmcdDataForLicense(request) {\n        const data = _getGenericCmcdData(request);\n\n        data.ot = OBJECT_TYPES.ENCRYPTION_KEY;\n\n        return data;\n    }\n\n    function _getCmcdDataForMpd() {\n        const data = _getGenericCmcdData();\n\n        data.ot = `${OBJECT_TYPES.MANIFEST}`;\n\n        return data;\n    }\n\n    function _getCmcdDataForMediaSegment(request) {\n        const data = _getGenericCmcdData();\n        const encodedBitrate = _getBitrateByRequest(request);\n        const d = _getObjectDurationByRequest(request);\n        const mtp = _getMeasuredThroughputByType(request.mediaType);\n        const dl = _getDeadlineByType(request.mediaType);\n        const bl = _getBufferLevelByType(request.mediaType);\n        const tb = _getTopBitrateByType(request.mediaType);\n        const pr = internalData.pr;\n\n        const nextRequest = _probeNextRequest(request.mediaType);\n\n        let ot;\n        if (request.mediaType === Constants.VIDEO) ot = OBJECT_TYPES.VIDEO;\n        if (request.mediaType === Constants.AUDIO) ot = OBJECT_TYPES.AUDIO;\n        if (request.mediaType === Constants.FRAGMENTED_TEXT) {\n            if (request.mediaInfo.mimeType === 'application/mp4') {\n                ot = OBJECT_TYPES.ISOBMFF_TEXT_TRACK;\n            } else {\n                ot = OBJECT_TYPES.CAPTION;\n            }\n        }\n\n        let rtp = settings.get().streaming.cmcd.rtp;\n        if (!rtp) {\n            rtp = _calculateRtp(request);\n        }\n        data.rtp = rtp;\n\n        if (nextRequest) {\n            if (request.url !== nextRequest.url) {\n                let url = new URL(nextRequest.url);\n                data.nor = url.pathname;\n            } else if (nextRequest.range) {\n                data.nrr = nextRequest.range;\n            }\n        }\n\n        if (encodedBitrate) {\n            data.br = encodedBitrate;\n        }\n\n        if (ot) {\n            data.ot = ot;\n        }\n\n        if (!isNaN(d)) {\n            data.d = d;\n        }\n\n        if (!isNaN(mtp)) {\n            data.mtp = mtp;\n        }\n\n        if (!isNaN(dl)) {\n            data.dl = dl;\n        }\n\n        if (!isNaN(bl)) {\n            data.bl = bl;\n        }\n\n        if (!isNaN(tb)) {\n            data.tb = tb;\n        }\n\n        if (!isNaN(pr) && pr !== 1) {\n            data.pr = pr;\n        }\n\n        if (_bufferLevelStarved[request.mediaType]) {\n            data.bs = true;\n            _bufferLevelStarved[request.mediaType] = false;\n        }\n\n        if (_isStartup[request.mediaType] || !_initialMediaRequestsDone[request.mediaType]) {\n            data.su = true;\n            _isStartup[request.mediaType] = false;\n            _initialMediaRequestsDone[request.mediaType] = true;\n        }\n\n        return data;\n    }\n\n    function _initForMediaType(mediaType) {\n\n        if (!_initialMediaRequestsDone.hasOwnProperty(mediaType)) {\n            _initialMediaRequestsDone[mediaType] = false;\n        }\n\n        if (!_isStartup.hasOwnProperty(mediaType)) {\n            _isStartup[mediaType] = false;\n        }\n\n        if (!_bufferLevelStarved.hasOwnProperty(mediaType)) {\n            _bufferLevelStarved[mediaType] = false;\n        }\n    }\n\n    function _getCmcdDataForInitSegment() {\n        const data = _getGenericCmcdData();\n\n        data.ot = `${OBJECT_TYPES.INIT}`;\n        data.su = true;\n\n        return data;\n    }\n\n    function _getCmcdDataForOther() {\n        const data = _getGenericCmcdData();\n\n        data.ot = `${OBJECT_TYPES.OTHER}`;\n\n        return data;\n    }\n\n\n    function _getGenericCmcdData() {\n        const data = {};\n\n        let cid = settings.get().streaming.cmcd.cid ? settings.get().streaming.cmcd.cid : internalData.cid;\n\n        data.v = CMCD_VERSION;\n        data.sid = settings.get().streaming.cmcd.sid ? settings.get().streaming.cmcd.sid : internalData.sid;\n\n        data.sid = `${data.sid}`;\n\n        if (cid) {\n            data.cid = `${cid}`;\n        }\n\n        if (!isNaN(internalData.pr) && internalData.pr !== 1 && internalData.pr !== null) {\n            data.pr = internalData.pr;\n        }\n\n        if (internalData.st) {\n            data.st = internalData.st;\n        }\n\n        if (internalData.sf) {\n            data.sf = internalData.sf;\n        }\n\n        return data;\n    }\n\n    function _getBitrateByRequest(request) {\n        try {\n            const quality = request.quality;\n            const bitrateList = request.mediaInfo.bitrateList;\n\n            return parseInt(bitrateList[quality].bandwidth / 1000);\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getTopBitrateByType(mediaType) {\n        try {\n            const info = abrController.getTopBitrateInfoFor(mediaType);\n            return Math.round(info.bitrate / 1000);\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getObjectDurationByRequest(request) {\n        try {\n            return !isNaN(request.duration) ? Math.round(request.duration * 1000) : null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getMeasuredThroughputByType(mediaType) {\n        try {\n            return parseInt(abrController.getThroughputHistory().getSafeAverageThroughput(mediaType) / 100) * 100;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getDeadlineByType(mediaType) {\n        try {\n            const playbackRate = internalData.pr;\n            const bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\n\n            if (!isNaN(playbackRate) && !isNaN(bufferLevel)) {\n                return parseInt((bufferLevel / playbackRate) * 10) * 100;\n            }\n\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getBufferLevelByType(mediaType) {\n        try {\n            const bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\n\n            if (!isNaN(bufferLevel)) {\n                return parseInt(bufferLevel * 10) * 100;\n            }\n\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _onPlaybackRateChanged(data) {\n        try {\n            internalData.pr = data.playbackRate;\n        } catch (e) {\n\n        }\n    }\n\n    function _onManifestLoaded(data) {\n        try {\n            const isDynamic = dashManifestModel.getIsDynamic(data.data);\n            const st = isDynamic ? `${STREAM_TYPES.LIVE}` : `${STREAM_TYPES.VOD}`;\n            const sf = data.protocol && data.protocol === 'MSS' ? `${STREAMING_FORMATS.MSS}` : `${STREAMING_FORMATS.DASH}`;\n\n            internalData.st = `${st}`;\n            internalData.sf = `${sf}`;\n        } catch (e) {\n        }\n    }\n\n    function _onBufferLevelStateChanged(data) {\n        try {\n            if (data.state && data.mediaType) {\n                if (data.state === MediaPlayerEvents.BUFFER_EMPTY) {\n\n                    if (!_bufferLevelStarved[data.mediaType]) {\n                        _bufferLevelStarved[data.mediaType] = true;\n                    }\n                    if (!_isStartup[data.mediaType]) {\n                        _isStartup[data.mediaType] = true;\n                    }\n                }\n            }\n        } catch (e) {\n\n        }\n    }\n\n    function _onPlaybackSeeked() {\n        for (let key in _bufferLevelStarved) {\n            if (_bufferLevelStarved.hasOwnProperty(key)) {\n                _bufferLevelStarved[key] = true;\n            }\n        }\n\n        for (let key in _isStartup) {\n            if (_isStartup.hasOwnProperty(key)) {\n                _isStartup[key] = true;\n            }\n        }\n    }\n\n    function _buildFinalString(cmcdData) {\n        try {\n            if (!cmcdData) {\n                return null;\n            }\n            const keys = Object.keys(cmcdData).sort((a, b) => a.localeCompare(b));\n            const length = keys.length;\n\n            let cmcdString = keys.reduce((acc, key, index) => {\n                if (key === 'v' && cmcdData[key] === 1) return acc; // Version key should only be reported if it is != 1\n                if (typeof cmcdData[key] === 'string' && (key !== 'ot' || key !== 'sf' || key !== 'st')) {\n                    let string = cmcdData[key].replace(/\"/g, '\\\"');\n                    acc += `${key}=\"${string}\"`;\n                } else {\n                    acc += `${key}=${cmcdData[key]}`;\n                }\n                if (index < length - 1) {\n                    acc += ',';\n                }\n\n                return acc;\n            }, '');\n\n            cmcdString = cmcdString.replace(/=true/g, '');\n\n            return cmcdString;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _probeNextRequest(mediaType) {\n        if (!streamProcessors || streamProcessors.length === 0) return;\n        for (let streamProcessor of streamProcessors) {\n            if (streamProcessor.getType() === mediaType) {\n                return streamProcessor.probeNextRequest();\n            }\n        }\n    }\n\n    function _calculateRtp(request) {\n        // Get the values we need\n        let playbackRate = playbackController.getPlaybackRate();\n        if (!playbackRate) playbackRate = 1;\n        let { quality, mediaType, mediaInfo, duration } = request;\n        let currentBufferLevel = _getBufferLevelByType(mediaType);\n        if (currentBufferLevel === 0) currentBufferLevel = 500;\n        let bitrate = mediaInfo.bitrateList[quality].bandwidth;\n\n        // Calculate RTP\n        let segmentSize = (bitrate * duration) / 1000; // Calculate file size in kilobits\n        let timeToLoad = (currentBufferLevel / playbackRate) / 1000; // Calculate time available to load file in seconds\n        let minBandwidth = segmentSize / timeToLoad; // Calculate the exact bandwidth required\n        let rtpSafetyFactor = settings.get().streaming.cmcd.rtpSafetyFactor && !isNaN(settings.get().streaming.cmcd.rtpSafetyFactor) ? settings.get().streaming.cmcd.rtpSafetyFactor : RTP_SAFETY_FACTOR;\n        let maxBandwidth = minBandwidth * rtpSafetyFactor; // Include a safety buffer\n\n        let rtp = (parseInt(maxBandwidth / 100) + 1) * 100; // Round to the next multiple of 100\n\n        return rtp;\n    }\n\n    function reset() {\n        eventBus.off(MediaPlayerEvents.PLAYBACK_RATE_CHANGED, _onPlaybackRateChanged, this);\n        eventBus.off(MediaPlayerEvents.MANIFEST_LOADED, _onManifestLoaded, this);\n        eventBus.off(MediaPlayerEvents.BUFFER_LEVEL_STATE_CHANGED, _onBufferLevelStateChanged, instance);\n        eventBus.off(MediaPlayerEvents.PLAYBACK_SEEKED, _onPlaybackSeeked, instance);\n\n        _resetInitialSettings();\n    }\n\n    instance = {\n        getQueryParameter,\n        getHeaderParameters,\n        setConfig,\n        reset,\n        initialize\n    };\n\n    setup();\n\n    return instance;\n}\n\nCmcdModel.__dashjs_factory_name = 'CmcdModel';\nexport default FactoryMaker.getSingletonFactory(CmcdModel);\n"]},"metadata":{},"sourceType":"script"}