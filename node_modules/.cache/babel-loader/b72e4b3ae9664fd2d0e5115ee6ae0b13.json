{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _XlinkLoader = require('../XlinkLoader');\n\nvar _XlinkLoader2 = _interopRequireDefault(_XlinkLoader);\n\nvar _EventBus = require('../../core/EventBus');\n\nvar _EventBus2 = _interopRequireDefault(_EventBus);\n\nvar _Events = require('../../core/events/Events');\n\nvar _Events2 = _interopRequireDefault(_Events);\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _xml2json = require('../../../externals/xml2json');\n\nvar _xml2json2 = _interopRequireDefault(_xml2json);\n\nvar _URLUtils = require('../utils/URLUtils');\n\nvar _URLUtils2 = _interopRequireDefault(_URLUtils);\n\nvar _DashConstants = require('../../dash/constants/DashConstants');\n\nvar _DashConstants2 = _interopRequireDefault(_DashConstants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar RESOLVE_TYPE_ONLOAD = 'onLoad';\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\nvar RESOLVE_TYPE_ONACTUATE = 'onActuate';\nvar RESOLVE_TO_ZERO = 'urn:mpeg:dash:resolve-to-zero:2013';\n\nfunction XlinkController(config) {\n  config = config || {};\n  var context = this.context;\n  var eventBus = (0, _EventBus2.default)(context).getInstance();\n  var urlUtils = (0, _URLUtils2.default)(context).getInstance();\n  var instance = void 0,\n      matchers = void 0,\n      iron = void 0,\n      manifest = void 0,\n      converter = void 0,\n      xlinkLoader = void 0;\n\n  function setup() {\n    eventBus.on(_Events2.default.XLINK_ELEMENT_LOADED, onXlinkElementLoaded, instance);\n    xlinkLoader = (0, _XlinkLoader2.default)(context).create({\n      errHandler: config.errHandler,\n      dashMetrics: config.dashMetrics,\n      mediaPlayerModel: config.mediaPlayerModel,\n      requestModifier: config.requestModifier,\n      settings: config.settings\n    });\n  }\n\n  function setMatchers(value) {\n    if (value) {\n      matchers = value;\n    }\n  }\n\n  function setIron(value) {\n    if (value) {\n      iron = value;\n    }\n  }\n  /**\n  * <p>Triggers the resolution of the xlink.onLoad attributes in the manifest file </p>\n  * @param {Object} mpd - the manifest\n  */\n\n\n  function resolveManifestOnLoad(mpd) {\n    var elements = void 0; // First resolve all periods, so unnecessary requests inside onLoad Periods with Default content are avoided\n\n    converter = new _xml2json2.default({\n      escapeMode: false,\n      attributePrefix: '',\n      arrayAccessForm: 'property',\n      emptyNodeForm: 'object',\n      stripWhitespaces: false,\n      enableToStringFunc: false,\n      ignoreRoot: true,\n      matchers: matchers\n    });\n    manifest = mpd;\n\n    if (manifest.Period_asArray) {\n      elements = getElementsToResolve(manifest.Period_asArray, manifest, _DashConstants2.default.PERIOD, RESOLVE_TYPE_ONLOAD);\n      resolve(elements, _DashConstants2.default.PERIOD, RESOLVE_TYPE_ONLOAD);\n    } else {\n      eventBus.trigger(_Events2.default.XLINK_READY, {\n        manifest: manifest\n      });\n    }\n  }\n\n  function reset() {\n    eventBus.off(_Events2.default.XLINK_ELEMENT_LOADED, onXlinkElementLoaded, instance);\n\n    if (xlinkLoader) {\n      xlinkLoader.reset();\n      xlinkLoader = null;\n    }\n  }\n\n  function resolve(elements, type, resolveType) {\n    var resolveObject = {};\n    var element = void 0,\n        url = void 0;\n    resolveObject.elements = elements;\n    resolveObject.type = type;\n    resolveObject.resolveType = resolveType; // If nothing to resolve, directly call allElementsLoaded\n\n    if (resolveObject.elements.length === 0) {\n      onXlinkAllElementsLoaded(resolveObject);\n    }\n\n    for (var i = 0; i < resolveObject.elements.length; i++) {\n      element = resolveObject.elements[i];\n\n      if (urlUtils.isHTTPURL(element.url)) {\n        url = element.url;\n      } else {\n        url = element.originalContent.BaseURL + element.url;\n      }\n\n      xlinkLoader.load(url, element, resolveObject);\n    }\n  }\n\n  function onXlinkElementLoaded(event) {\n    var element = void 0,\n        resolveObject = void 0;\n    var openingTag = '<response>';\n    var closingTag = '</response>';\n    var mergedContent = '';\n    element = event.element;\n    resolveObject = event.resolveObject; // if the element resolved into content parse the content\n\n    if (element.resolvedContent) {\n      var index = 0; // we add a parent elements so the converter is able to parse multiple elements of the same type which are not wrapped inside a container\n\n      if (element.resolvedContent.indexOf('<?xml') === 0) {\n        index = element.resolvedContent.indexOf('?>') + 2; //find the closing position of the xml declaration, if it exists.\n      }\n\n      mergedContent = element.resolvedContent.substr(0, index) + openingTag + element.resolvedContent.substr(index) + closingTag;\n      element.resolvedContent = converter.xml_str2json(mergedContent);\n    }\n\n    if (isResolvingFinished(resolveObject)) {\n      onXlinkAllElementsLoaded(resolveObject);\n    }\n  } // We got to wait till all elements of the current queue are resolved before merging back\n\n\n  function onXlinkAllElementsLoaded(resolveObject) {\n    var elements = [];\n    var i = void 0,\n        obj = void 0;\n    mergeElementsBack(resolveObject);\n\n    if (resolveObject.resolveType === RESOLVE_TYPE_ONACTUATE) {\n      eventBus.trigger(_Events2.default.XLINK_READY, {\n        manifest: manifest\n      });\n    }\n\n    if (resolveObject.resolveType === RESOLVE_TYPE_ONLOAD) {\n      switch (resolveObject.type) {\n        // Start resolving the other elements. We can do Adaptation Set and EventStream in parallel\n        case _DashConstants2.default.PERIOD:\n          for (i = 0; i < manifest[_DashConstants2.default.PERIOD + '_asArray'].length; i++) {\n            obj = manifest[_DashConstants2.default.PERIOD + '_asArray'][i];\n\n            if (obj.hasOwnProperty(_DashConstants2.default.ADAPTATION_SET + '_asArray')) {\n              elements = elements.concat(getElementsToResolve(obj[_DashConstants2.default.ADAPTATION_SET + '_asArray'], obj, _DashConstants2.default.ADAPTATION_SET, RESOLVE_TYPE_ONLOAD));\n            }\n\n            if (obj.hasOwnProperty(_DashConstants2.default.EVENT_STREAM + '_asArray')) {\n              elements = elements.concat(getElementsToResolve(obj[_DashConstants2.default.EVENT_STREAM + '_asArray'], obj, _DashConstants2.default.EVENT_STREAM, RESOLVE_TYPE_ONLOAD));\n            }\n          }\n\n          resolve(elements, _DashConstants2.default.ADAPTATION_SET, RESOLVE_TYPE_ONLOAD);\n          break;\n\n        case _DashConstants2.default.ADAPTATION_SET:\n          // TODO: Resolve SegmentList here\n          eventBus.trigger(_Events2.default.XLINK_READY, {\n            manifest: manifest\n          });\n          break;\n      }\n    }\n  } // Returns the elements with the specific resolve Type\n\n\n  function getElementsToResolve(elements, parentElement, type, resolveType) {\n    var toResolve = [];\n    var element = void 0,\n        i = void 0,\n        xlinkObject = void 0; // first remove all the resolve-to-zero elements\n\n    for (i = elements.length - 1; i >= 0; i--) {\n      element = elements[i];\n\n      if (element.hasOwnProperty('xlink:href') && element['xlink:href'] === RESOLVE_TO_ZERO) {\n        elements.splice(i, 1);\n      }\n    } // now get the elements with the right resolve type\n\n\n    for (i = 0; i < elements.length; i++) {\n      element = elements[i];\n\n      if (element.hasOwnProperty('xlink:href') && element.hasOwnProperty('xlink:actuate') && element['xlink:actuate'] === resolveType) {\n        xlinkObject = createXlinkObject(element['xlink:href'], parentElement, type, i, resolveType, element);\n        toResolve.push(xlinkObject);\n      }\n    }\n\n    return toResolve;\n  }\n\n  function mergeElementsBack(resolveObject) {\n    var resolvedElements = [];\n    var element = void 0,\n        type = void 0,\n        obj = void 0,\n        i = void 0,\n        j = void 0,\n        k = void 0; // Start merging back from the end because of index shifting. Note that the elements with the same parent have to be ordered by index ascending\n\n    for (i = resolveObject.elements.length - 1; i >= 0; i--) {\n      element = resolveObject.elements[i];\n      type = element.type + '_asArray'; // Element couldn't be resolved or is TODO Inappropriate target: Remove all Xlink attributes\n\n      if (!element.resolvedContent || isInappropriateTarget()) {\n        delete element.originalContent['xlink:actuate'];\n        delete element.originalContent['xlink:href'];\n        resolvedElements.push(element.originalContent);\n      } // Element was successfully resolved\n      else if (element.resolvedContent) {\n          for (j = 0; j < element.resolvedContent[type].length; j++) {\n            //TODO Contains another Xlink attribute with xlink:actuate set to onload. Remove all xLink attributes\n            obj = element.resolvedContent[type][j];\n            resolvedElements.push(obj);\n          }\n        } // Replace the old elements in the parent with the resolved ones\n\n\n      element.parentElement[type].splice(element.index, 1);\n\n      for (k = 0; k < resolvedElements.length; k++) {\n        element.parentElement[type].splice(element.index + k, 0, resolvedElements[k]);\n      }\n\n      resolvedElements = [];\n    }\n\n    if (resolveObject.elements.length > 0) {\n      iron.run(manifest);\n    }\n  }\n\n  function createXlinkObject(url, parentElement, type, index, resolveType, originalContent) {\n    return {\n      url: url,\n      parentElement: parentElement,\n      type: type,\n      index: index,\n      resolveType: resolveType,\n      originalContent: originalContent,\n      resolvedContent: null,\n      resolved: false\n    };\n  } // Check if all pending requests are finished\n\n\n  function isResolvingFinished(elementsToResolve) {\n    var i = void 0,\n        obj = void 0;\n\n    for (i = 0; i < elementsToResolve.elements.length; i++) {\n      obj = elementsToResolve.elements[i];\n\n      if (obj.resolved === false) {\n        return false;\n      }\n    }\n\n    return true;\n  } // TODO : Do some syntax check here if the target is valid or not\n\n\n  function isInappropriateTarget() {\n    return false;\n  }\n\n  instance = {\n    resolveManifestOnLoad: resolveManifestOnLoad,\n    setMatchers: setMatchers,\n    setIron: setIron,\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n\nXlinkController.__dashjs_factory_name = 'XlinkController';\nexports.default = _FactoryMaker2.default.getClassFactory(XlinkController);","map":{"version":3,"sources":["../../../../../src/streaming/controllers/XlinkController.js"],"names":["RESOLVE_TYPE_ONLOAD","RESOLVE_TYPE_ONACTUATE","RESOLVE_TO_ZERO","config","context","eventBus","urlUtils","instance","matchers","iron","manifest","converter","xlinkLoader","Events","errHandler","dashMetrics","mediaPlayerModel","requestModifier","settings","elements","X2JS","escapeMode","attributePrefix","arrayAccessForm","emptyNodeForm","stripWhitespaces","enableToStringFunc","ignoreRoot","getElementsToResolve","DashConstants","resolve","resolveObject","element","url","onXlinkAllElementsLoaded","i","openingTag","closingTag","mergedContent","event","index","isResolvingFinished","obj","mergeElementsBack","toResolve","xlinkObject","createXlinkObject","resolvedElements","type","j","k","isInappropriateTarget","parentElement","resolveType","originalContent","resolvedContent","resolved","elementsToResolve","resolveManifestOnLoad","setMatchers","setIron","reset","setup","XlinkController","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport XlinkLoader from '../XlinkLoader';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport X2JS from '../../../externals/xml2json';\nimport URLUtils from '../utils/URLUtils';\nimport DashConstants from '../../dash/constants/DashConstants';\n\nconst RESOLVE_TYPE_ONLOAD = 'onLoad';\nconst RESOLVE_TYPE_ONACTUATE = 'onActuate';\nconst RESOLVE_TO_ZERO = 'urn:mpeg:dash:resolve-to-zero:2013';\n\nfunction XlinkController(config) {\n\n    config = config || {};\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n    const urlUtils = URLUtils(context).getInstance();\n\n    let instance,\n        matchers,\n        iron,\n        manifest,\n        converter,\n        xlinkLoader;\n\n    function setup() {\n        eventBus.on(Events.XLINK_ELEMENT_LOADED, onXlinkElementLoaded, instance);\n\n        xlinkLoader = XlinkLoader(context).create({\n            errHandler: config.errHandler,\n            dashMetrics: config.dashMetrics,\n            mediaPlayerModel: config.mediaPlayerModel,\n            requestModifier: config.requestModifier,\n            settings: config.settings\n        });\n    }\n\n    function setMatchers(value) {\n        if (value) {\n            matchers = value;\n        }\n    }\n\n    function setIron(value) {\n        if (value) {\n            iron = value;\n        }\n    }\n\n    /**\n     * <p>Triggers the resolution of the xlink.onLoad attributes in the manifest file </p>\n     * @param {Object} mpd - the manifest\n     */\n    function resolveManifestOnLoad(mpd) {\n        let elements;\n        // First resolve all periods, so unnecessary requests inside onLoad Periods with Default content are avoided\n        converter = new X2JS({\n            escapeMode:         false,\n            attributePrefix:    '',\n            arrayAccessForm:    'property',\n            emptyNodeForm:      'object',\n            stripWhitespaces:   false,\n            enableToStringFunc: false,\n            ignoreRoot:         true,\n            matchers:           matchers\n        });\n\n        manifest = mpd;\n\n        if (manifest.Period_asArray) {\n            elements = getElementsToResolve(manifest.Period_asArray, manifest, DashConstants.PERIOD, RESOLVE_TYPE_ONLOAD);\n            resolve(elements, DashConstants.PERIOD, RESOLVE_TYPE_ONLOAD);\n        } else {\n            eventBus.trigger(Events.XLINK_READY, {manifest: manifest});\n        }\n    }\n\n    function reset() {\n        eventBus.off(Events.XLINK_ELEMENT_LOADED, onXlinkElementLoaded, instance);\n\n        if (xlinkLoader) {\n            xlinkLoader.reset();\n            xlinkLoader = null;\n        }\n    }\n\n    function resolve(elements, type, resolveType) {\n        let resolveObject = {};\n        let element,\n            url;\n\n        resolveObject.elements = elements;\n        resolveObject.type = type;\n        resolveObject.resolveType = resolveType;\n        // If nothing to resolve, directly call allElementsLoaded\n        if (resolveObject.elements.length === 0) {\n            onXlinkAllElementsLoaded(resolveObject);\n        }\n        for (let i = 0; i < resolveObject.elements.length; i++) {\n            element = resolveObject.elements[i];\n            if (urlUtils.isHTTPURL(element.url)) {\n                url = element.url;\n            } else {\n                url = element.originalContent.BaseURL + element.url;\n            }\n            xlinkLoader.load(url, element, resolveObject);\n        }\n    }\n\n    function onXlinkElementLoaded(event) {\n        let element,\n            resolveObject;\n\n        const openingTag = '<response>';\n        const closingTag = '</response>';\n        let mergedContent = '';\n\n        element = event.element;\n        resolveObject = event.resolveObject;\n        // if the element resolved into content parse the content\n        if (element.resolvedContent) {\n            let index = 0;\n            // we add a parent elements so the converter is able to parse multiple elements of the same type which are not wrapped inside a container\n            if (element.resolvedContent.indexOf('<?xml') === 0) {\n                index = element.resolvedContent.indexOf('?>') + 2; //find the closing position of the xml declaration, if it exists.\n            }\n            mergedContent = element.resolvedContent.substr(0,index) + openingTag + element.resolvedContent.substr(index) + closingTag;\n            element.resolvedContent = converter.xml_str2json(mergedContent);\n        }\n        if (isResolvingFinished(resolveObject)) {\n            onXlinkAllElementsLoaded(resolveObject);\n        }\n    }\n\n    // We got to wait till all elements of the current queue are resolved before merging back\n    function onXlinkAllElementsLoaded (resolveObject) {\n        let elements = [];\n        let i,\n            obj;\n\n        mergeElementsBack(resolveObject);\n        if (resolveObject.resolveType === RESOLVE_TYPE_ONACTUATE) {\n            eventBus.trigger(Events.XLINK_READY, { manifest: manifest });\n        }\n        if (resolveObject.resolveType === RESOLVE_TYPE_ONLOAD) {\n            switch (resolveObject.type) {\n                // Start resolving the other elements. We can do Adaptation Set and EventStream in parallel\n                case DashConstants.PERIOD:\n                    for (i = 0; i < manifest[DashConstants.PERIOD + '_asArray'].length; i++) {\n                        obj = manifest[DashConstants.PERIOD + '_asArray'][i];\n                        if (obj.hasOwnProperty(DashConstants.ADAPTATION_SET + '_asArray')) {\n                            elements = elements.concat(getElementsToResolve(obj[DashConstants.ADAPTATION_SET + '_asArray'], obj, DashConstants.ADAPTATION_SET, RESOLVE_TYPE_ONLOAD));\n                        }\n                        if (obj.hasOwnProperty(DashConstants.EVENT_STREAM + '_asArray')) {\n                            elements = elements.concat(getElementsToResolve(obj[DashConstants.EVENT_STREAM + '_asArray'], obj, DashConstants.EVENT_STREAM, RESOLVE_TYPE_ONLOAD));\n                        }\n                    }\n                    resolve(elements, DashConstants.ADAPTATION_SET, RESOLVE_TYPE_ONLOAD);\n                    break;\n                case DashConstants.ADAPTATION_SET:\n                    // TODO: Resolve SegmentList here\n                    eventBus.trigger(Events.XLINK_READY, { manifest: manifest });\n                    break;\n            }\n        }\n    }\n\n    // Returns the elements with the specific resolve Type\n    function getElementsToResolve(elements, parentElement, type, resolveType) {\n        let toResolve = [];\n        let element,\n            i,\n            xlinkObject;\n        // first remove all the resolve-to-zero elements\n        for (i = elements.length - 1; i >= 0; i--) {\n            element = elements[i];\n            if (element.hasOwnProperty('xlink:href') && element['xlink:href'] === RESOLVE_TO_ZERO) {\n                elements.splice(i, 1);\n            }\n        }\n        // now get the elements with the right resolve type\n        for (i = 0; i < elements.length; i++) {\n            element = elements[i];\n            if (element.hasOwnProperty('xlink:href') && element.hasOwnProperty('xlink:actuate') && element['xlink:actuate'] === resolveType) {\n                xlinkObject = createXlinkObject(element['xlink:href'], parentElement, type, i, resolveType, element);\n                toResolve.push(xlinkObject);\n            }\n        }\n        return toResolve;\n    }\n\n    function mergeElementsBack(resolveObject) {\n        let resolvedElements = [];\n        let element,\n            type,\n            obj,\n            i,\n            j,\n            k;\n        // Start merging back from the end because of index shifting. Note that the elements with the same parent have to be ordered by index ascending\n        for (i = resolveObject.elements.length - 1; i >= 0; i --) {\n            element = resolveObject.elements[i];\n            type = element.type + '_asArray';\n\n            // Element couldn't be resolved or is TODO Inappropriate target: Remove all Xlink attributes\n            if (!element.resolvedContent || isInappropriateTarget()) {\n                delete element.originalContent['xlink:actuate'];\n                delete element.originalContent['xlink:href'];\n                resolvedElements.push(element.originalContent);\n            }\n            // Element was successfully resolved\n            else if (element.resolvedContent) {\n                for (j = 0; j < element.resolvedContent[type].length; j++) {\n                    //TODO Contains another Xlink attribute with xlink:actuate set to onload. Remove all xLink attributes\n                    obj = element.resolvedContent[type][j];\n                    resolvedElements.push(obj);\n                }\n            }\n            // Replace the old elements in the parent with the resolved ones\n            element.parentElement[type].splice(element.index, 1);\n            for (k = 0; k < resolvedElements.length; k++) {\n                element.parentElement[type].splice(element.index + k, 0, resolvedElements[k]);\n            }\n            resolvedElements = [];\n        }\n        if (resolveObject.elements.length > 0) {\n            iron.run(manifest);\n        }\n    }\n\n    function createXlinkObject(url, parentElement, type, index, resolveType, originalContent) {\n        return {\n            url: url,\n            parentElement: parentElement,\n            type: type,\n            index: index,\n            resolveType: resolveType,\n            originalContent: originalContent,\n            resolvedContent: null,\n            resolved: false\n        };\n    }\n\n    // Check if all pending requests are finished\n    function isResolvingFinished(elementsToResolve) {\n        let i,\n            obj;\n        for (i = 0; i < elementsToResolve.elements.length; i++) {\n            obj = elementsToResolve.elements[i];\n            if (obj.resolved === false) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // TODO : Do some syntax check here if the target is valid or not\n    function isInappropriateTarget() {\n        return false;\n    }\n\n    instance = {\n        resolveManifestOnLoad: resolveManifestOnLoad,\n        setMatchers: setMatchers,\n        setIron: setIron,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nXlinkController.__dashjs_factory_name = 'XlinkController';\nexport default FactoryMaker.getClassFactory(XlinkController);\n"]},"metadata":{},"sourceType":"script"}