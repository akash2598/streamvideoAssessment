{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _EventBus = require('../../core/EventBus');\n\nvar _EventBus2 = _interopRequireDefault(_EventBus);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nfunction BlackListController(config) {\n  config = config || {};\n  var instance = void 0;\n  var blacklist = [];\n  var eventBus = (0, _EventBus2.default)(this.context).getInstance();\n  var updateEventName = config.updateEventName;\n  var addBlacklistEventName = config.addBlacklistEventName;\n\n  function contains(query) {\n    if (!blacklist.length || !query || !query.length) {\n      return false;\n    }\n\n    return blacklist.indexOf(query) !== -1;\n  }\n\n  function add(entry) {\n    if (blacklist.indexOf(entry) !== -1) {\n      return;\n    }\n\n    blacklist.push(entry);\n    eventBus.trigger(updateEventName, {\n      entry: entry\n    });\n  }\n\n  function onAddBlackList(e) {\n    add(e.entry);\n  }\n\n  function setup() {\n    if (addBlacklistEventName) {\n      eventBus.on(addBlacklistEventName, onAddBlackList, instance);\n    }\n  }\n\n  function reset() {\n    blacklist = [];\n  }\n\n  instance = {\n    add: add,\n    contains: contains,\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n\nBlackListController.__dashjs_factory_name = 'BlackListController';\nexports.default = _FactoryMaker2.default.getClassFactory(BlackListController);","map":{"version":3,"sources":["../../../../../src/streaming/controllers/BlacklistController.js"],"names":["config","instance","blacklist","eventBus","updateEventName","addBlacklistEventName","query","entry","add","e","contains","reset","setup","BlackListController","FactoryMaker"],"mappings":";;;;;;AA+BA,IAAA,aAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;;;;;;;AAhCA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,SAAA,mBAAA,CAAA,MAAA,EAAqC;AAEjCA,EAAAA,MAAAA,GAASA,MAAAA,IAATA,EAAAA;AACA,MAAIC,QAAAA,GAAAA,KAAJ,CAAA;AACA,MAAIC,SAAAA,GAAJ,EAAA;AAEA,MAAMC,QAAAA,GAAW,CAAA,GAAA,UAAA,CAAA,OAAA,EAAS,KAAT,OAAA,EAAjB,WAAiB,EAAjB;AACA,MAAMC,eAAAA,GAAkBJ,MAAAA,CAAxB,eAAA;AACA,MAAMK,qBAAAA,GAAwBL,MAAAA,CAA9B,qBAAA;;AAEA,WAAA,QAAA,CAAA,KAAA,EAAyB;AACrB,QAAI,CAACE,SAAAA,CAAD,MAAA,IAAqB,CAArB,KAAA,IAA+B,CAACI,KAAAA,CAApC,MAAA,EAAkD;AAC9C,aAAA,KAAA;AAGJ;;AAAA,WAAQJ,SAAAA,CAAAA,OAAAA,CAAAA,KAAAA,MAA6B,CAArC,CAAA;AAGJ;;AAAA,WAAA,GAAA,CAAA,KAAA,EAAoB;AAChB,QAAIA,SAAAA,CAAAA,OAAAA,CAAAA,KAAAA,MAA6B,CAAjC,CAAA,EAAqC;AACjC;AAGJA;;AAAAA,IAAAA,SAAAA,CAAAA,IAAAA,CAAAA,KAAAA;AAEAC,IAAAA,QAAAA,CAAAA,OAAAA,CAAAA,eAAAA,EAAkC;AAAEI,MAAAA,KAAAA,EAApCJ;AAAkC,KAAlCA;AAGJ;;AAAA,WAAA,cAAA,CAAA,CAAA,EAA2B;AACvBK,IAAAA,GAAAA,CAAIC,CAAAA,CAAJD,KAAAA,CAAAA;AAGJ;;AAAA,WAAA,KAAA,GAAiB;AACb,QAAA,qBAAA,EAA2B;AACvBL,MAAAA,QAAAA,CAAAA,EAAAA,CAAAA,qBAAAA,EAAAA,cAAAA,EAAAA,QAAAA;AAEP;AAED;;AAAA,WAAA,KAAA,GAAiB;AACbD,IAAAA,SAAAA,GAAAA,EAAAA;AAGJD;;AAAAA,EAAAA,QAAAA,GAAW;AACPO,IAAAA,GAAAA,EADO,GAAA;AAEPE,IAAAA,QAAAA,EAFO,QAAA;AAGPC,IAAAA,KAAAA,EAHJV;AAAW,GAAXA;AAMAW,EAAAA,KAAAA;AACA,SAAA,QAAA;AAGJC;;AAAAA,mBAAAA,CAAAA,qBAAAA,GAAAA,qBAAAA;kBACeC,cAAAA,CAAAA,OAAAA,CAAAA,eAAAA,CAAAA,mBAAAA,C","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\nimport EventBus from '../../core/EventBus';\n\nfunction BlackListController(config) {\n\n    config = config || {};\n    let instance;\n    let blacklist = [];\n\n    const eventBus = EventBus(this.context).getInstance();\n    const updateEventName = config.updateEventName;\n    const addBlacklistEventName = config.addBlacklistEventName;\n\n    function contains(query) {\n        if (!blacklist.length || !query || !query.length) {\n            return false;\n        }\n\n        return (blacklist.indexOf(query) !== -1);\n    }\n\n    function add(entry) {\n        if (blacklist.indexOf(entry) !== -1) {\n            return;\n        }\n\n        blacklist.push(entry);\n\n        eventBus.trigger(updateEventName, { entry: entry });\n    }\n\n    function onAddBlackList(e) {\n        add(e.entry);\n    }\n\n    function setup() {\n        if (addBlacklistEventName) {\n            eventBus.on(addBlacklistEventName, onAddBlackList, instance);\n        }\n    }\n\n    function reset() {\n        blacklist = [];\n    }\n\n    instance = {\n        add: add,\n        contains: contains,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nBlackListController.__dashjs_factory_name = 'BlackListController';\nexport default FactoryMaker.getClassFactory(BlackListController);\n"]},"metadata":{},"sourceType":"script"}