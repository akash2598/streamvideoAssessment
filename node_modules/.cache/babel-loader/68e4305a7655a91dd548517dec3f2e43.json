{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction DVBSelector(config) {\n  config = config || {};\n  var instance = void 0;\n  var blacklistController = config.blacklistController;\n\n  function getNonBlacklistedBaseUrls(urls) {\n    var removedPriorities = [];\n\n    var samePrioritiesFilter = function samePrioritiesFilter(el) {\n      if (removedPriorities.length) {\n        if (el.dvb_priority && removedPriorities.indexOf(el.dvb_priority) !== -1) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    var serviceLocationFilter = function serviceLocationFilter(baseUrl) {\n      if (blacklistController.contains(baseUrl.serviceLocation)) {\n        // whenever a BaseURL is removed from the available list of\n        // BaseURLs, any other BaseURL with the same @priority\n        // value as the BaseURL being removed shall also be removed\n        if (baseUrl.dvb_priority) {\n          removedPriorities.push(baseUrl.dvb_priority);\n        } // all URLs in the list which have a @serviceLocation\n        // attribute matching an entry in the blacklist shall be\n        // removed from the available list of BaseURLs\n\n\n        return false;\n      }\n\n      return true;\n    };\n\n    return urls.filter(serviceLocationFilter).filter(samePrioritiesFilter);\n  }\n\n  function selectByWeight(availableUrls) {\n    var prioritySorter = function prioritySorter(a, b) {\n      var diff = a.dvb_priority - b.dvb_priority;\n      return isNaN(diff) ? 0 : diff;\n    };\n\n    var topPriorityFilter = function topPriorityFilter(baseUrl, idx, arr) {\n      return !idx || arr[0].dvb_priority && baseUrl.dvb_priority && arr[0].dvb_priority === baseUrl.dvb_priority;\n    };\n\n    var totalWeight = 0;\n    var cumulWeights = [];\n    var idx = 0;\n    var rn = void 0,\n        urls = void 0; // It shall begin by taking the set of resolved BaseURLs present or inherited at the current\n    // position in the MPD, resolved and filtered as described in 10.8.2.1, that have the lowest\n    // @priority attribute value.\n\n    urls = availableUrls.sort(prioritySorter).filter(topPriorityFilter);\n\n    if (urls.length) {\n      if (urls.length > 1) {\n        // If there is more than one BaseURL with this lowest @priority attribute value then the Player\n        // shall select one of them at random such that the probability of each BaseURL being chosen\n        // is proportional to the value of its @weight attribute. The method described in RFC 2782\n        // [26] or picking from a number of weighted entries is suitable for this, but there may be other\n        // algorithms which achieve the same effect.\n        // add all the weights together, storing the accumulated weight per entry\n        urls.forEach(function (baseUrl) {\n          totalWeight += baseUrl.dvb_weight;\n          cumulWeights.push(totalWeight);\n        }); // pick a random number between zero and totalWeight\n\n        rn = Math.floor(Math.random() * (totalWeight - 1)); // select the index for the range rn falls within\n\n        cumulWeights.every(function (limit, index) {\n          idx = index;\n\n          if (rn < limit) {\n            return false;\n          }\n\n          return true;\n        });\n      }\n\n      return urls[idx];\n    }\n  }\n\n  function select(baseUrls) {\n    return baseUrls && selectByWeight(getNonBlacklistedBaseUrls(baseUrls));\n  }\n\n  instance = {\n    select: select\n  };\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nDVBSelector.__dashjs_factory_name = 'DVBSelector';\nexports.default = _FactoryMaker2.default.getClassFactory(DVBSelector);","map":{"version":3,"sources":["../../../../../../src/streaming/utils/baseUrlResolution/DVBSelector.js"],"names":["config","instance","blacklistController","removedPriorities","samePrioritiesFilter","el","serviceLocationFilter","baseUrl","urls","prioritySorter","diff","a","b","isNaN","topPriorityFilter","arr","totalWeight","cumulWeights","idx","rn","availableUrls","Math","baseUrls","selectByWeight","getNonBlacklistedBaseUrls","select","DVBSelector","FactoryMaker"],"mappings":";;;;;;AA8BA,IAAA,aAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;;;;;;;AAEA;;AAAA,SAAA,WAAA,CAAA,MAAA,EAA6B;AAEzBA,EAAAA,MAAAA,GAASA,MAAAA,IAATA,EAAAA;AACA,MAAIC,QAAAA,GAAAA,KAAJ,CAAA;AAEA,MAAMC,mBAAAA,GAAsBF,MAAAA,CAA5B,mBAAA;;AAEA,WAAA,yBAAA,CAAA,IAAA,EAAyC;AACrC,QAAIG,iBAAAA,GAAJ,EAAA;;AAEA,QAAMC,oBAAAA,GAAAA,SAAAA,oBAAAA,CAAuB,EAAvBA,EAAqC;AACvC,UAAID,iBAAAA,CAAJ,MAAA,EAA8B;AAC1B,YAAKE,EAAAA,CAAD,YAACA,IACIF,iBAAAA,CAAAA,OAAAA,CAA0BE,EAAAA,CAA1BF,YAAAA,MAA+C,CADxD,CAAA,EAC6D;AACzD,iBAAA,KAAA;AAEP;AAED;;AAAA,aAAA,IAAA;AARJ,KAAA;;AAWA,QAAMG,qBAAAA,GAAAA,SAAAA,qBAAAA,CAAwB,OAAxBA,EAA2C;AAC7C,UAAIJ,mBAAAA,CAAAA,QAAAA,CAA6BK,OAAAA,CAAjC,eAAIL,CAAJ,EAA2D;AACvD;AACA;AACA;AACA,YAAIK,OAAAA,CAAJ,YAAA,EAA0B;AACtBJ,UAAAA,iBAAAA,CAAAA,IAAAA,CAAuBI,OAAAA,CAAvBJ,YAAAA;AAGJ,SARuD,CAQvD;AACA;AACA;;;AACA,eAAA,KAAA;AAGJ;;AAAA,aAAA,IAAA;AAfJ,KAAA;;AAkBA,WAAOK,IAAAA,CAAAA,MAAAA,CAAAA,qBAAAA,EAAAA,MAAAA,CAAP,oBAAOA,CAAP;AAGJ;;AAAA,WAAA,cAAA,CAAA,aAAA,EAAuC;AACnC,QAAMC,cAAAA,GAAAA,SAAAA,cAAAA,CAAiB,CAAjBA,EAAiB,CAAjBA,EAAiC;AACnC,UAAIC,IAAAA,GAAOC,CAAAA,CAAAA,YAAAA,GAAiBC,CAAAA,CAA5B,YAAA;AACA,aAAOC,KAAAA,CAAAA,IAAAA,CAAAA,GAAAA,CAAAA,GAAP,IAAA;AAFJ,KAAA;;AAKA,QAAMC,iBAAAA,GAAAA,SAAAA,iBAAAA,CAAoB,OAApBA,EAAoB,GAApBA,EAAoB,GAApBA,EAAiD;AACnD,aAAO,CAAA,GAAA,IACFC,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,YAAAA,IAAuBR,OAAAA,CAAxB,YAACQ,IACAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,YAAAA,KAAwBR,OAAAA,CAF7B,YAAA;AADJ,KAAA;;AAOA,QAAIS,WAAAA,GAAJ,CAAA;AACA,QAAIC,YAAAA,GAAJ,EAAA;AACA,QAAIC,GAAAA,GAAJ,CAAA;AACA,QAAIC,EAAAA,GAAAA,KAAJ,CAAA;AAAA,QACIX,IAAAA,GAAAA,KADJ,CAAA,CAhBmC,CAmBnC;AACA;AACA;;AACAA,IAAAA,IAAAA,GAAOY,aAAAA,CAAAA,IAAAA,CAAAA,cAAAA,EAAAA,MAAAA,CAAPZ,iBAAOY,CAAPZ;;AAEA,QAAIA,IAAAA,CAAJ,MAAA,EAAiB;AACb,UAAIA,IAAAA,CAAAA,MAAAA,GAAJ,CAAA,EAAqB;AACjB;AACA;AACA;AACA;AACA;AAEA;AACAA,QAAAA,IAAAA,CAAAA,OAAAA,CAAa,UAAA,OAAA,EAAW;AACpBQ,UAAAA,WAAAA,IAAeT,OAAAA,CAAfS,UAAAA;AACAC,UAAAA,YAAAA,CAAAA,IAAAA,CAAAA,WAAAA;AAFJT,SAAAA,EARiB,CAajB;;AACAW,QAAAA,EAAAA,GAAKE,IAAAA,CAAAA,KAAAA,CAAWA,IAAAA,CAAAA,MAAAA,MAAiBL,WAAAA,GAAjCG,CAAgBE,CAAXA,CAALF,CAdiB,CAgBjB;;AACAF,QAAAA,YAAAA,CAAAA,KAAAA,CAAmB,UAAA,KAAA,EAAA,KAAA,EAAkB;AACjCC,UAAAA,GAAAA,GAAAA,KAAAA;;AAEA,cAAIC,EAAAA,GAAJ,KAAA,EAAgB;AACZ,mBAAA,KAAA;AAGJ;;AAAA,iBAAA,IAAA;AAPJF,SAAAA;AAWJ;;AAAA,aAAOT,IAAAA,CAAP,GAAOA,CAAP;AAEP;AAED;;AAAA,WAAA,MAAA,CAAA,QAAA,EAA0B;AACtB,WAAOc,QAAAA,IAAYC,cAAAA,CACfC,yBAAAA,CADJ,QACIA,CADeD,CAAnB;AAOJtB;;AAAAA,EAAAA,QAAAA,GAAW;AACPwB,IAAAA,MAAAA,EADJxB;AAAW,GAAXA;AAIA,SAAA,QAAA;AA/IJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkJAyB,WAAAA,CAAAA,qBAAAA,GAAAA,aAAAA;kBACeC,cAAAA,CAAAA,OAAAA,CAAAA,eAAAA,CAAAA,WAAAA,C","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction DVBSelector(config) {\n\n    config = config || {};\n    let instance;\n\n    const blacklistController = config.blacklistController;\n\n    function getNonBlacklistedBaseUrls(urls) {\n        let removedPriorities = [];\n\n        const samePrioritiesFilter = function (el) {\n            if (removedPriorities.length) {\n                if ((el.dvb_priority) &&\n                        (removedPriorities.indexOf(el.dvb_priority) !== -1)) {\n                    return false;\n                }\n            }\n\n            return true;\n        };\n\n        const serviceLocationFilter = function (baseUrl) {\n            if (blacklistController.contains(baseUrl.serviceLocation)) {\n                // whenever a BaseURL is removed from the available list of\n                // BaseURLs, any other BaseURL with the same @priority\n                // value as the BaseURL being removed shall also be removed\n                if (baseUrl.dvb_priority) {\n                    removedPriorities.push(baseUrl.dvb_priority);\n                }\n\n                // all URLs in the list which have a @serviceLocation\n                // attribute matching an entry in the blacklist shall be\n                // removed from the available list of BaseURLs\n                return false;\n            }\n\n            return true;\n        };\n\n        return urls.filter(serviceLocationFilter).filter(samePrioritiesFilter);\n    }\n\n    function selectByWeight(availableUrls) {\n        const prioritySorter = function (a, b) {\n            let diff = a.dvb_priority - b.dvb_priority;\n            return isNaN(diff) ? 0 : diff;\n        };\n\n        const topPriorityFilter = function (baseUrl, idx, arr) {\n            return !idx || (\n                (arr[0].dvb_priority && baseUrl.dvb_priority) &&\n                (arr[0].dvb_priority === baseUrl.dvb_priority)\n            );\n        };\n\n        let totalWeight = 0;\n        let cumulWeights = [];\n        let idx = 0;\n        let rn,\n            urls;\n\n        // It shall begin by taking the set of resolved BaseURLs present or inherited at the current\n        // position in the MPD, resolved and filtered as described in 10.8.2.1, that have the lowest\n        // @priority attribute value.\n        urls = availableUrls.sort(prioritySorter).filter(topPriorityFilter);\n\n        if (urls.length) {\n            if (urls.length > 1) {\n                // If there is more than one BaseURL with this lowest @priority attribute value then the Player\n                // shall select one of them at random such that the probability of each BaseURL being chosen\n                // is proportional to the value of its @weight attribute. The method described in RFC 2782\n                // [26] or picking from a number of weighted entries is suitable for this, but there may be other\n                // algorithms which achieve the same effect.\n\n                // add all the weights together, storing the accumulated weight per entry\n                urls.forEach(baseUrl => {\n                    totalWeight += baseUrl.dvb_weight;\n                    cumulWeights.push(totalWeight);\n                });\n\n                // pick a random number between zero and totalWeight\n                rn = Math.floor(Math.random() * (totalWeight - 1));\n\n                // select the index for the range rn falls within\n                cumulWeights.every((limit, index) => {\n                    idx = index;\n\n                    if (rn < limit) {\n                        return false;\n                    }\n\n                    return true;\n                });\n            }\n\n            return urls[idx];\n        }\n    }\n\n    function select(baseUrls) {\n        return baseUrls && selectByWeight(\n            getNonBlacklistedBaseUrls(\n                baseUrls\n            )\n        );\n    }\n\n    instance = {\n        select: select\n    };\n\n    return instance;\n}\n\nDVBSelector.__dashjs_factory_name = 'DVBSelector';\nexport default FactoryMaker.getClassFactory(DVBSelector);\n"]},"metadata":{},"sourceType":"script"}