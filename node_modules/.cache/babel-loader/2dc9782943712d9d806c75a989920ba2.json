{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Debug = require('../../core/Debug');\n\nvar _Debug2 = _interopRequireDefault(_Debug);\n\nvar _EventBus = require('../../core/EventBus');\n\nvar _EventBus2 = _interopRequireDefault(_EventBus);\n\nvar _Events = require('../../core/events/Events');\n\nvar _Events2 = _interopRequireDefault(_Events);\n\nvar _imsc = require('imsc');\n\nvar _MediaPlayerEvents = require('../MediaPlayerEvents');\n\nvar _MediaPlayerEvents2 = _interopRequireDefault(_MediaPlayerEvents);\n\nvar _ConformanceViolationConstants = require('../constants/ConformanceViolationConstants');\n\nvar _ConformanceViolationConstants2 = _interopRequireDefault(_ConformanceViolationConstants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction TTMLParser() {\n  var context = this.context;\n  var eventBus = (0, _EventBus2.default)(context).getInstance();\n  /*\n  * This TTML parser follows \"EBU-TT-D SUBTITLING DISTRIBUTION FORMAT - tech3380\" spec - https://tech.ebu.ch/docs/tech/tech3380.pdf.\n  * */\n\n  var instance = void 0,\n      logger = void 0;\n  var cueCounter = 0; // Used to give every cue a unique ID.\n\n  function setup() {\n    logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);\n  }\n\n  function getCueID() {\n    var id = 'cue_TTML_' + cueCounter;\n    cueCounter++;\n    return id;\n  }\n  /**\n  * Parse the raw data and process it to return the HTML element representing the cue.\n  * Return the region to be processed and controlled (hide/show) by the caption controller.\n  * @param {string} data - raw data received from the TextSourceBuffer\n  * @param {number} offsetTime - offset time to apply to cue time\n  * @param {integer} startTimeSegment - startTime for the current segment\n  * @param {integer} endTimeSegment - endTime for the current segment\n  * @param {Array} images - images array referenced by subs MP4 box\n  */\n\n\n  function parse(data, offsetTime, startTimeSegment, endTimeSegment, images) {\n    var errorMsg = '';\n    var captionArray = [];\n    var startTime = void 0,\n        endTime = void 0,\n        i = void 0;\n    var content = {};\n    var embeddedImages = {};\n    var currentImageId = '';\n    var accumulated_image_data = '';\n    var metadataHandler = {\n      onOpenTag: function onOpenTag(ns, name, attrs) {\n        // cope with existing non-compliant content\n        if (attrs[' imagetype'] && !attrs[' imageType']) {\n          eventBus.trigger(_MediaPlayerEvents2.default.CONFORMANCE_VIOLATION, {\n            level: _ConformanceViolationConstants2.default.LEVELS.ERROR,\n            event: _ConformanceViolationConstants2.default.EVENTS.NON_COMPLIANT_SMPTE_IMAGE_ATTRIBUTE\n          });\n          attrs[' imageType'] = attrs[' imagetype'];\n        }\n\n        if (name === 'image' && (ns === 'http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt' || ns === 'http://www.smpte-ra.org/schemas/2052-1/2013/smpte-tt')) {\n          if (!attrs[' imageType'] || attrs[' imageType'].value !== 'PNG') {\n            logger.warn('smpte-tt imageType != PNG. Discarded');\n            return;\n          }\n\n          currentImageId = attrs['http://www.w3.org/XML/1998/namespace id'].value;\n        }\n      },\n      onCloseTag: function onCloseTag() {\n        if (currentImageId) {\n          embeddedImages[currentImageId] = accumulated_image_data.trim();\n        }\n\n        accumulated_image_data = '';\n        currentImageId = '';\n      },\n      onText: function onText(contents) {\n        if (currentImageId) {\n          accumulated_image_data = accumulated_image_data + contents;\n        }\n      }\n    };\n\n    if (!data) {\n      errorMsg = 'no ttml data to parse';\n      throw new Error(errorMsg);\n    }\n\n    content.data = data;\n    eventBus.trigger(_Events2.default.TTML_TO_PARSE, content);\n    var imsc1doc = (0, _imsc.fromXML)(content.data, function (msg) {\n      errorMsg = msg;\n    }, metadataHandler);\n    eventBus.trigger(_Events2.default.TTML_PARSED, {\n      ttmlString: content.data,\n      ttmlDoc: imsc1doc\n    });\n    var mediaTimeEvents = imsc1doc.getMediaTimeEvents();\n\n    for (i = 0; i < mediaTimeEvents.length; i++) {\n      var isd = (0, _imsc.generateISD)(imsc1doc, mediaTimeEvents[i], function (error) {\n        errorMsg = error;\n      });\n\n      if (isd.contents.some(function (topLevelContents) {\n        return topLevelContents.contents.length;\n      })) {\n        //be sure that mediaTimeEvents values are in the mp4 segment time ranges.\n        startTime = mediaTimeEvents[i] + offsetTime < startTimeSegment ? startTimeSegment : mediaTimeEvents[i] + offsetTime;\n        endTime = mediaTimeEvents[i + 1] + offsetTime > endTimeSegment ? endTimeSegment : mediaTimeEvents[i + 1] + offsetTime;\n\n        if (startTime < endTime) {\n          captionArray.push({\n            start: startTime,\n            end: endTime,\n            type: 'html',\n            cueID: getCueID(),\n            isd: isd,\n            images: images,\n            embeddedImages: embeddedImages\n          });\n        }\n      }\n    }\n\n    if (errorMsg !== '') {\n      logger.error(errorMsg);\n      throw new Error(errorMsg);\n    }\n\n    return captionArray;\n  }\n\n  instance = {\n    parse: parse\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nTTMLParser.__dashjs_factory_name = 'TTMLParser';\nexports.default = _FactoryMaker2.default.getSingletonFactory(TTMLParser);","map":{"version":3,"sources":["../../../../../src/streaming/utils/TTMLParser.js"],"names":["context","eventBus","instance","logger","cueCounter","id","errorMsg","captionArray","startTime","endTime","i","content","embeddedImages","currentImageId","accumulated_image_data","metadataHandler","onOpenTag","attrs","MediaPlayerEvents","level","ConformanceViolationConstants","event","name","ns","onCloseTag","onText","Events","imsc1doc","ttmlString","ttmlDoc","mediaTimeEvents","isd","topLevelContents","start","end","type","cueID","getCueID","images","parse","setup","TTMLParser","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport {fromXML, generateISD} from 'imsc';\nimport MediaPlayerEvents from '../MediaPlayerEvents';\nimport ConformanceViolationConstants from '../constants/ConformanceViolationConstants';\n\nfunction TTMLParser() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    /*\n     * This TTML parser follows \"EBU-TT-D SUBTITLING DISTRIBUTION FORMAT - tech3380\" spec - https://tech.ebu.ch/docs/tech/tech3380.pdf.\n     * */\n    let instance,\n        logger;\n\n    let cueCounter = 0; // Used to give every cue a unique ID.\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n    }\n\n    function getCueID() {\n        const id = 'cue_TTML_' + cueCounter;\n        cueCounter++;\n        return id;\n    }\n\n    /**\n     * Parse the raw data and process it to return the HTML element representing the cue.\n     * Return the region to be processed and controlled (hide/show) by the caption controller.\n     * @param {string} data - raw data received from the TextSourceBuffer\n     * @param {number} offsetTime - offset time to apply to cue time\n     * @param {integer} startTimeSegment - startTime for the current segment\n     * @param {integer} endTimeSegment - endTime for the current segment\n     * @param {Array} images - images array referenced by subs MP4 box\n     */\n    function parse(data, offsetTime, startTimeSegment, endTimeSegment, images) {\n        let errorMsg = '';\n        const captionArray = [];\n        let startTime,\n            endTime,\n            i;\n\n        const content = {};\n\n        const embeddedImages = {};\n        let currentImageId = '';\n        let accumulated_image_data = '';\n        let metadataHandler = {\n\n            onOpenTag: function (ns, name, attrs) {\n                // cope with existing non-compliant content\n                if (attrs[' imagetype'] && !attrs[' imageType']) {\n                    eventBus.trigger(MediaPlayerEvents.CONFORMANCE_VIOLATION, {\n                        level: ConformanceViolationConstants.LEVELS.ERROR,\n                        event: ConformanceViolationConstants.EVENTS.NON_COMPLIANT_SMPTE_IMAGE_ATTRIBUTE\n                    });\n                    attrs[' imageType'] = attrs[' imagetype'];\n                }\n\n                if (name === 'image' &&\n                    (ns === 'http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt' ||\n                        ns === 'http://www.smpte-ra.org/schemas/2052-1/2013/smpte-tt')) {\n                    if (!attrs[' imageType'] || attrs[' imageType'].value !== 'PNG') {\n                        logger.warn('smpte-tt imageType != PNG. Discarded');\n                        return;\n                    }\n                    currentImageId = attrs['http://www.w3.org/XML/1998/namespace id'].value;\n                }\n            },\n\n            onCloseTag: function () {\n                if (currentImageId) {\n                    embeddedImages[currentImageId] = accumulated_image_data.trim();\n                }\n                accumulated_image_data = '';\n                currentImageId = '';\n            },\n\n            onText: function (contents) {\n                if (currentImageId) {\n                    accumulated_image_data = accumulated_image_data + contents;\n                }\n            }\n        };\n\n        if (!data) {\n            errorMsg = 'no ttml data to parse';\n            throw new Error(errorMsg);\n        }\n\n        content.data = data;\n\n        eventBus.trigger(Events.TTML_TO_PARSE, content);\n\n        const imsc1doc = fromXML(content.data, function (msg) {\n            errorMsg = msg;\n        }, metadataHandler);\n\n        eventBus.trigger(Events.TTML_PARSED, { ttmlString: content.data, ttmlDoc: imsc1doc });\n\n        const mediaTimeEvents = imsc1doc.getMediaTimeEvents();\n\n        for (i = 0; i < mediaTimeEvents.length; i++) {\n            let isd = generateISD(imsc1doc, mediaTimeEvents[i], function (error) {\n                errorMsg = error;\n            });\n\n            if (isd.contents.some(topLevelContents => topLevelContents.contents.length)) {\n                //be sure that mediaTimeEvents values are in the mp4 segment time ranges.\n                startTime = (mediaTimeEvents[i] + offsetTime) < startTimeSegment ? startTimeSegment : (mediaTimeEvents[i] + offsetTime);\n                endTime = (mediaTimeEvents[i + 1] + offsetTime) > endTimeSegment ? endTimeSegment : (mediaTimeEvents[i + 1] + offsetTime);\n\n                if (startTime < endTime) {\n                    captionArray.push({\n                        start: startTime,\n                        end: endTime,\n                        type: 'html',\n                        cueID: getCueID(),\n                        isd: isd,\n                        images: images,\n                        embeddedImages: embeddedImages\n                    });\n                }\n            }\n        }\n\n        if (errorMsg !== '') {\n            logger.error(errorMsg);\n            throw new Error(errorMsg);\n        }\n\n        return captionArray;\n    }\n\n    instance = {\n        parse: parse\n    };\n\n    setup();\n    return instance;\n}\n\nTTMLParser.__dashjs_factory_name = 'TTMLParser';\nexport default FactoryMaker.getSingletonFactory(TTMLParser);\n"]},"metadata":{},"sourceType":"script"}