{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Constants = require('../constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _BufferController = require('./../controllers/BufferController');\n\nvar _BufferController2 = _interopRequireDefault(_BufferController);\n\nvar _NotFragmentedTextBufferController = require('./NotFragmentedTextBufferController');\n\nvar _NotFragmentedTextBufferController2 = _interopRequireDefault(_NotFragmentedTextBufferController);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nfunction TextBufferController(config) {\n  config = config || {};\n  var context = this.context;\n\n  var _BufferControllerImpl = void 0,\n      instance = void 0;\n\n  function setup() {\n    // according to text type, we create corresponding buffer controller\n    if (config.type === _Constants2.default.FRAGMENTED_TEXT) {\n      // in this case, internal buffer ocntroller is a classical BufferController object\n      _BufferControllerImpl = (0, _BufferController2.default)(context).create({\n        streamInfo: config.streamInfo,\n        type: config.type,\n        mediaPlayerModel: config.mediaPlayerModel,\n        manifestModel: config.manifestModel,\n        fragmentModel: config.fragmentModel,\n        errHandler: config.errHandler,\n        mediaController: config.mediaController,\n        representationController: config.representationController,\n        adapter: config.adapter,\n        textController: config.textController,\n        abrController: config.abrController,\n        playbackController: config.playbackController,\n        settings: config.settings\n      });\n    } else {\n      // in this case, internal buffer controller is a not fragmented text controller object\n      _BufferControllerImpl = (0, _NotFragmentedTextBufferController2.default)(context).create({\n        streamInfo: config.streamInfo,\n        type: config.type,\n        mimeType: config.mimeType,\n        fragmentModel: config.fragmentModel,\n        errHandler: config.errHandler\n      });\n    }\n  }\n\n  function getBufferControllerType() {\n    return _BufferControllerImpl.getBufferControllerType();\n  }\n\n  function initialize(source, StreamProcessor) {\n    return _BufferControllerImpl.initialize(source, StreamProcessor);\n  }\n\n  function createBuffer(mediaInfoArr, previousBuffers) {\n    return _BufferControllerImpl.createBuffer(mediaInfoArr, previousBuffers);\n  }\n\n  function getType() {\n    return _BufferControllerImpl.getType();\n  }\n\n  function getBuffer() {\n    return _BufferControllerImpl.getBuffer();\n  }\n\n  function setBuffer(value) {\n    _BufferControllerImpl.setBuffer(value);\n  }\n\n  function getMediaSource() {\n    return _BufferControllerImpl.getMediaSource();\n  }\n\n  function setMediaSource(value) {\n    _BufferControllerImpl.setMediaSource(value);\n  }\n\n  function getBufferLevel() {\n    return _BufferControllerImpl.getBufferLevel();\n  }\n\n  function reset(errored) {\n    _BufferControllerImpl.reset(errored);\n  }\n\n  function getIsBufferingCompleted() {\n    return _BufferControllerImpl.getIsBufferingCompleted();\n  }\n\n  function appendInitSegment(representationId) {\n    _BufferControllerImpl.appendInitSegment(representationId);\n  }\n\n  function getIsPruningInProgress() {\n    return _BufferControllerImpl.getIsPruningInProgress();\n  }\n\n  function dischargePreBuffer() {\n    return _BufferControllerImpl.dischargePreBuffer();\n  }\n\n  function getRangeAt(time) {\n    return _BufferControllerImpl.getRangeAt(time);\n  }\n\n  function updateTimestampOffset(MSETimeOffset) {\n    var buffer = getBuffer();\n\n    if (buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset)) {\n      buffer.timestampOffset = MSETimeOffset;\n    }\n  }\n\n  function updateAppendWindow() {\n    _BufferControllerImpl.updateAppendWindow();\n  }\n\n  function getRepresentationInfo(quality) {\n    return _BufferControllerImpl.getRepresentationInfo(quality);\n  }\n\n  instance = {\n    getBufferControllerType: getBufferControllerType,\n    initialize: initialize,\n    createBuffer: createBuffer,\n    getType: getType,\n    getBuffer: getBuffer,\n    setBuffer: setBuffer,\n    getBufferLevel: getBufferLevel,\n    setMediaSource: setMediaSource,\n    getMediaSource: getMediaSource,\n    getIsBufferingCompleted: getIsBufferingCompleted,\n    getIsPruningInProgress: getIsPruningInProgress,\n    dischargePreBuffer: dischargePreBuffer,\n    appendInitSegment: appendInitSegment,\n    getRangeAt: getRangeAt,\n    reset: reset,\n    updateTimestampOffset: updateTimestampOffset,\n    updateAppendWindow: updateAppendWindow,\n    getRepresentationInfo: getRepresentationInfo\n  };\n  setup();\n  return instance;\n}\n\nTextBufferController.__dashjs_factory_name = 'TextBufferController';\nexports.default = _FactoryMaker2.default.getClassFactory(TextBufferController);","map":{"version":3,"sources":["../../../../../src/streaming/text/TextBufferController.js"],"names":["config","context","_BufferControllerImpl","instance","Constants","streamInfo","type","mediaPlayerModel","manifestModel","fragmentModel","errHandler","mediaController","representationController","adapter","textController","abrController","playbackController","settings","mimeType","buffer","getBuffer","isNaN","getBufferControllerType","initialize","createBuffer","getType","setBuffer","getBufferLevel","setMediaSource","getMediaSource","getIsBufferingCompleted","getIsPruningInProgress","dischargePreBuffer","appendInitSegment","getRangeAt","reset","updateTimestampOffset","updateAppendWindow","getRepresentationInfo","setup","TextBufferController","FactoryMaker"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport BufferController from './../controllers/BufferController';\nimport NotFragmentedTextBufferController from './NotFragmentedTextBufferController';\n\nfunction TextBufferController(config) {\n\n    config = config || {};\n    let context = this.context;\n\n    let _BufferControllerImpl,\n        instance;\n\n    function setup() {\n\n        // according to text type, we create corresponding buffer controller\n        if (config.type === Constants.FRAGMENTED_TEXT) {\n\n            // in this case, internal buffer ocntroller is a classical BufferController object\n            _BufferControllerImpl = BufferController(context).create({\n                streamInfo: config.streamInfo,\n                type: config.type,\n                mediaPlayerModel: config.mediaPlayerModel,\n                manifestModel: config.manifestModel,\n                fragmentModel: config.fragmentModel,\n                errHandler: config.errHandler,\n                mediaController: config.mediaController,\n                representationController: config.representationController,\n                adapter: config.adapter,\n                textController: config.textController,\n                abrController: config.abrController,\n                playbackController: config.playbackController,\n                settings: config.settings\n            });\n        } else {\n\n            // in this case, internal buffer controller is a not fragmented text controller object\n            _BufferControllerImpl = NotFragmentedTextBufferController(context).create({\n                streamInfo: config.streamInfo,\n                type: config.type,\n                mimeType: config.mimeType,\n                fragmentModel: config.fragmentModel,\n                errHandler: config.errHandler\n            });\n        }\n    }\n\n    function getBufferControllerType() {\n        return _BufferControllerImpl.getBufferControllerType();\n    }\n\n    function initialize(source, StreamProcessor) {\n        return _BufferControllerImpl.initialize(source, StreamProcessor);\n    }\n\n    function createBuffer(mediaInfoArr, previousBuffers) {\n        return _BufferControllerImpl.createBuffer(mediaInfoArr, previousBuffers);\n    }\n\n    function getType() {\n        return _BufferControllerImpl.getType();\n    }\n\n    function getBuffer() {\n        return _BufferControllerImpl.getBuffer();\n    }\n\n    function setBuffer(value) {\n        _BufferControllerImpl.setBuffer(value);\n    }\n\n    function getMediaSource() {\n        return _BufferControllerImpl.getMediaSource();\n    }\n\n    function setMediaSource(value) {\n        _BufferControllerImpl.setMediaSource(value);\n    }\n\n    function getBufferLevel() {\n        return _BufferControllerImpl.getBufferLevel();\n    }\n\n    function reset(errored) {\n        _BufferControllerImpl.reset(errored);\n    }\n\n    function getIsBufferingCompleted() {\n        return _BufferControllerImpl.getIsBufferingCompleted();\n    }\n\n    function appendInitSegment(representationId) {\n        _BufferControllerImpl.appendInitSegment(representationId);\n    }\n\n    function getIsPruningInProgress() {\n        return _BufferControllerImpl.getIsPruningInProgress();\n    }\n\n    function dischargePreBuffer() {\n        return _BufferControllerImpl.dischargePreBuffer();\n    }\n\n    function getRangeAt(time) {\n        return _BufferControllerImpl.getRangeAt(time);\n    }\n\n    function updateTimestampOffset(MSETimeOffset) {\n        const buffer = getBuffer();\n        if (buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset)) {\n            buffer.timestampOffset = MSETimeOffset;\n        }\n    }\n\n    function updateAppendWindow() {\n        _BufferControllerImpl.updateAppendWindow();\n    }\n\n    function getRepresentationInfo(quality) {\n        return _BufferControllerImpl.getRepresentationInfo(quality);\n    }\n\n    instance = {\n        getBufferControllerType: getBufferControllerType,\n        initialize: initialize,\n        createBuffer: createBuffer,\n        getType: getType,\n        getBuffer: getBuffer,\n        setBuffer: setBuffer,\n        getBufferLevel: getBufferLevel,\n        setMediaSource: setMediaSource,\n        getMediaSource: getMediaSource,\n        getIsBufferingCompleted: getIsBufferingCompleted,\n        getIsPruningInProgress: getIsPruningInProgress,\n        dischargePreBuffer: dischargePreBuffer,\n        appendInitSegment: appendInitSegment,\n        getRangeAt: getRangeAt,\n        reset: reset,\n        updateTimestampOffset: updateTimestampOffset,\n        updateAppendWindow,\n        getRepresentationInfo\n    };\n\n    setup();\n\n    return instance;\n}\n\nTextBufferController.__dashjs_factory_name = 'TextBufferController';\nexport default FactoryMaker.getClassFactory(TextBufferController);\n"]},"metadata":{},"sourceType":"script"}