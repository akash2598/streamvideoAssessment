{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _KeyPair = require('../vo/KeyPair');\n\nvar _KeyPair2 = _interopRequireDefault(_KeyPair);\n\nvar _ClearKeyKeySet = require('../vo/ClearKeyKeySet');\n\nvar _ClearKeyKeySet2 = _interopRequireDefault(_ClearKeyKeySet);\n\nvar _CommonEncryption = require('../CommonEncryption');\n\nvar _CommonEncryption2 = _interopRequireDefault(_CommonEncryption);\n\nvar _ProtectionConstants = require('../../constants/ProtectionConstants');\n\nvar _ProtectionConstants2 = _interopRequireDefault(_ProtectionConstants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nvar uuid = 'e2719d58-a985-b3c9-781a-b030af78d30e';\nvar systemString = _ProtectionConstants2.default.CLEARKEY_KEYSTEM_STRING;\nvar schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemClearKey(config) {\n  config = config || {};\n  var instance = void 0;\n  var BASE64 = config.BASE64;\n  var LICENSE_SERVER_MANIFEST_CONFIGURATIONS = {\n    attributes: ['Laurl', 'laurl'],\n    prefixes: ['clearkey', 'dashif']\n  };\n  /**\n  * Returns desired clearkeys (as specified in the CDM message) from protection data\n  *\n  * @param {ProtectionData} protectionData the protection data\n  * @param {ArrayBuffer} message the ClearKey CDM message\n  * @returns {ClearKeyKeySet} the key set or null if none found\n  * @throws {Error} if a keyID specified in the CDM message was not found in the\n  * protection data\n  * @memberof KeySystemClearKey\n  */\n\n  function getClearKeysFromProtectionData(protectionData, message) {\n    var clearkeySet = null;\n\n    if (protectionData) {\n      // ClearKey is the only system that does not require a license server URL, so we\n      // handle it here when keys are specified in protection data\n      var jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n      var keyPairs = [];\n\n      for (var i = 0; i < jsonMsg.kids.length; i++) {\n        var clearkeyID = jsonMsg.kids[i];\n        var clearkey = protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID) ? protectionData.clearkeys[clearkeyID] : null;\n\n        if (!clearkey) {\n          throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n        } // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n\n\n        keyPairs.push(new _KeyPair2.default(clearkeyID, clearkey));\n      }\n\n      clearkeySet = new _ClearKeyKeySet2.default(keyPairs);\n    }\n\n    return clearkeySet;\n  }\n\n  function getInitData(cp, cencContentProtection) {\n    try {\n      var initData = _CommonEncryption2.default.parseInitDataFromContentProtection(cp, BASE64);\n\n      if (!initData && cencContentProtection) {\n        var cencDefaultKid = cencDefaultKidToBase64Representation(cencContentProtection['cenc:default_KID']);\n        var data = {\n          kids: [cencDefaultKid]\n        };\n        initData = new TextEncoder().encode(JSON.stringify(data));\n      }\n\n      return initData;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function cencDefaultKidToBase64Representation(cencDefaultKid) {\n    try {\n      var kid = cencDefaultKid.replace(/-/g, '');\n      kid = btoa(kid.match(/\\w{2}/g).map(function (a) {\n        return String.fromCharCode(parseInt(a, 16));\n      }).join(''));\n      return kid.replace(/=/g, '');\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function getRequestHeadersFromMessage()\n  /*message*/\n  {\n    // Set content type to application/json by default\n    return {\n      'Content-Type': 'application/json'\n    };\n  }\n\n  function getLicenseRequestFromMessage(message) {\n    return JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n  }\n\n  function getLicenseServerURLFromInitData()\n  /*initData*/\n  {\n    return null;\n  }\n\n  function getLicenseServerUrlFromMediaInfo(mediaInfo) {\n    try {\n      if (!mediaInfo || mediaInfo.length === 0) {\n        return null;\n      }\n\n      var i = 0;\n      var licenseServer = null;\n\n      while (i < mediaInfo.length && !licenseServer) {\n        var info = mediaInfo[i];\n\n        if (info && info.contentProtection && info.contentProtection.length > 0) {\n          var clearkeyProtData = info.contentProtection.filter(function (cp) {\n            return cp.schemeIdUri && cp.schemeIdUri === schemeIdURI;\n          });\n\n          if (clearkeyProtData && clearkeyProtData.length > 0) {\n            var j = 0;\n\n            while (j < clearkeyProtData.length && !licenseServer) {\n              var ckData = clearkeyProtData[j];\n              var k = 0;\n\n              while (k < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes.length && !licenseServer) {\n                var l = 0;\n                var attribute = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes[k];\n\n                while (l < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes.length && !licenseServer) {\n                  var prefix = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes[l];\n\n                  if (ckData[attribute] && ckData[attribute].__prefix && ckData[attribute].__prefix === prefix && ckData[attribute].__text) {\n                    licenseServer = ckData[attribute].__text;\n                  }\n\n                  l += 1;\n                }\n\n                k += 1;\n              }\n\n              j += 1;\n            }\n          }\n        }\n\n        i += 1;\n      }\n\n      return licenseServer;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function getCDMData() {\n    return null;\n  }\n\n  function getSessionId()\n  /*cp*/\n  {\n    return null;\n  }\n\n  instance = {\n    uuid: uuid,\n    schemeIdURI: schemeIdURI,\n    systemString: systemString,\n    getInitData: getInitData,\n    getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n    getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n    getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n    getCDMData: getCDMData,\n    getSessionId: getSessionId,\n    getLicenseServerUrlFromMediaInfo: getLicenseServerUrlFromMediaInfo,\n    getClearKeysFromProtectionData: getClearKeysFromProtectionData\n  };\n  return instance;\n}\n\nKeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';\nexports.default = dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey);\n/* jshint ignore:line */","map":{"version":3,"sources":["../../../../../../src/streaming/protection/drm/KeySystemClearKey.js"],"names":["uuid","systemString","ProtectionConstants","schemeIdURI","config","instance","BASE64","LICENSE_SERVER_MANIFEST_CONFIGURATIONS","attributes","prefixes","clearkeySet","jsonMsg","JSON","String","keyPairs","i","clearkeyID","clearkey","protectionData","KeyPair","ClearKeyKeySet","initData","CommonEncryption","cencDefaultKid","cencDefaultKidToBase64Representation","cencContentProtection","data","kids","kid","btoa","parseInt","mediaInfo","licenseServer","info","clearkeyProtData","cp","j","ckData","k","l","attribute","prefix","getInitData","getRequestHeadersFromMessage","getLicenseRequestFromMessage","getLicenseServerURLFromInitData","getCDMData","getSessionId","getLicenseServerUrlFromMediaInfo","getClearKeysFromProtectionData","KeySystemClearKey","dashjs"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = 'e2719d58-a985-b3c9-781a-b030af78d30e';\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemClearKey(config) {\n\n    config = config || {};\n    let instance;\n    const BASE64 = config.BASE64;\n    const LICENSE_SERVER_MANIFEST_CONFIGURATIONS = {\n        attributes: ['Laurl', 'laurl'],\n        prefixes: ['clearkey', 'dashif']\n    };\n\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionData} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            const keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                const clearkeyID = jsonMsg.kids[i];\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp, cencContentProtection) {\n        try {\n            let initData = CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n\n            if (!initData && cencContentProtection) {\n                const cencDefaultKid = cencDefaultKidToBase64Representation(cencContentProtection['cenc:default_KID']);\n                const data = {kids: [cencDefaultKid]};\n                initData = new TextEncoder().encode(JSON.stringify(data));\n            }\n\n            return initData;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function cencDefaultKidToBase64Representation(cencDefaultKid) {\n        try {\n            let kid = cencDefaultKid.replace(/-/g, '');\n            kid = btoa(kid.match(/\\w{2}/g).map((a) => {\n                return String.fromCharCode(parseInt(a, 16));\n            }).join(''));\n            return kid.replace(/=/g, '');\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        // Set content type to application/json by default\n        return {\n            'Content-Type': 'application/json'\n        };\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    function getLicenseServerUrlFromMediaInfo(mediaInfo) {\n        try {\n            if (!mediaInfo || mediaInfo.length === 0) {\n                return null;\n            }\n            let i = 0;\n            let licenseServer = null;\n            while (i < mediaInfo.length && !licenseServer) {\n                const info = mediaInfo[i];\n                if (info && info.contentProtection && info.contentProtection.length > 0) {\n                    const clearkeyProtData = info.contentProtection.filter((cp) => {\n                        return cp.schemeIdUri && cp.schemeIdUri === schemeIdURI;\n                    });\n                    if (clearkeyProtData && clearkeyProtData.length > 0) {\n                        let j = 0;\n                        while (j < clearkeyProtData.length && !licenseServer) {\n                            const ckData = clearkeyProtData[j];\n                            let k = 0;\n                            while (k < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes.length && !licenseServer) {\n                                let l = 0;\n                                const attribute = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes[k];\n                                while (l < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes.length && !licenseServer) {\n                                    const prefix = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes[l];\n                                    if (ckData[attribute] && ckData[attribute].__prefix && ckData[attribute].__prefix === prefix && ckData[attribute].__text) {\n                                        licenseServer = ckData[attribute].__text;\n                                    }\n                                    l += 1;\n                                }\n                                k += 1;\n                            }\n                            j += 1;\n                        }\n                    }\n                }\n                i += 1;\n            }\n            return licenseServer;\n        } catch\n            (e) {\n            return null;\n        }\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        getLicenseServerUrlFromMediaInfo,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}