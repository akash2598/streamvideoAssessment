{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _DVBErrors = require('../vo/DVBErrors');\n\nvar _DVBErrors2 = _interopRequireDefault(_DVBErrors);\n\nvar _MetricsReportingEvents = require('../MetricsReportingEvents');\n\nvar _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nfunction DVBErrorsTranslator(config) {\n  config = config || {};\n  var instance = void 0,\n      mpd = void 0;\n  var eventBus = config.eventBus;\n  var dashMetrics = config.dashMetrics;\n  var metricsConstants = config.metricsConstants; //MediaPlayerEvents have been added to Events in MediaPlayer class\n\n  var Events = config.events;\n\n  function report(vo) {\n    var o = new _DVBErrors2.default();\n\n    if (!mpd) {\n      return;\n    }\n\n    for (var key in vo) {\n      if (vo.hasOwnProperty(key)) {\n        o[key] = vo[key];\n      }\n    }\n\n    if (!o.mpdurl) {\n      o.mpdurl = mpd.originalUrl || mpd.url;\n    }\n\n    if (!o.terror) {\n      o.terror = new Date();\n    }\n\n    dashMetrics.addDVBErrors(o);\n  }\n\n  function onManifestUpdate(e) {\n    if (e.error) {\n      return;\n    }\n\n    mpd = e.manifest;\n  }\n\n  function onServiceLocationChanged(e) {\n    report({\n      errorcode: _DVBErrors2.default.BASE_URL_CHANGED,\n      servicelocation: e.entry\n    });\n  }\n\n  function onBecameReporter() {\n    report({\n      errorcode: _DVBErrors2.default.BECAME_REPORTER\n    });\n  }\n\n  function handleHttpMetric(vo) {\n    if (vo.responsecode === 0 || // connection failure - unknown\n    vo.responsecode >= 400 || // HTTP error status code\n    vo.responsecode < 100 || // unknown status codes\n    vo.responsecode >= 600) {\n      // unknown status codes\n      report({\n        errorcode: vo.responsecode || _DVBErrors2.default.CONNECTION_ERROR,\n        url: vo.url,\n        terror: vo.tresponse,\n        servicelocation: vo._serviceLocation\n      });\n    }\n  }\n\n  function onMetricEvent(e) {\n    switch (e.metric) {\n      case metricsConstants.HTTP_REQUEST:\n        handleHttpMetric(e.value);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  function onPlaybackError(e) {\n    var reason = e.error ? e.error.code : 0;\n    var errorcode = void 0;\n\n    switch (reason) {\n      case MediaError.MEDIA_ERR_NETWORK:\n        errorcode = _DVBErrors2.default.CONNECTION_ERROR;\n        break;\n\n      case MediaError.MEDIA_ERR_DECODE:\n        errorcode = _DVBErrors2.default.CORRUPT_MEDIA_OTHER;\n        break;\n\n      default:\n        return;\n    }\n\n    report({\n      errorcode: errorcode\n    });\n  }\n\n  function initialise() {\n    eventBus.on(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\n    eventBus.on(Events.SERVICE_LOCATION_BLACKLIST_CHANGED, onServiceLocationChanged, instance);\n    eventBus.on(Events.METRIC_ADDED, onMetricEvent, instance);\n    eventBus.on(Events.METRIC_UPDATED, onMetricEvent, instance);\n    eventBus.on(Events.PLAYBACK_ERROR, onPlaybackError, instance);\n    eventBus.on(_MetricsReportingEvents2.default.BECAME_REPORTING_PLAYER, onBecameReporter, instance);\n  }\n\n  function reset() {\n    eventBus.off(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\n    eventBus.off(Events.SERVICE_LOCATION_BLACKLIST_CHANGED, onServiceLocationChanged, instance);\n    eventBus.off(Events.METRIC_ADDED, onMetricEvent, instance);\n    eventBus.off(Events.METRIC_UPDATED, onMetricEvent, instance);\n    eventBus.off(Events.PLAYBACK_ERROR, onPlaybackError, instance);\n    eventBus.off(_MetricsReportingEvents2.default.BECAME_REPORTING_PLAYER, onBecameReporter, instance);\n  }\n\n  instance = {\n    initialise: initialise,\n    reset: reset\n  };\n  initialise();\n  return instance;\n}\n\nDVBErrorsTranslator.__dashjs_factory_name = 'DVBErrorsTranslator';\nexports.default = dashjs.FactoryMaker.getSingletonFactory(DVBErrorsTranslator);\n/* jshint ignore:line */","map":{"version":3,"sources":["../../../../../../src/streaming/metrics/utils/DVBErrorsTranslator.js"],"names":["config","instance","mpd","eventBus","dashMetrics","metricsConstants","Events","o","DVBErrors","vo","e","report","errorcode","servicelocation","url","terror","handleHttpMetric","reason","MediaError","MetricsReportingEvents","initialise","reset","DVBErrorsTranslator","dashjs"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DVBErrors from '../vo/DVBErrors';\nimport MetricsReportingEvents from '../MetricsReportingEvents';\n\nfunction DVBErrorsTranslator(config) {\n\n    config = config || {};\n    let instance,\n        mpd;\n    const eventBus = config.eventBus;\n    const dashMetrics = config.dashMetrics;\n    const metricsConstants = config.metricsConstants;\n    //MediaPlayerEvents have been added to Events in MediaPlayer class\n    const Events = config.events;\n\n    function report(vo) {\n        let o = new DVBErrors();\n\n        if (!mpd) {\n            return;\n        }\n\n        for (const key in vo) {\n            if (vo.hasOwnProperty(key)) {\n                o[key] = vo[key];\n            }\n        }\n\n        if (!o.mpdurl) {\n            o.mpdurl = mpd.originalUrl || mpd.url;\n        }\n\n        if (!o.terror) {\n            o.terror = new Date();\n        }\n\n        dashMetrics.addDVBErrors(o);\n    }\n\n    function onManifestUpdate(e) {\n        if (e.error) {\n            return;\n        }\n\n        mpd = e.manifest;\n    }\n\n    function onServiceLocationChanged(e) {\n        report({\n            errorcode:          DVBErrors.BASE_URL_CHANGED,\n            servicelocation:    e.entry\n        });\n    }\n\n    function onBecameReporter() {\n        report({\n            errorcode: DVBErrors.BECAME_REPORTER\n        });\n    }\n\n    function handleHttpMetric(vo) {\n        if ((vo.responsecode === 0) ||      // connection failure - unknown\n                (vo.responsecode >= 400) || // HTTP error status code\n                (vo.responsecode < 100) ||  // unknown status codes\n                (vo.responsecode >= 600)) { // unknown status codes\n            report({\n                errorcode:          vo.responsecode || DVBErrors.CONNECTION_ERROR,\n                url:                vo.url,\n                terror:             vo.tresponse,\n                servicelocation:    vo._serviceLocation\n            });\n        }\n    }\n\n    function onMetricEvent(e) {\n        switch (e.metric) {\n        case metricsConstants.HTTP_REQUEST:\n            handleHttpMetric(e.value);\n            break;\n        default:\n            break;\n        }\n    }\n\n    function onPlaybackError(e) {\n        let reason = e.error ? e.error.code : 0;\n        let errorcode;\n\n        switch (reason) {\n            case MediaError.MEDIA_ERR_NETWORK:\n                errorcode = DVBErrors.CONNECTION_ERROR;\n                break;\n            case MediaError.MEDIA_ERR_DECODE:\n                errorcode = DVBErrors.CORRUPT_MEDIA_OTHER;\n                break;\n            default:\n                return;\n        }\n\n        report({\n            errorcode: errorcode\n        });\n    }\n\n    function initialise() {\n        eventBus.on(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\n        eventBus.on(\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            onServiceLocationChanged,\n            instance\n        );\n        eventBus.on(Events.METRIC_ADDED, onMetricEvent, instance);\n        eventBus.on(Events.METRIC_UPDATED, onMetricEvent, instance);\n        eventBus.on(Events.PLAYBACK_ERROR, onPlaybackError, instance);\n        eventBus.on(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\n            onBecameReporter,\n            instance\n        );\n    }\n\n    function reset() {\n        eventBus.off(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\n        eventBus.off(\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            onServiceLocationChanged,\n            instance\n        );\n        eventBus.off(Events.METRIC_ADDED, onMetricEvent, instance);\n        eventBus.off(Events.METRIC_UPDATED, onMetricEvent, instance);\n        eventBus.off(Events.PLAYBACK_ERROR, onPlaybackError, instance);\n        eventBus.off(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\n            onBecameReporter,\n            instance\n        );\n    }\n\n    instance = {\n        initialise: initialise,\n        reset:      reset\n    };\n\n    initialise();\n\n    return instance;\n}\n\nDVBErrorsTranslator.__dashjs_factory_name = 'DVBErrorsTranslator';\nexport default dashjs.FactoryMaker.getSingletonFactory(DVBErrorsTranslator); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}