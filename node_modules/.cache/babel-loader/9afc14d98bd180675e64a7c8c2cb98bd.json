{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _HandlerHelpers = require('../../utils/HandlerHelpers');\n\nvar _HandlerHelpers2 = _interopRequireDefault(_HandlerHelpers);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction BufferLevelHandler(config) {\n  config = config || {};\n  var instance = void 0,\n      reportingController = void 0,\n      n = void 0,\n      name = void 0,\n      interval = void 0,\n      lastReportedTime = void 0;\n  var context = this.context;\n  var handlerHelpers = (0, _HandlerHelpers2.default)(context).getInstance();\n  var storedVOs = [];\n  var metricsConstants = config.metricsConstants;\n\n  function getLowestBufferLevelVO() {\n    try {\n      return Object.keys(storedVOs).map(function (key) {\n        return storedVOs[key];\n      }).reduce(function (a, b) {\n        return a.level < b.level ? a : b;\n      });\n    } catch (e) {\n      return;\n    }\n  }\n\n  function intervalCallback() {\n    var vo = getLowestBufferLevelVO();\n\n    if (vo) {\n      if (lastReportedTime !== vo.t) {\n        lastReportedTime = vo.t;\n        reportingController.report(name, vo);\n      }\n    }\n  }\n\n  function initialize(basename, rc, n_ms) {\n    if (rc) {\n      // this will throw if n is invalid, to be\n      // caught by the initialize caller.\n      n = handlerHelpers.validateN(n_ms);\n      reportingController = rc;\n      name = handlerHelpers.reconstructFullMetricName(basename, n_ms);\n      interval = setInterval(intervalCallback, n);\n    }\n  }\n\n  function reset() {\n    clearInterval(interval);\n    interval = null;\n    n = 0;\n    reportingController = null;\n    lastReportedTime = null;\n  }\n\n  function handleNewMetric(metric, vo, type) {\n    if (metric === metricsConstants.BUFFER_LEVEL) {\n      storedVOs[type] = vo;\n    }\n  }\n\n  instance = {\n    initialize: initialize,\n    reset: reset,\n    handleNewMetric: handleNewMetric\n  };\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nBufferLevelHandler.__dashjs_factory_name = 'BufferLevelHandler';\nexports.default = dashjs.FactoryMaker.getClassFactory(BufferLevelHandler);\n/* jshint ignore:line */","map":{"version":3,"sources":["../../../../../../../src/streaming/metrics/metrics/handlers/BufferLevelHandler.js"],"names":["config","instance","reportingController","n","name","interval","lastReportedTime","context","handlerHelpers","storedVOs","metricsConstants","Object","a","b","vo","getLowestBufferLevelVO","setInterval","clearInterval","metric","initialize","reset","handleNewMetric","BufferLevelHandler","dashjs"],"mappings":"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","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport HandlerHelpers from '../../utils/HandlerHelpers';\n\nfunction BufferLevelHandler(config) {\n\n    config = config || {};\n    let instance,\n        reportingController,\n        n,\n        name,\n        interval,\n        lastReportedTime;\n\n    let context = this.context;\n    let handlerHelpers = HandlerHelpers(context).getInstance();\n\n    let storedVOs = [];\n\n    const metricsConstants = config.metricsConstants;\n\n    function getLowestBufferLevelVO() {\n        try {\n            return Object.keys(storedVOs).map(\n                key => storedVOs[key]\n            ).reduce(\n                (a, b) => {\n                    return (a.level < b.level) ? a : b;\n                }\n            );\n        } catch (e) {\n            return;\n        }\n    }\n\n    function intervalCallback() {\n        let vo = getLowestBufferLevelVO();\n\n        if (vo) {\n            if (lastReportedTime !== vo.t) {\n                lastReportedTime = vo.t;\n                reportingController.report(name, vo);\n            }\n        }\n    }\n\n    function initialize(basename, rc, n_ms) {\n        if (rc) {\n            // this will throw if n is invalid, to be\n            // caught by the initialize caller.\n            n = handlerHelpers.validateN(n_ms);\n            reportingController = rc;\n            name = handlerHelpers.reconstructFullMetricName(basename, n_ms);\n            interval = setInterval(intervalCallback, n);\n        }\n    }\n\n    function reset() {\n        clearInterval(interval);\n        interval = null;\n        n = 0;\n        reportingController = null;\n        lastReportedTime = null;\n    }\n\n    function handleNewMetric(metric, vo, type) {\n        if (metric === metricsConstants.BUFFER_LEVEL) {\n            storedVOs[type] = vo;\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nBufferLevelHandler.__dashjs_factory_name = 'BufferLevelHandler';\nexport default dashjs.FactoryMaker.getClassFactory(BufferLevelHandler); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}