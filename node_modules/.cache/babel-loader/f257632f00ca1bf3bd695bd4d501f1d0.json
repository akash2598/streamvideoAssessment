{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _URIFragmentData = require('../vo/URIFragmentData');\n\nvar _URIFragmentData2 = _interopRequireDefault(_URIFragmentData);\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* Model class managing URI fragments.\n* @ignore\n*/\n\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nfunction URIFragmentModel() {\n  var instance = void 0,\n      URIFragmentDataVO = void 0;\n  /**\n  * @param {string} uri The URI to parse for fragment extraction\n  * @memberof module:URIFragmentModel\n  * @instance\n  */\n\n  function initialize(uri) {\n    URIFragmentDataVO = new _URIFragmentData2.default();\n    if (!uri) return null;\n    var hashIndex = uri.indexOf('#');\n\n    if (hashIndex !== -1) {\n      var fragments = uri.substr(hashIndex + 1).split('&');\n\n      for (var i = 0, len = fragments.length; i < len; ++i) {\n        var fragment = fragments[i];\n        var equalIndex = fragment.indexOf('=');\n\n        if (equalIndex !== -1) {\n          var key = fragment.substring(0, equalIndex);\n\n          if (URIFragmentDataVO.hasOwnProperty(key)) {\n            URIFragmentDataVO[key] = fragment.substr(equalIndex + 1);\n          }\n        }\n      }\n    }\n  }\n  /**\n  * @returns {URIFragmentData} Object containing supported URI fragments\n  * @memberof module:URIFragmentModel\n  * @instance\n  */\n\n\n  function getURIFragmentData() {\n    return URIFragmentDataVO;\n  }\n\n  instance = {\n    initialize: initialize,\n    getURIFragmentData: getURIFragmentData\n  };\n  return instance;\n}\n\nURIFragmentModel.__dashjs_factory_name = 'URIFragmentModel';\nexports.default = _FactoryMaker2.default.getSingletonFactory(URIFragmentModel);","map":{"version":3,"sources":["../../../../../src/streaming/models/URIFragmentModel.js"],"names":["instance","URIFragmentDataVO","URIFragmentData","hashIndex","uri","fragments","i","len","fragment","equalIndex","key","initialize","getURIFragmentData","URIFragmentModel","FactoryMaker"],"mappings":";;;;;;AA+BA,IAAA,gBAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;;;;;;;AAEA;AAAA;;;;;AAlCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,SAAA,gBAAA,GAA4B;AAExB,MAAIA,QAAAA,GAAAA,KAAJ,CAAA;AAAA,MACIC,iBAAAA,GAAAA,KADJ,CAAA;AAGA;;;;;;AAKA,WAAA,UAAA,CAAA,GAAA,EAAyB;AACrBA,IAAAA,iBAAAA,GAAoB,IAAIC,iBAAAA,CAAxBD,OAAoB,EAApBA;AAEA,QAAI,CAAJ,GAAA,EAAU,OAAA,IAAA;AAEV,QAAME,SAAAA,GAAYC,GAAAA,CAAAA,OAAAA,CAAlB,GAAkBA,CAAlB;;AACA,QAAID,SAAAA,KAAc,CAAlB,CAAA,EAAsB;AAClB,UAAME,SAAAA,GAAYD,GAAAA,CAAAA,MAAAA,CAAWD,SAAAA,GAAXC,CAAAA,EAAAA,KAAAA,CAAlB,GAAkBA,CAAlB;;AACA,WAAK,IAAIE,CAAAA,GAAJ,CAAA,EAAWC,GAAAA,GAAMF,SAAAA,CAAtB,MAAA,EAAwCC,CAAAA,GAAxC,GAAA,EAAiD,EAAjD,CAAA,EAAsD;AAClD,YAAME,QAAAA,GAAWH,SAAAA,CAAjB,CAAiBA,CAAjB;AACA,YAAMI,UAAAA,GAAaD,QAAAA,CAAAA,OAAAA,CAAnB,GAAmBA,CAAnB;;AACA,YAAIC,UAAAA,KAAe,CAAnB,CAAA,EAAuB;AACnB,cAAMC,GAAAA,GAAMF,QAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAAZ,UAAYA,CAAZ;;AACA,cAAIP,iBAAAA,CAAAA,cAAAA,CAAJ,GAAIA,CAAJ,EAA2C;AACvCA,YAAAA,iBAAAA,CAAAA,GAAAA,CAAAA,GAAyBO,QAAAA,CAAAA,MAAAA,CAAgBC,UAAAA,GAAzCR,CAAyBO,CAAzBP;AAEP;AACJ;AACJ;AACJ;AAED;AAAA;;;;;;;AAKA,WAAA,kBAAA,GAA8B;AAC1B,WAAA,iBAAA;AAGJD;;AAAAA,EAAAA,QAAAA,GAAW;AACPW,IAAAA,UAAAA,EADO,UAAA;AAEPC,IAAAA,kBAAAA,EAFJZ;AAAW,GAAXA;AAKA,SAAA,QAAA;AAGJa;;AAAAA,gBAAAA,CAAAA,qBAAAA,GAAAA,kBAAAA;kBACeC,cAAAA,CAAAA,OAAAA,CAAAA,mBAAAA,CAAAA,gBAAAA,C","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport URIFragmentData from '../vo/URIFragmentData';\nimport FactoryMaker from '../../core/FactoryMaker';\n\n/**\n * Model class managing URI fragments.\n * @ignore\n */\nfunction URIFragmentModel() {\n\n    let instance,\n        URIFragmentDataVO;\n\n    /**\n     * @param {string} uri The URI to parse for fragment extraction\n     * @memberof module:URIFragmentModel\n     * @instance\n     */\n    function initialize(uri) {\n        URIFragmentDataVO = new URIFragmentData();\n\n        if (!uri) return null;\n\n        const hashIndex = uri.indexOf('#');\n        if (hashIndex !== -1) {\n            const fragments = uri.substr(hashIndex + 1).split('&');\n            for (let i = 0, len = fragments.length; i < len; ++i) {\n                const fragment = fragments[i];\n                const equalIndex = fragment.indexOf('=');\n                if (equalIndex !== -1) {\n                    const key = fragment.substring(0,equalIndex);\n                    if (URIFragmentDataVO.hasOwnProperty(key)) {\n                        URIFragmentDataVO[key] = fragment.substr(equalIndex + 1);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @returns {URIFragmentData} Object containing supported URI fragments\n     * @memberof module:URIFragmentModel\n     * @instance\n     */\n    function getURIFragmentData() {\n        return URIFragmentDataVO;\n    }\n\n    instance = {\n        initialize: initialize,\n        getURIFragmentData: getURIFragmentData\n    };\n\n    return instance;\n}\n\nURIFragmentModel.__dashjs_factory_name = 'URIFragmentModel';\nexport default FactoryMaker.getSingletonFactory(URIFragmentModel);\n"]},"metadata":{},"sourceType":"script"}