{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _MetricsReportingEvents = require('../../MetricsReportingEvents');\n\nvar _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction DVBErrorsHandler(config) {\n  config = config || {};\n  var instance = void 0,\n      reportingController = void 0;\n  var eventBus = config.eventBus;\n  var metricsConstants = config.metricsConstants;\n\n  function onInitialisationComplete() {\n    // we only want to report this once per call to initialize\n    eventBus.off(_MetricsReportingEvents2.default.METRICS_INITIALISATION_COMPLETE, onInitialisationComplete, this); // Note: A Player becoming a reporting Player is itself\n    // something which is recorded by the DVBErrors metric.\n\n    eventBus.trigger(_MetricsReportingEvents2.default.BECAME_REPORTING_PLAYER);\n  }\n\n  function initialize(unused, rc) {\n    if (rc) {\n      reportingController = rc;\n      eventBus.on(_MetricsReportingEvents2.default.METRICS_INITIALISATION_COMPLETE, onInitialisationComplete, this);\n    }\n  }\n\n  function reset() {\n    reportingController = null;\n  }\n\n  function handleNewMetric(metric, vo) {\n    // simply pass metric straight through\n    if (metric === metricsConstants.DVB_ERRORS) {\n      if (reportingController) {\n        reportingController.report(metric, vo);\n      }\n    }\n  }\n\n  instance = {\n    initialize: initialize,\n    reset: reset,\n    handleNewMetric: handleNewMetric\n  };\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nexports.default = dashjs.FactoryMaker.getClassFactory(DVBErrorsHandler);\n/* jshint ignore:line */","map":{"version":3,"sources":["../../../../../../../src/streaming/metrics/metrics/handlers/DVBErrorsHandler.js"],"names":["config","instance","reportingController","eventBus","metricsConstants","MetricsReportingEvents","metric","initialize","reset","handleNewMetric","dashjs"],"mappings":";;;;;;AA+BA,IAAA,uBAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;;;;;;;AAEA;;AAAA,SAAA,gBAAA,CAAA,MAAA,EAAkC;AAE9BA,EAAAA,MAAAA,GAASA,MAAAA,IAATA,EAAAA;AACA,MAAIC,QAAAA,GAAAA,KAAJ,CAAA;AAAA,MACIC,mBAAAA,GAAAA,KADJ,CAAA;AAGA,MAAIC,QAAAA,GAAWH,MAAAA,CAAf,QAAA;AACA,MAAMI,gBAAAA,GAAmBJ,MAAAA,CAAzB,gBAAA;;AAEA,WAAA,wBAAA,GAAoC;AAChC;AACAG,IAAAA,QAAAA,CAAAA,GAAAA,CACIE,wBAAAA,CAAAA,OAAAA,CADJF,+BAAAA,EAAAA,wBAAAA,EAAAA,IAAAA,EAFgC,CAQhC;AACA;;AACAA,IAAAA,QAAAA,CAAAA,OAAAA,CAAiBE,wBAAAA,CAAAA,OAAAA,CAAjBF,uBAAAA;AAGJ;;AAAA,WAAA,UAAA,CAAA,MAAA,EAAA,EAAA,EAAgC;AAC5B,QAAA,EAAA,EAAQ;AACJD,MAAAA,mBAAAA,GAAAA,EAAAA;AAEAC,MAAAA,QAAAA,CAAAA,EAAAA,CACIE,wBAAAA,CAAAA,OAAAA,CADJF,+BAAAA,EAAAA,wBAAAA,EAAAA,IAAAA;AAMP;AAED;;AAAA,WAAA,KAAA,GAAiB;AACbD,IAAAA,mBAAAA,GAAAA,IAAAA;AAGJ;;AAAA,WAAA,eAAA,CAAA,MAAA,EAAA,EAAA,EAAqC;AACjC;AACA,QAAII,MAAAA,KAAWF,gBAAAA,CAAf,UAAA,EAA4C;AACxC,UAAA,mBAAA,EAAyB;AACrBF,QAAAA,mBAAAA,CAAAA,MAAAA,CAAAA,MAAAA,EAAAA,EAAAA;AAEP;AACJ;AAEDD;;AAAAA,EAAAA,QAAAA,GAAW;AACPM,IAAAA,UAAAA,EADO,UAAA;AAEPC,IAAAA,KAAAA,EAFO,KAAA;AAGPC,IAAAA,eAAAA,EAHJR;AAAW,GAAXA;AAMA,SAAA,QAAA;AAtFJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBAyFeS,MAAAA,CAAAA,YAAAA,CAAAA,eAAAA,CAAAA,gBAAAA,C;AAAuD","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsReportingEvents from '../../MetricsReportingEvents';\n\nfunction DVBErrorsHandler(config) {\n\n    config = config || {};\n    let instance,\n        reportingController;\n\n    let eventBus = config.eventBus;\n    const metricsConstants = config.metricsConstants;\n\n    function onInitialisationComplete() {\n        // we only want to report this once per call to initialize\n        eventBus.off(\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\n            onInitialisationComplete,\n            this\n        );\n\n        // Note: A Player becoming a reporting Player is itself\n        // something which is recorded by the DVBErrors metric.\n        eventBus.trigger(MetricsReportingEvents.BECAME_REPORTING_PLAYER);\n    }\n\n    function initialize(unused, rc) {\n        if (rc) {\n            reportingController = rc;\n\n            eventBus.on(\n                MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\n                onInitialisationComplete,\n                this\n            );\n        }\n    }\n\n    function reset() {\n        reportingController = null;\n    }\n\n    function handleNewMetric(metric, vo) {\n        // simply pass metric straight through\n        if (metric === metricsConstants.DVB_ERRORS) {\n            if (reportingController) {\n                reportingController.report(metric, vo);\n            }\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nexport default dashjs.FactoryMaker.getClassFactory(DVBErrorsHandler); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}